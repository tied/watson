{"version":3,"sources":["common/threadDumpsStorageService.tsx","common/withThreadDumps.tsx","common/getThreadsOverTime.tsx","components/PageWithSettings/PageWithSettings.tsx","types/ThreadStatus.tsx","components/CpuConsumers/CpuConsumer.tsx","types/Thread.tsx","components/ThreadDetails/WindowPortal.tsx","components/ThreadDetails/ThreadDetailsWindow.tsx","components/CpuConsumers/CpuConsumersPage.tsx","components/CpuConsumers/CpuConsumerSingleUsage.tsx","components/CpuConsumers/CpuConsumerItem.tsx","components/CpuConsumers/CpuConsumersList.tsx","components/CpuConsumers/CpuConsumersSettings.tsx","types/ThreadDump.tsx","components/Monitors/Monitor.tsx","components/Monitors/MonitorOverTime.tsx","components/Monitors/MonitorOwner.tsx","components/Monitors/WaitingListItem.tsx","components/Monitors/WaitingList.tsx","components/Monitors/MonitorItem.tsx","components/Monitors/MonitorOverTimeItem.tsx","components/Filter/Filter.tsx","components/Monitors/MonitorsSettings.tsx","components/Monitors/MonitorsPage.tsx","components/Navigation/OutboundLink.tsx","components/Navigation/Navigation.tsx","components/Navigation/NavToggle.tsx","components/NotFoundError.tsx","common/isIdleThread.tsx","components/SimilarStacks/StackTrace.tsx","components/SimilarStacks/ThreadSummary.tsx","components/SimilarStacks/GroupDetails.tsx","components/SimilarStacks/SimilarStacksGroup.tsx","components/SimilarStacks/SimilarStacksSettings.tsx","components/SimilarStacks/SimilarStacksPage.tsx","components/StuckThreads/ThreadDetails.tsx","components/StuckThreads/GroupDetails.tsx","components/StuckThreads/StuckThreadsGroup.tsx","components/StuckThreads/StuckThreadsSettings.tsx","components/StuckThreads/StuckThreadsPage.tsx","components/Summary/LoadAveragesChart.tsx","components/Summary/LabelFormatter.tsx","components/Summary/MemoryUsageChart.tsx","components/Summary/RunningProcessesChart.tsx","components/Summary/SwapUsageChart.tsx","components/Summary/SummaryPage.tsx","components/ThreadsOverview/ThreadsOverviewFilteringSummary.tsx","components/ThreadsOverview/ThreadsOverviewLegend.tsx","components/ThreadsOverview/ThreadsOverviewSettings.tsx","components/ThreadsOverview/ThreadOverviewItem.tsx","components/ThreadsOverview/ThreadOverviewRow.tsx","components/ThreadsOverview/ThreadsOverviewTable.tsx","components/ThreadsOverview/ThreadsOverviewPage.tsx","components/Container.tsx","types/CpuUsage.tsx","types/LoadAverage.tsx","types/MemoryUsage.tsx","types/ThreadCpuUsage.tsx","parser/RegExpUtils.tsx","parser/CpuUsageParser.tsx","types/Lock.tsx","parser/ThreadDumpParser.tsx","parser/Parser.tsx","components/FullPageDropzone/DropzoneGuide.tsx","components/FullPageDropzone/FullPageDropzone.tsx","App.tsx","index.tsx"],"names":["currentThreadDumps","lastUsedStorage","localforage","createInstance","name","threadDumpsStorage","getThreadDumpsAsync","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","key","wrap","_context","prev","next","undefined","abrupt","getFromStorage","stop","_x","apply","this","arguments","setThreadDumps","parsedDumps","stringified","stringify","SparkMD5","hash","setItem","clearCurrentThreadDump","_callee2","fromStorage","_context2","getItem","sent","Date","valueOf","parse","withThreadDumps","WrappedComponent","_React$Component","WithThreadDumps","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","promisePending","threadDumps","scrollToTop","contentDiv","document","getElementById","scrollTop","match","params","then","length","history","push","setState","inherits","createClass","value","react_default","createElement","id","assign","React","Component","getThreadsOverTime","threadsOverTime","Map","forEach","threadDump","dumpNumber","threads","thread","threadOccurences","get","set","Array","from","values","sort","t1","t2","getThreadName","localeCompare","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","slicedToArray","err","return","PageWithSettings","PAGE_NAME","handleFilterChange","event","target","isChecked","checked","newState","defineProperty","handleIntegerChange","parseInt","handleRegExpChange","PureComponent","NO_CPU_INFOS","NO_CPU_AND_THREADS_PAIR","NO_THREAD_DUMPS","N0_THREADS_MATCHING","N0_MONITORS_MATCHING","ThreadStatus","CpuConsumer","calculatedValue","Thread","epoch","status","cpuUsage","runningFor","lockWaitingFor","locksHeld","classicalLocksHeld","stackTrace","matchingFilter","getFormattedTime","toLocaleTimeString","WindowPortal","externalWindow","container","windowFeatures","closeAllExternalWindows","windows","external","closed","close","className","sourceDoc","targetDoc","styleSheets","sheet","styleSheet","cssRules","newStyleEl","cssRule","appendChild","createTextNode","cssText","head","href","newLinkEl","rel","window","onunload","open","title","windowTitle","body","copyStyles","onUnload","_this2","filter","ext","ReactDOM","createPortal","children","CpuConsumersMode","renderName","renderStatus","toLocaleUpperCase","RUNNABLE","Fragment","toFixed","renderLocksHeld","map","lock","join","renderLockWaitingFor","owner","renderStackTrace","readOnly","ThreadDetailsWindow","WindowPortal_WindowPortal","CpuConsumerSingleUsage","showDetails","handleClick","prevState","handleUnload","concat","padding","repeat","onClick","components_ThreadDetails_ThreadDetailsWindow","formatConsumerHeader","threadName","CpuConsumerItem","dumpsNumber","consumer","i","index","CpuConsumerSingleUsage_CpuConsumerSingleUsage","CpuConsumersList","limit","consumers","slice","CpuConsumers_CpuConsumerItem","CpuConsumersSettings","mode","onModeChange","onLimitChange","Mean","type","onChange","Median","Max","min","max","CpuConsumersPage","handleModeChange","calculateCpuUsages","CpuConsumers_CpuConsumersSettings","some","dump","loadAverages","CpuConsumers_CpuConsumersList","dangerouslySetInnerHTML","__html","calculationMode","calculateUsageFor","b","threadsMap","usage","reduce","reduceSum","calculateMedian","reduceMax","sum","currentThread","maxValue","lowMiddle","Math","floor","highMiddle","ceil","ThreadDump","date","runningProcesses","memoryUsage","locks","getEpoch","hours","substring","minutes","seconds","Monitor","time","javaClass","waiting","MonitorOverTime","waitingSum","monitors","MonitorOwner","showOwner","stopPropagation","monitor","WaitingListItem","WaitingList","expanded","toggleExpand","collapsable","THREADS_TO_SHOW_WHEN_COLLAPSED","WaitingListItem_WaitingListItem","MonitorItem","lastIndexOf","MonitorOwner_MonitorOwner","WaitingList_WaitingList","MonitorOverTimeItem","collapse","toggleCollapse","item","Monitors_MonitorItem","Filter","displayName","MonitorsSettings","withOwner","withoutIdle","withoutOwner","onFilterChange","components_Filter_Filter","MonitorsPage","getMonitorsOverTime","monitorsOverTime","monitorOverTime","m1","m2","filterMonitors","filtered","isQueueThread","hasAnyOwner","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Monitors_MonitorsSettings","MonitorOverTimeItem_MonitorOverTimeItem","OutboundLink","to","Navigation","onClear","react_router_dom","Navigation_OutboundLink","withRouter","NavToggle","NotFoundError","isIdleThread","includes","StackTrace","linesToConsider","stack","line","ThreadSummary","showLockOwner","toggleDetails","toggleLockOwner","getLocksHeldString","locksReducer","lockOwner","waitingForRender","console","error","accumulator","lockId","GroupDetails","getStackTrace","threadGroup","sortedByName","ThreadSummary_ThreadSummary","SimilarStacks_StackTrace","SimilarStacksGroup","toggleGroup","GroupDetails_GroupDetails","SimilarStacksSettings","minimalGroupSize","onIntegerChange","SimilarStacksPage","threadGroups","groupByStackTrace","group","SimilarStacks_SimilarStacksSettings","SimilarStacksGroup_SimilarStacksGroup","_this3","grouped","similarStacks","toString","ThreadDetails","maxDifferingLines","ThreadDetails_ThreadDetails","StuckThreadsGroup","StuckThreads_GroupDetails","StuckThreadsSettings","minClusterSize","StuckThreadsPage","filterThreads","filterThread","threadOverTime","buildClusters","clusters","getClustersFromThread","c","c1","c2","currentCluster","previous","current","areThreadsSimilarEnough","stack1","stack2","abs","StuckThreads_StuckThreadsSettings","StuckThreadsGroup_StuckThreadsGroup","LoadAveragesChart","data","fifteenMinutes","fiveMinutes","oneMinute","es6","width","height","dataKey","stroke","strokeDasharray","convert","round","labelFormatter","COLORS","MemoryUsageChart","memoryUsages","freeMemoryAvg","memoryFree","memoryUsed","nameKey","_","fill","formatter","RunningProcessesChart","SwapUsageChart","swapFree","swapUsed","SummaryPage","render","Summary_MemoryUsageChart","Summary_SwapUsageChart","Summary_LoadAveragesChart","Summary_RunningProcessesChart","matchingInGroupCounter","currentGroup","matchingCounter","nonEmptyCounter","ThreadsOverviewFilteringSummary","isFilteredByStack","threadsNumber","matching","total","percentage","ThreadsOverviewLegend","ThreadsOverviewSettings","nonJvm","tomcat","nonTomcat","database","lucene","nameFilter","stackFilter","onRegExpChange","ThreadOverviewItem","isFiltered","isMatchingFilter","UNKNOWN","ThreadOverviewRow","threadsPadded","firstThread","find","ThreadOverviewItem_ThreadOverviewItem","ThreadsOverview","dates","ThreadsOverview_ThreadOverviewRow","ThreadsOverviewPage","jvmRegex","tomcatRegex","databaseRegex","luceneRegex","filterByName","markMatchingStackFilter","userProvided","RegExp","_unused","matchesName","clearAllMatches","filters","getStackTraceFilters","markIfMatchesAllFilters","userProvidedFilter","_unused2","matchesStackTraceFilter","test","filteredDumps","ThreadsOverview_ThreadsOverviewSettings","ThreadsOverview_ThreadsOverviewFilteringSummary","ThreadsOverview_ThreadsOverviewLegend","ThreadsOverviewTable","regex","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Container","navigationOpen","toggleNavigation","components_Navigation_Navigation","components_Navigation_NavToggle","react_router","exact","path","component","page","CpuUsage","timestamp","threadCpuUsages","LoadAverages","MemoryUsage","memoryTotal","swapTotal","ThreadCpuUsage","matchOne","pattern","str","execArray","exec","matchMultipleGroups","matchMultipleTimes","matches","CPU_USAGE_TIMESTAMP_PATTERN","LOAD_AVERAGES_PATTERN","RUNNING_PROCESSES_PATTERN","TOTAL_MEMORY_PATTERN","USED_MEMORY_PATTERN","FREE_MEMORY_PATTERN","COLUMN_MATCHER","CpuUsageParser","lines","callback","parseLoadAverages","shift","parseRunningProcesses","parseMemoryUsage","parseThreadCpuUsages","parseFloat","line1","line2","columns","threadCpuUsage","Lock","THREAD_DUMP_DATE_PATTERN","NAME_PATTERN","NID_PATTERN","TID_PATTERN","FRAME_PATTERN","THREAD_STATE_PATTERN","SYNCHRONIZATION_STATUS_PATTERN","LOCKED_OWNABLE_SYNCHRONIZERS_PATTERN","NONE_HELD_PATTERN","HELD_LOCK_PATTERN","JNI_REFERENCES_PATTERN","ThreadDumpParser","parseLine","identifyAnonymousSynchronizers","startsWith","parseThreadHeader","parseStackLine","header","trim","nid","tid","frame","threadState","stringToThreadStatus","synchronizationStatus","getOrCreateLock","warn","lockHeld","validStatuses","BLOCKED","TIMED_WAITING","WAITING","splice","indexOf","threadStatus","existingLock","newLock","Parser","onFilesParsed","cpuUsages","filesToParse","parseFiles","uploaded","onParsedCpuUsage","checkCompletion","onParsedThreadDump","files","parseMultipleFiles","parseSingleFile","file","reader","FileReader","onload","result","split","currentDump","parseThreadDump","readAsText","_loop","firstLine","parseCpuUsage","groupCpuUsagesWithThreadDumps","sortThreadDumps","_this4","findCorrespondingThreadDump","groupCpuUsageWithThreadDump","cpuUsageEpoch","closest","smallestDiff","dumpEpoch","diff","_this5","cpu","findThreadWithId","DropzoneGuide","FullPageDropzone","es","multiple","onDrop","getRootProps","getInputProps","isDragActive","FullPageDropzone_DropzoneGuide","onParsed","App","sevenDaysAgo","setDate","getDate","iterate","removeItem","clearOldThreadDumps"],"mappings":"yaAKIA,oKACEC,EAAkBC,IAAYC,eAAe,CAAEC,KAAM,aACrDC,EAAqBH,IAAYC,eAAe,CAAEC,KAAM,gBAGjDE,EAAmB,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,eACNC,IAAvBnB,EAD6B,CAAAgB,EAAAE,KAAA,eAAAF,EAAAI,OAAA,SAExBC,EAAeP,IAFS,cAAAE,EAAAI,OAAA,SAK1BpB,GAL0B,wBAAAgB,EAAAM,SAAAT,MAAH,gBAAAU,GAAA,OAAAhB,EAAAiB,MAAAC,KAAAC,YAAA,GAUnBC,EAAiB,SAACC,GAC7B5B,EAAqB4B,EACrB,IAAMC,EAAcC,YAAU9B,GACxBc,EAAMiB,IAASC,KAAKH,GAE1B,OADAxB,EAAmB4B,QAAQnB,EAAKe,GACzBf,GAKIoB,EAAyB,WACpClC,EAAqB,aAeRqB,+EAAf,SAAAc,EAA8BrB,GAA9B,IAAAsB,EAAA,OAAA1B,EAAAC,EAAAI,KAAA,SAAAsB,GAAA,cAAAA,EAAApB,KAAAoB,EAAAnB,MAAA,cAAAmB,EAAAnB,KAAA,EAC4Bb,EAAmBiC,QAAgBxB,GAD/D,cACQsB,EADRC,EAAAE,OAKItC,EAAgBgC,QAAQnB,GAAK,IAAI0B,MAAOC,WAG1CzC,EAAqBoC,EAAcM,YAAMN,GAAe,GAR1DC,EAAAjB,OAAA,SASSpB,GATT,wBAAAqC,EAAAf,SAAAa,6BChCO,IAAMQ,EACX,SAAiCC,GA6C/B,OA7C4E,SAAAC,GAO1E,SAAAC,EAAYC,GAAU,IAAAC,EAAAxC,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAqB,IACpBE,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAiB,KAAAjB,OAAA2C,EAAA,EAAA3C,CAAAsC,GAAAM,KAAA3B,KAAMsB,KANDM,MAAe,CACpBC,gBAAgB,EAChBC,YAAa,IAGOP,EA8BdQ,YAAc,WACpB,IAAMC,EAAaC,SAASC,eAAe,WACvCF,IACFA,EAAWG,UAAY,IA9BzB,IAAM9C,EAAciC,EAAMc,MAAMC,OAAOhD,IAHnB,OAIOR,EAAoBQ,GAG5CiD,KAAK,SAACR,GAIL,OAH2B,IAAvBA,EAAYS,QACdjB,EAAMkB,QAAQC,KAAK,KAEdX,IAERQ,KAAK,SAACR,GACLP,EAAKmB,SAAS,CAAEZ,cAAaD,gBAAgB,MAd7BN,EAPoD,OAAAxC,OAAA4D,EAAA,EAAA5D,CAAAsC,EAAAD,GAAArC,OAAA6D,EAAA,EAAA7D,CAAAsC,EAAA,EAAAhC,IAAA,oBAAAwD,MAAA,WA0BxE7C,KAAK+B,gBA1BmE,CAAA1C,IAAA,SAAAwD,MAAA,WA8BxE,OAAI7C,KAAK4B,MAAMC,eACNiB,EAAA5D,EAAA6D,cAAA,MAAIC,GAAG,YAAP,8BAGFF,EAAA5D,EAAA6D,cAAC5B,EAADpC,OAAAkE,OAAA,CAAkBnB,YAAa9B,KAAK4B,MAAME,aAAiB9B,KAAKsB,YAlCCD,EAAA,CAC9C6B,IAAMC,8BCbzB,SAASC,EAAmBtB,GACzC,IAAMuB,EAAkB,IAAIC,IAc5B,OAZAxB,EAAYyB,QAAQ,SAACC,EAAYC,GAC/BD,EAAWE,QAAQH,QAAQ,SAACI,GAC1B,IAAIC,EAAmBP,EAAgBQ,IAAIF,EAAOX,IAC7CY,IACHA,EAAmB,IAAIN,KAGzBM,EAAiBE,IAAIL,EAAYE,GACjCN,EAAgBS,IAAIH,EAAOX,GAAIY,OAI5BG,MAAMC,KAAKX,EAAgBY,UAC/BC,KAAK,SAACC,EAAIC,GAAL,OAAYC,EAAcF,GAAIG,cAAcD,EAAcD,MAGpE,IAAMC,EAAgB,SAACX,GAAyC,IAAAa,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IAC9D,QAAAgF,EAAAC,EAAyBjB,EAAzBkB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAAkC,KAAAQ,EAAAL,EAAA7B,MAApBc,EAAoB5E,OAAAiG,EAAA,EAAAjG,CAAAgG,EAAA,MAChC,GAAIpB,EACF,OAAOA,EAAOhF,MAH4C,MAAAsG,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAM9D,MAAO,YCzBYU,6MAUTC,UAAY,iBAMZC,mBAAiE,SAACC,GAC1E,IAAM3G,EAAe2G,EAAMC,OAAO5G,KAC5B6G,EAAqBF,EAAMC,OAAOE,QAClCC,EAAwB3G,OAAA4G,EAAA,EAAA5G,CAAA,GAAMJ,EAAO6G,GAC3CjE,EAAKmB,SAASgD,MAGNE,oBAAkE,SAACN,GAC3E,IAAM3G,EAAe2G,EAAMC,OAAO5G,KAC5BkE,EAAgBgD,SAASP,EAAMC,OAAO1C,MAAQyC,EAAMC,OAAO1C,MAAQ,IAAK,IACxE6C,EAAwB3G,OAAA4G,EAAA,EAAA5G,CAAA,GAAMJ,EAAOkE,EAAQ,EAAIA,EAAQ,GAC/DtB,EAAKmB,SAASgD,MAGNI,mBAAiE,SAACR,GAC1E,IAAM3G,EAAe2G,EAAMC,OAAO5G,KAC5BkE,EAAgByC,EAAMC,OAAO1C,MAC7B6C,EAAwB3G,OAAA4G,EAAA,EAAA5G,CAAA,GAAMJ,EAAOkE,GAC3CtB,EAAKmB,SAASgD,4EArBd,OAAO,YAbsCxC,IAAM6C,eAAlCZ,EAEFa,aAAe,+DAFbb,EAGFc,wBAA0B,4FAHxBd,EAIFe,gBAAkB,kEAJhBf,EAMFgB,oBAAsB,0CANpBhB,EAOFiB,qBAAuB,+CCVrCC,ECEgBC,EAInB,SAAAA,EAAYC,EAAyB3C,GAAwC7E,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAsG,GAAAtG,KAHtEuG,qBAGqE,EAAAvG,KAFrE4D,sBAEqE,EAC1E5D,KAAKuG,gBAAkBA,EACvBvG,KAAK4D,iBAAmBA,GCLP4C,EAiBnB,SAAAA,EAAYxD,EAAYrE,EAAc8H,GAAuB1H,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAwG,GAAAxG,KAZtDgD,QAYqD,EAAAhD,KAXrDrB,UAWqD,EAAAqB,KAVrD0G,YAUqD,EAAA1G,KATrD2G,SAAmB,EASkC3G,KARrD4G,gBAQqD,EAAA5G,KAPrD6G,eAA8B,KAOuB7G,KANrD8G,UAAoB,GAMiC9G,KALrD+G,mBAA6B,GAKwB/G,KAJrDgH,WAAuB,GAI8BhH,KAHrDiH,gBAA0B,EAG2BjH,KAFpDyG,WAEoD,EAC1DzG,KAAKgD,GAAKA,EACVhD,KAAKrB,KAAOA,EACZqB,KAAKyG,MAAQA,GApBID,EACLU,iBAAmB,SAACvD,GAChC,OAAOA,EAAO8C,MAAQ,IAAI1F,KAAK4C,EAAO8C,OAAOU,qBAAuB,aFLnEd,iIAQUA,QGCMe,sBAQnB,SAAAA,EAAY9F,GAAc,IAAAC,EAAA,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAoH,IACxB7F,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAiB,KAAAjB,OAAA2C,EAAA,EAAA3C,CAAAqI,GAAAzF,KAAA3B,KAAMsB,KAPA+F,oBAMkB,EAAA9F,EALlB+F,eAKkB,EAAA/F,EAHlBgG,eACN,0EAEwBhG,EAwDlBiG,wBAA0B,WAAM,IAAAjD,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IACtC,QAAAgF,EAAAC,EAAuByC,EAAaK,QAApC7C,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAA6C,KAAlCmD,EAAkChD,EAAA7B,MACvC6E,IAAaA,EAASC,QACxBD,EAASE,SAHyB,MAAA3C,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,KArDtClD,EAAK8F,eAAiB,KACtB9F,EAAK+F,UAAYrF,SAASc,cAAc,OACpCxB,EAAKD,MAAMuG,YACbtG,EAAK+F,UAAUO,UAAYtG,EAAKD,MAAMuG,WANhBtG,0EAURuG,EAAqBC,GACrChE,MAAMC,KAAK8D,EAAUE,aAAazE,QAAQ,SAAC0E,GACzC,IAAMC,EAAaD,EAEnB,GAAIC,EAAWC,SAAU,CACvB,IAAMC,EAAaN,EAAU/E,cAAc,SAE3CgB,MAAMC,KAAKkE,EAAWC,UAAU5E,QAAQ,SAAC8E,GACvCD,EAAWE,YAAYR,EAAUS,eAAeF,EAAQG,YAG1DT,EAAUU,KAAKH,YAAYF,QACtB,GAAIF,EAAWQ,KAAM,CAC1B,IAAMC,EAAYb,EAAU/E,cAAc,QAE1C4F,EAAUC,IAAM,aAChBD,EAAUD,KAAOR,EAAWQ,KAC5BX,EAAUU,KAAKH,YAAYK,kDAM/BE,OAAOC,SAAW9I,KAAKwH,wBAEvBxH,KAAKqH,eAAiBwB,OAAOE,KAAK,GAAI,GAAI/I,KAAKuH,gBAC3CvH,KAAKqH,iBACPD,EAAaK,QAAQhF,KAAKzC,KAAKqH,gBAC/BrH,KAAKqH,eAAepF,SAAS+G,MAAQhJ,KAAKsB,MAAM2H,YAChDjJ,KAAKqH,eAAepF,SAASiH,KAAKZ,YAAYtI,KAAKsH,WACnDtH,KAAKmJ,WAAWlH,SAAUjC,KAAKqH,eAAepF,UAC9CjC,KAAKqH,eAAeyB,SAAW9I,KAAKsB,MAAM8H,yDAIhB,IAAAC,EAAArJ,KACxBA,KAAKqH,iBAAmBrH,KAAKqH,eAAeM,QAC9C3H,KAAKqH,eAAeO,QAEtBR,EAAaK,QAAUL,EAAaK,QAAQ6B,OAAO,SAAAC,GAAG,OAAIA,IAAQF,EAAKhC,kDAIvE,OAAOmC,IAASC,aAAazJ,KAAKsB,MAAMoI,SAAU1J,KAAKsH,kBA7DjBpE,IAAM6C,gBAA3BqB,EACJK,QAAgC,GCCjD,ICFYkC,EDYNC,EAAa,SAACjG,GAClB,OACEb,EAAA5D,EAAA6D,cAAA,UAAKyD,EAAOU,iBAAiBvD,GAA7B,IAAsCb,EAAA5D,EAAA6D,cAAA,SAAIY,EAAOhF,QAI/CkL,EAAe,SAAClG,GACpB,YAAsBjE,IAAlBiE,EAAO+C,OACF,KAIP5D,EAAA5D,EAAA6D,cAAA,YACED,EAAA5D,EAAA6D,cAAA,SACGY,EAAO+C,OAAOoD,oBACdnG,EAAO+C,SAAWL,EAAa0D,UAC9BjH,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,UAAKrG,EAAOgD,SAASsD,QAAQ,GAA7B,iBAJN,kBAMkBtG,EAAOiD,aAKvBsD,EAAkB,SAACvG,GACvB,OACEA,EAAOmD,UAAUvE,OAAS,GAC1BO,EAAA5D,EAAA6D,cAAA,YAAMD,EAAA5D,EAAA6D,cAAA,wBAAN,KAA2BY,EAAOmD,UAAUqD,IAAI,SAAAC,GAAI,OAAIA,EAAKpH,KAAIqH,KAAK,MAAtE,MAIEC,EAAuB,SAAC3G,GAC5B,OACEA,EAAOkD,gBACP/D,EAAA5D,EAAA6D,cAAA,YACED,EAAA5D,EAAA6D,cAAA,8CADF,KAC6CY,EAAOkD,eAAe7D,GADnE,IAEKW,EAAOkD,eAAe0D,MACrBzH,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,kBAAYlH,EAAA5D,EAAA6D,cAAA,SAAIY,EAAOkD,eAAe0D,MAAM5L,OAC5CmE,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,4BAKJQ,EAAmB,SAAC7G,GACxB,OACEb,EAAA5D,EAAA6D,cAAA,YACEzD,KAAK,MACLmL,UAAU,EACV5C,UAAU,yBACVhF,MAAOc,EAAOqD,WAAWqD,KAAK,SAIrBK,EA9D+B,SAAA5L,GAAA,IAAG6E,EAAH7E,EAAG6E,OAAQyF,EAAXtK,EAAWsK,SAAX,OAC5CtG,EAAA5D,EAAA6D,cAAC4H,EAAD,CAAc1B,YAAatF,EAAOhF,KAAMkJ,UAAU,iBAAiBuB,SAAUA,GAC1EQ,EAAWjG,GACXkG,EAAalG,GACb2G,EAAqB3G,GACrBuG,EAAgBvG,GAChB6G,EAAiB7G,KELDiH,6MAEZhJ,MAAe,CACpBiJ,aAAa,KAGRC,YAAc,WACnBvJ,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,kBAGjDG,aAAe,WACpBzJ,EAAKmB,SAAS,CAAEmI,aAAa,6EAI7B,IAAMlH,EAAS3D,KAAKsB,MAAMqC,OAE1B,IAAKA,EACH,OAAOb,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,iBAGT,IAAMrD,EAAQ,GAAAsE,OAAMtH,EAAOgD,SAASsD,QAAQ,GAA9B,KACRiB,EAAU,IAAIC,OAAO,EAAIxE,EAASpE,QACpCsF,EAAYlE,EAAOgD,SAAW,GAC9B,QACAhD,EAAOgD,SAAW,GAChB,OACAhD,EAAOgD,SAAW,GAChB,OACAhD,EAAOgD,SAAW,EAChB,QACA,GAGV,OAFAkB,GAAa,YAGX/E,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACGkB,EACDpI,EAAA5D,EAAA6D,cAAA,QAAM8E,UAAWA,EAAWuD,QAASpL,KAAK8K,aAAcnE,GAEvD3G,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQA,EAAQyF,SAAUpJ,KAAKgL,uBAxCV9H,IAAM6C,eCiBpDuF,EAAuB,SAACzI,EAAea,GAC3C,IAAI6H,EAAqB,GADgEhH,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IAGzF,QAAAgF,EAAAC,EAAqBjB,EAArBkB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAA8B,KAAnBZ,EAAmBe,EAAA7B,MACxBc,IACF4H,EAAa5H,EAAOhF,OALiE,MAAAsG,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GASzF,SAAAwG,OACKpI,EAAMoH,QAAQ,GADnB,SAAAgB,OAC6BM,EAD7B,MAKaC,EAjC2B,SAAA1M,GAGxC,IAHuE,IAA5B2M,EAA4B3M,EAA5B2M,YAAaC,EAAe5M,EAAf4M,SAClDhI,EAAqC,GAElCiI,EAAI,EAAGA,EAAIF,EAAaE,IAC/BjI,EAAQjB,KAAKiJ,EAAS9H,iBAAiBC,IAAI8H,IAG7C,OACE7I,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAA,UACGuI,EAAqBI,EAASnF,gBAAiBmF,EAAS9H,iBAAiBK,WAE5EnB,EAAA5D,EAAA6D,cAAA,QAAM8E,UAAU,QACbnE,EAAQyG,IAAI,SAACxG,EAAQiI,GAAT,OAAmB9I,EAAA5D,EAAA6D,cAAC8I,EAAD,CAAwBlI,OAAQA,EAAQtE,IAAKuM,SCLtEE,EAR4B,SAAAhN,GAAA,IAAGiN,EAAHjN,EAAGiN,MAAON,EAAV3M,EAAU2M,YAAaO,EAAvBlN,EAAuBkN,UAAvB,OACzClJ,EAAA5D,EAAA6D,cAAA,MAAIC,GAAG,kBACJgJ,EAAUC,MAAM,EAAGF,GAAO5B,IAAI,SAACuB,EAAUE,GAAX,OAC7B9I,EAAA5D,EAAA6D,cAACmJ,EAAD,CAAiB7M,IAAKuM,EAAOH,YAAaA,EAAaC,SAAUA,QC0CxDS,UA7CgC,SAAArN,GAAA,IAAGsN,EAAHtN,EAAGsN,KAAML,EAATjN,EAASiN,MAAOM,EAAhBvN,EAAgBuN,aAAcC,EAA9BxN,EAA8BwN,cAA9B,OAC7CxJ,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,YACNF,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,WACb/E,EAAA5D,EAAA6D,cAAA,mCAEAD,EAAA5D,EAAA6D,cAAA,SAAO8E,UAAWuE,IAASzC,EAAiB4C,KAAO,UAAY,IAC7DzJ,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,WACL/G,QAAS2G,IAASzC,EAAiB4C,KACnCE,SAAUJ,EAAa1C,EAAiB4C,QAJ5C,QASAzJ,EAAA5D,EAAA6D,cAAA,SAAO8E,UAAWuE,IAASzC,EAAiB+C,OAAS,UAAY,IAC/D5J,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,WACL/G,QAAS2G,IAASzC,EAAiB+C,OACnCD,SAAUJ,EAAa1C,EAAiB+C,UAJ5C,UASA5J,EAAA5D,EAAA6D,cAAA,SAAO8E,UAAWuE,IAASzC,EAAiBgD,IAAM,UAAY,IAC5D7J,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,WACL/G,QAAS2G,IAASzC,EAAiBgD,IACnCF,SAAUJ,EAAa1C,EAAiBgD,OAJ5C,QAUF7J,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,uBACNF,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SAAOyJ,KAAK,SAAS7N,KAAK,QAAQiO,IAAI,IAAIC,IAAI,QAC5ChK,MAAOkJ,EACPU,SAAUH,IAEZxJ,EAAA5D,EAAA6D,cAAA,2CJxCI4G,8EAWSmD,6MAEZlL,MAAe,CACpBmK,MAAO,IACPK,KAAMzC,EAAiB4C,QAGfnH,UAAY,kBA0Bd2H,iBAAmB,SAACX,GAAD,OAA8D,WACvF7K,EAAKmB,SAAS,CAAE0J,KAAMA,8EAxBtB,IAAMJ,EAAYhM,KAAKgN,mBAAmBhN,KAAK4B,MAAMwK,MAErD,OACEtJ,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,QACNF,EAAA5D,EAAA6D,cAACkK,EAAD,CACEb,KAAMpM,KAAK4B,MAAMwK,KACjBL,MAAO/L,KAAK4B,MAAMmK,MAClBM,aAAcrM,KAAK+M,iBACnBT,cAAetM,KAAK4F,sBAGpB5F,KAAKsB,MAAMQ,YAAYoL,KAAK,SAAAC,GAAI,QAAMA,EAAKC,cAAgBD,EAAKzJ,QAAQnB,OAAS,IAE/EO,EAAA5D,EAAA6D,cAACsK,EAAD,CACAtB,MAAO/L,KAAK4B,MAAMmK,MAClBN,YAAazL,KAAKsB,MAAMQ,YAAYS,OACpCyJ,UAAWA,IAJXlJ,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAAQT,EAAiB7G,uEAevCuH,GACzB,IAAMxB,EAA2B,GAC3B3I,EAAkBD,EAAmBpD,KAAKsB,MAAMQ,aAFqByC,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IAI3E,QAAAgF,EAAAC,EAAsBtB,EAAtBuB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAAuC,KAA5Bb,EAA4BgB,EAAA7B,MACrCmJ,EAAUvJ,KAAKzC,KAAKyN,kBAAkB/J,EAAS8J,KAL0B,MAAAvI,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAS3E,OAFAuH,EAAU9H,KAAK,SAAChF,EAAGwO,GAAJ,OAAUA,EAAEnH,gBAAkBrH,EAAEqH,kBAExCyF,4CAGiB2B,EAAiCH,GACzD,IAAM9J,EAAUK,MAAMC,KAAK2J,EAAW1J,UAElC2J,EAAgB,EACpB,OAAQJ,GACN,KAAK7D,EAAiB4C,KACpBqB,EAAQlK,EAAQmK,OAAO7N,KAAK8N,UAAW,GAAK9N,KAAKsB,MAAMQ,YAAYS,OACnE,MACF,KAAKoH,EAAiB+C,OACpBkB,EAAQ5N,KAAK+N,gBAAgBrK,GAC7B,MACF,KAAKiG,EAAiBgD,IACpBiB,EAAQlK,EAAQmK,OAAO7N,KAAKgO,UAAW,GAI3C,OAAO,IAAI1H,EAAYsH,EAAOD,qCAGdM,EAAaC,GAC7B,OAAOD,EAAMC,EAAcvH,2CAGXwH,EAAkBD,GAClC,OAAQA,EAAcvH,SAAWwH,EAAYD,EAAcvH,SAAWwH,0CAGhDzK,GACtB,IAAMO,EAASP,EAAQuI,QACvBhI,EAAOC,KAAK,SAAChF,EAAGwO,GAAJ,OAAUxO,EAAEyH,SAAW+G,EAAE/G,WACrC,IAAMyH,EAAYC,KAAKC,OAAOrK,EAAO1B,OAAS,GAAK,GAC7CgM,EAAaF,KAAKG,MAAMvK,EAAO1B,OAAS,GAAK,GACnD,OAAQ0B,EAAOmK,GAAWzH,SAAW1C,EAAOsK,GAAY5H,UAAY,SAjF1BxB,GKfzBsJ,GAYnB,SAAAA,EAAYC,GAAqB,IAAAnN,EAAAvB,KAC/B,GAD+BjB,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAyO,GAAAzO,KAP1BoN,kBAO0B,EAAApN,KAN1B2O,sBAM0B,EAAA3O,KAL1B4O,iBAK0B,EAAA5O,KAJ1B0D,QAAoB,GAIM1D,KAH1B6O,MAAgB,GAGU7O,KAFzByG,WAEyB,EAAAzG,KAc1B8O,SAAW,WAChB,OAAOvN,EAAKkF,OAdPiI,EAAL,CAOA,IAAMK,EAAQlJ,SAAS6I,EAAKM,UAAU,GAAI,IAAK,IACzCC,EAAUpJ,SAAS6I,EAAKM,UAAU,GAAI,IAAK,IAC3CE,EAAUrJ,SAAS6I,EAAKM,UAAU,IAAK,IAC7ChP,KAAKyG,MAAgB,KAARsI,EAA4B,IAAVE,EAA4B,IAAVC,OAT/ClP,KAAKyG,MAAQ,MAdEgI,GACLvH,iBAAmB,SAAC1D,GAChC,OAAOA,EAAWiD,MAAQ,IAAI1F,KAAKyC,EAAWiD,OAAOU,qBAAuB,oBCH3DgI,GAMnB,SAAAA,EAAmB3L,EAAwB4G,GAAarL,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAmP,GAAAnP,KALjDoP,UAKgD,EAAApP,KAJhDqP,eAIgD,EAAArP,KAHhDuK,WAGgD,EAAAvK,KAFhDsP,aAEgD,EACrDtP,KAAKoP,KAAOX,GAAWvH,iBAAiB1D,GACxCxD,KAAKqP,UAAYjF,EAAKvC,UACtB7H,KAAKuK,MAAQH,EAAKG,MAClBvK,KAAKsP,QAAUlF,EAAKkF,SCZHC,GAKnB,SAAAA,EAAmBvM,GAAajE,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAuP,GAAAvP,KAJzBgD,QAIwB,EAAAhD,KAHxBwP,WAAqB,EAGGxP,KAFxByP,SAAsB,GAG3BzP,KAAKgD,GAAKA,GCIO0M,8MAEZ9N,MAAe,CACpB+N,WAAW,KAuBL7E,YAAc,SAACxF,GACrBA,EAAMsK,kBACNrO,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAE4E,WAAY5E,EAAU4E,gBAG9C3E,aAAe,WACrBzJ,EAAKmB,SAAS,CAAEiN,WAAW,6EAzB3B,IAAME,EAAU7P,KAAKsB,MAAMuO,QAE3B,OAAKA,EAAQtF,MAKXzH,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,qBACAD,EAAA5D,EAAA6D,cAAA,WACAD,EAAA5D,EAAA6D,cAAA,KAAG8E,UAAU,qBAAqBuD,QAASpL,KAAK8K,aAAc+E,EAAQtF,MAAM5L,MAC5EmE,EAAA5D,EAAA6D,cAAA,WAEC/C,KAAK4B,MAAM+N,WACV7M,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQkM,EAAQtF,MAAOnB,SAAUpJ,KAAKgL,gBAXxD,YAV6B9H,IAAM6C,eCA3B+J,8MAEZlO,MAAe,CACpBiJ,aAAa,KAiBPC,YAAc,WACpBvJ,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,kBAGhDG,aAAe,WACrBzJ,EAAKmB,SAAS,CAAEmI,aAAa,6EAlB7B,IAAMlH,EAAS3D,KAAKsB,MAAMqC,OAE1B,OACEb,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,KAAGqI,QAASpL,KAAK8K,aAAcnH,EAAOhF,MACtCmE,EAAA5D,EAAA6D,cAAA,WAEC/C,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQA,EAAQyF,SAAUpJ,KAAKgL,uBAfjB9H,IAAM6C,eCA9BgK,8MAIZnO,MAAe,CACpBoO,UAAU,KA8BJC,aAAe,WACrB1O,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEiF,UAAWjF,EAAUiF,qFA3BnD,GAAkC,IAA9BhQ,KAAKsB,MAAMgO,QAAQ/M,OACrB,OAAO,KAGT,IAAM2N,EAAclQ,KAAKsB,MAAMgO,QAAQ/M,OAASwN,EAAYI,+BACtDzM,EAAU1D,KAAK4B,MAAMoO,SACvBhQ,KAAKsB,MAAMgO,QACXtP,KAAKsB,MAAMgO,QAAQrD,MAAM,EAAG8D,EAAYI,gCAE5C,OACErN,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,SAAI/C,KAAKsB,MAAMgO,QAAQ/M,OAAvB,gDACAO,EAAA5D,EAAA6D,cAAA,WAECW,EAAQyG,IAAI,SAACxG,EAAQiI,GAAT,OAAmB9I,EAAA5D,EAAA6D,cAACqN,GAAD,CAAiBzM,OAAQA,EAAQtE,IAAKuM,MAErEsE,EAAc,GACbpN,EAAA5D,EAAA6D,cAAA,KAAGqI,QAASpL,KAAKiQ,cACdjQ,KAAK4B,MAAMoO,SAAX,+BAAA/E,OACkCiF,EADlC,uCAAAjF,OAE2BiF,EAF3B,qCA3B4BhN,IAAM6C,eAA1BgK,GAEJI,+BAAiC,GCLlD,IAoBeE,GApBuB,SAAAvR,GAAiB,IAAd+Q,EAAc/Q,EAAd+Q,QACjCR,EAAYQ,EAAQR,UACtBQ,EAAQR,UAAUL,UAAUa,EAAQR,UAAUiB,YAAY,KAAO,GACjE,gBAEJ,OACExN,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,sBACb/E,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,QACb/E,EAAA5D,EAAA6D,cAAA,SAAI8M,EAAQT,MACZtM,EAAA5D,EAAA6D,cAAA,WACCsM,GAEHvM,EAAA5D,EAAA6D,cAAA,WACED,EAAA5D,EAAA6D,cAACwN,GAAD,CAAcV,QAASA,IACvB/M,EAAA5D,EAAA6D,cAACyN,GAAD,CAAalB,QAASO,EAAQP,aCXjBmB,8MAEZ7O,MAAe,CACpB8O,UAAU,KAmBJC,eAAiB,WACvBpP,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAE2F,UAAW3F,EAAU2F,qFAhBnD,IAAMb,EAAU7P,KAAKsB,MAAMuO,QAE3B,OACE/M,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,YAAYuD,QAASpL,KAAK2Q,gBACtC7N,EAAA5D,EAAA6D,cAAA,QAAM8E,UAAW7H,KAAK4B,MAAM8O,SAAW,iBAAmB,YACzDb,EAAQL,WAFX,2BAEkDK,EAAQ7M,GAF1D,MAKEhD,KAAK4B,MAAM8O,UACXb,EAAQJ,SAAStF,IAAI,SAACyG,EAAMhF,GAAP,OAAiB9I,EAAA5D,EAAA6D,cAAC8N,GAAD,CAAaxR,IAAKuM,EAAOiE,QAASe,cAjBjC1N,IAAM6C,eCUxC+K,kBAZkB,SAAAhS,GAAA,IAAGH,EAAHG,EAAGH,KAAMoS,EAATjS,EAASiS,YAAatL,EAAtB3G,EAAsB2G,QAASgH,EAA/B3N,EAA+B2N,SAA/B,OAC/B3J,EAAA5D,EAAA6D,cAAA,SAAO8E,UAAWpC,EAAU,UAAY,IACtC3C,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,WACL7N,KAAMA,EACN8G,QAASA,EACTgH,SAAUA,IAEXsE,KCUUC,GAjBb,SAAAlS,GAAA,IAAGmS,EAAHnS,EAAGmS,UAAWC,EAAdpS,EAAcoS,YAAaC,EAA3BrS,EAA2BqS,aAAcC,EAAzCtS,EAAyCsS,eAAzC,OACEtO,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,YACNF,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,WACb/E,EAAA5D,EAAA6D,cAAA,qBAEAD,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,cAAcoS,YAAY,eACrCtL,QAASyL,EAAazE,SAAU2E,IAElCtO,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,YAAYoS,YAAY,aACnCtL,QAASwL,EAAWxE,SAAU2E,IAEhCtO,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,eAAeoS,YAAY,gBACtCtL,QAAS0L,EAAc1E,SAAU2E,OCRtBE,8MAEZ1P,MAAe,CACpBqP,WAAW,EACXC,aAAa,EACbC,cAAc,KAGN/L,UAAY,aAuBdmM,oBAAsB,SAACzP,GAC7B,IAAM0P,EAAiD,IAAIlO,IAiB3D,OAfAxB,EAAYyB,QAAQ,SAACC,GACnBA,EAAWqL,MAAMtL,QAAQ,SAAC6G,GACxB,IAAMyF,EAAU,IAAIV,GAAQ3L,EAAY4G,GAEpCqH,EAAkBD,EAAiB3N,IAAIuG,EAAKpH,IAC3CyO,IACHA,EAAkB,IAAIlC,GAAgBnF,EAAKpH,IAC3CwO,EAAiB1N,IAAIsG,EAAKpH,GAAIyO,IAGhCA,EAAgBhC,SAAShN,KAAKoN,GAC9B4B,EAAgBjC,YAAcK,EAAQP,QAAQ/M,WAI3CwB,MACJC,KAAKwN,EAAiBvN,UACtBC,KAAK,SAACwN,EAAIC,GAAL,OAAYA,EAAGnC,WAAakC,EAAGlC,gBAGjCoC,eAAiB,SAACnC,GACxB,IAAIoC,EAAWpC,EAASnG,OAAO,SAAAuG,GAAO,OAAIA,EAAQL,WAAa,IAY/D,OAVIjO,EAAKK,MAAMsP,cACbW,EAAWA,EAASvI,OAAO,SAAAuG,GAAO,OAAKtO,EAAKuQ,cAAcjC,MAExDtO,EAAKK,MAAMqP,YACbY,EAAWA,EAASvI,OAAO,SAAAuG,GAAO,OAAItO,EAAKwQ,YAAYlC,MAErDtO,EAAKK,MAAMuP,eACbU,EAAWA,EAASvI,OAAO,SAAAuG,GAAO,OAAKtO,EAAKwQ,YAAYlC,MAGnDgC,KAGDE,YAAc,SAACN,GACrB,OAAOA,EAAgBhC,SAASvC,KAAK,SAAA2C,GAAO,OAAsB,OAAlBA,EAAQtF,WAGlDuH,cAAgB,SAACL,GAA8C,IAAAlN,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IACrE,QAAAgF,EAAAC,EAAsB8M,EAAgBhC,SAAtC7K,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAAgD,KAArCsL,EAAqCnL,EAAA7B,MAE9C,GAAsB,OAAlBgN,EAAQtF,MACV,OAAO,EAHqC,IAAAyH,GAAA,EAAAC,GAAA,EAAAC,OAAAxS,EAAA,IAO9C,QAAAyS,EAAAC,EAAqBvC,EAAQP,QAA7B1K,OAAAC,cAAAmN,GAAAG,EAAAC,EAAA3S,QAAAqF,MAAAkN,GAAA,EAAsC,CACpC,GADoCG,EAAAtP,MACzBmE,WAAWzE,OAAS,GAC7B,OAAO,GATmC,MAAA0C,GAAAgN,GAAA,EAAAC,EAAAjN,EAAA,YAAA+M,GAAA,MAAAI,EAAAlN,QAAAkN,EAAAlN,SAAA,WAAA+M,EAAA,MAAAC,KADqB,MAAAjN,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAcrE,OAAO,2EA7EP,IAAMgL,EAAWzP,KAAKuR,oBAAoBvR,KAAKsB,MAAMQ,aAC/C+P,EAAW7R,KAAK4R,eAAenC,GAErC,OACE3M,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,QACNF,EAAA5D,EAAA6D,cAACsP,GAAD,CACEpB,UAAWjR,KAAK4B,MAAMqP,UACtBC,YAAalR,KAAK4B,MAAMsP,YACxBC,aAAcnR,KAAK4B,MAAMuP,aACzBC,eAAgBpR,KAAKqF,qBAErBrF,KAAKsB,MAAMQ,YAAYoL,KAAK,SAAAC,GAAI,OAAIA,EAAKzJ,QAAQnB,OAAS,IAEpC,IAApBsP,EAAStP,OACPO,EAAA5D,EAAA6D,cAAA,UAAKuO,EAAalL,sBAClByL,EAAS1H,IAAI,SAAA0F,GAAO,OAAI/M,EAAA5D,EAAA6D,cAACuP,GAAD,CAAqBjT,IAAKwQ,EAAQ7M,GAAI6M,QAASA,MAHzE/M,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAAQ+D,EAAapL,2BAvBtBf,GCF3BoN,WANwB,SAAAzT,GAAA,IAAG0T,EAAH1T,EAAG0T,GAAI9I,EAAP5K,EAAO4K,SAAP,OACrC5G,EAAA5D,EAAA6D,cAAA,KAAG2F,KAAM8J,EAAIjN,OAAO,SAASqD,IAAI,uBAC9Bc,KCMC+I,8MAwCIC,QAAU,WAChBjS,IACAc,EAAKD,MAAMkB,QAAQC,KAAK,8EAvCxB,IAAMpD,EAAcW,KAAKsB,MAAMc,MAAMC,OAAOhD,IAE5C,OACEyD,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAW7H,KAAKsB,MAAMyH,KAAO,OAAS,IACzCjG,EAAA5D,EAAA6D,cAAA,MAAIC,GAAIhD,KAAKsB,MAAMyH,KAAO,gBAAkB,gBAA5C,UAIAjG,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,CAASH,GAAE,IAAAvH,OAAM5L,EAAN,cAAsByD,EAAA5D,EAAA6D,cAAA,uBAEnCD,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,CAASH,GAAE,IAAAvH,OAAM5L,EAAN,oBAA4ByD,EAAA5D,EAAA6D,cAAA,4BACvCD,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,CAASH,GAAE,IAAAvH,OAAM5L,EAAN,qBAA6ByD,EAAA5D,EAAA6D,cAAA,mCACxCD,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,CAASH,GAAE,IAAAvH,OAAM5L,EAAN,oBAA4ByD,EAAA5D,EAAA6D,cAAA,qCACvCD,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,CAASH,GAAE,IAAAvH,OAAM5L,EAAN,uBAA+ByD,EAAA5D,EAAA6D,cAAA,+BAC1CD,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,CAASH,GAAE,IAAAvH,OAAM5L,EAAN,eAAuByD,EAAA5D,EAAA6D,cAAA,wBAGpCD,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,sBACNF,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAA,MAAIqI,QAASpL,KAAK0S,SAAlB,6BAGF5P,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAC6P,GAAD,CAAcJ,GApCgB,0CAqC5B1P,EAAA5D,EAAA6D,cAAA,4BAEFD,EAAA5D,EAAA6D,cAAC6P,GAAD,CAAcJ,GAtCc,mCAuC1B1P,EAAA5D,EAAA6D,cAAA,oCAhCWG,IAAM6C,eA8ChB8M,eAAWJ,IC/CXK,WANqB,SAAAhU,GAAA,IAAGiK,EAAHjK,EAAGiK,KAAMqC,EAATtM,EAASsM,QAAT,OAClCtI,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAWkB,EAAO,kBAAoB,aAAcqC,QAASA,GAChEtI,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,iBCHG+P,GAJwC,kBACrDjQ,EAAA5D,EAAA6D,cAAA,MAAIC,GAAG,YAAP,oCCDa,SAASgQ,GAAarP,GACnC,OAAOA,EAAOqD,WAAWzE,OAAS,IAC5BoB,EAAOhF,KAAKsU,SAAS,oBACK,2EAAzBtP,EAAOqD,WAAW,IACO,sFAAzBrD,EAAOqD,WAAW,IACnBrD,EAAOhF,KAAKsU,SAAS,mBACK,iHAAzBtP,EAAOqD,WAAW,GCF3B,IAWekM,GAXsB,SAAApU,GAAqC,IAAlCkI,EAAkClI,EAAlCkI,WAAYmM,EAAsBrU,EAAtBqU,gBAC5CC,EAAQD,EAAkB,EAAInM,EAAWiF,MAAM,EAAGkH,GAAmBnM,EAE3E,OACElE,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,cACXuL,EAAMjJ,IAAI,SAACkJ,EAAMzH,GAAP,OACT9I,EAAA5D,EAAA6D,cAAA,MAAI1D,IAAKuM,GAAQyH,OCAJC,8MAEZ1R,MAAe,CACpBiJ,aAAa,EACb0I,eAAe,KAuBTC,cAAgB,WACtBjS,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,kBAGhD4I,gBAAkB,WACxBlS,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEwI,eAAgBxI,EAAUwI,oBAGlDvI,aAAe,WACrBzJ,EAAKmB,SAAS,CAAEmI,aAAa,EAAO0I,eAAe,OAqB7CG,mBAAqB,SAAC/P,GAC5B,OAAgC,IAA5BA,EAAOmD,UAAUvE,OACZ,KAEFoB,EAAOmD,UAAUqD,IAAI,SAAAC,GAAI,OAAIA,EAAKpH,KAAI6K,OAAOtM,EAAKoS,uFArDzD,IAAMhQ,EAAS3D,KAAKsB,MAAMqC,OACpBiQ,EAAYjQ,EAAOkD,eAAiBlD,EAAOkD,eAAe0D,MAAQ,KAClEzD,EAAY9G,KAAK0T,mBAAmB/P,GAE1C,OACEb,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAA,KAAGqI,QAASpL,KAAKwT,eAAjB,IAAkC7P,EAAOhF,KAAzC,KADF,IAAAsM,OAEOzE,EAAOU,iBAAiBvD,IAC5B3D,KAAK6T,iBAAiBlQ,EAAQiQ,GAC9BjQ,EAAOmD,UAAUvE,OAAS,GAA1B,cAAA0I,OAA6CnE,EAA7C,KAEA9G,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQA,EAAQyF,SAAUpJ,KAAKgL,eACrDhL,KAAK4B,MAAM2R,eAAiBK,GAC3B9Q,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQiQ,EAAWxK,SAAUpJ,KAAKgL,yDAiBtCrH,EAAgBiQ,GACvC,IAAM/M,EAAiBlD,EAAOkD,eAAiBlD,EAAOkD,eAAe7D,GAAK,KAE1E,OAAK6D,EAID+M,GACFE,QAAQC,MAAMpQ,GAEZb,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,mCAC6BlH,EAAA5D,EAAA6D,cAAA,KAAGqI,QAASpL,KAAKyT,iBAAjB,IAAoC5M,EAApC,OAIjC,+BAAAoE,OAAsCpE,EAAtC,sBAXS,0CAqBUmN,EAAqBC,EAAgBrI,GACxD,OAAkB,IAAVA,EAAeqI,EAAhB,GAAAhJ,OAA4B+I,EAA5B,MAAA/I,OAA4CgJ,UAjEZ/Q,IAAM6C,eCC5BmO,8MAIZtS,MAAe,CACpBoO,UAAU,KA4BJC,aAAe,WACrB1O,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEiF,UAAWjF,EAAUiF,eAG7CmE,cAAgB,SAACzQ,GAAgC,IAAAa,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IACvD,QAAAgF,EAAAC,EAAqBjB,EAArBkB,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAA8B,KAAnBZ,EAAmBe,EAAA7B,MAC5B,GAAIc,EACF,OAAOA,EAAOqD,YAHqC,MAAA/B,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAMvD,MAAO,4EAlCP,IAAMuC,EAAahH,KAAKmU,cAAcnU,KAAKsB,MAAM8S,aAC3CC,EAAerU,KAAKsB,MAAM8S,YAAYlQ,KAAK,SAACC,EAAIC,GAAL,OAAYD,EAAGxF,KAAK2F,cAAcF,EAAGzF,QAChFuR,EAAcmE,EAAa9R,OAAS2R,EAAa/D,+BACjDzM,EAAU1D,KAAK4B,MAAMoO,SACvBqE,EACAA,EAAapI,MAAM,EAAGiI,EAAa/D,gCAEvC,OACErN,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,UACGW,EAAQyG,IAAI,SAACxG,EAAQiI,GAAT,OAAmB9I,EAAA5D,EAAA6D,cAACuR,GAAD,CAAejV,IAAKuM,EAAOjI,OAAQA,MAElEuM,EAAc,GACbpN,EAAA5D,EAAA6D,cAAA,UAAID,EAAA5D,EAAA6D,cAAA,KAAGqI,QAASpL,KAAKiQ,cAClBjQ,KAAK4B,MAAMoO,SAAX,+BAAA/E,OACkCiF,EADlC,uCAAAjF,OAE2BiF,EAF3B,+BAKPpN,EAAA5D,EAAA6D,cAACwR,GAAD,CAAYvN,WAAYA,EAAYmM,gBAAiBnT,KAAKsB,MAAM6R,0BA5B9BjQ,IAAM6C,eAA3BmO,GAEJ/D,+BAAiC,OCH7BqE,8MAEZ5S,MAAe,CACpBiJ,aAAa,KAmBP4J,YAAc,WACpBlT,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,wFAhBtD,OACE/H,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,YAAYuD,QAASpL,KAAKyU,aACtC3R,EAAA5D,EAAA6D,cAAA,QAAM8E,UAAW7H,KAAK4B,MAAMiJ,YAAc,UAAY,mBACrD7K,KAAKsB,MAAM8S,YAAY7R,OAF1B,+BAKCvC,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAAC2R,GAAD,CACEN,YAAapU,KAAKsB,MAAM8S,YACxBjB,gBAAiBnT,KAAKsB,MAAM6R,0BAjBQjQ,IAAM6C,eC8BvC4O,WA/Bb,SAAA7V,GAAA,IAAGqU,EAAHrU,EAAGqU,gBAAiByB,EAApB9V,EAAoB8V,iBAAkB1D,EAAtCpS,EAAsCoS,YAAaE,EAAnDtS,EAAmDsS,eAAgByD,EAAnE/V,EAAmE+V,gBAAnE,OACE/R,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,YACNF,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,WACb/E,EAAA5D,EAAA6D,cAAA,qBAEAD,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,cAAcoS,YAAY,eACrCtL,QAASyL,EAAazE,SAAU2E,KAGpCtO,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,SACL7N,KAAK,kBACLkE,MAAOsQ,EACP1G,SAAUoI,IAEZ/R,EAAA5D,EAAA6D,cAAA,0CAGFD,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,SACL7N,KAAK,mBACLkE,MAAO+R,EACPnI,SAAUoI,IAEZ/R,EAAA5D,EAAA6D,cAAA,2CCvBa+R,8MAEZlT,MAAe,CACpBuR,gBAAiB,GACjByB,iBAAkB,EAClB1D,aAAa,KAGL9L,UAAY,yFAEN,IAAAiE,EAAArJ,KACR+U,EAAe/U,KAAKgV,kBAAkBhV,KAAKsB,MAAMQ,YAAa9B,KAAK4B,MAAMuR,iBAC5E7J,OAAO,SAAA2L,GAAK,OAAIA,EAAM1S,QAAU8G,EAAKzH,MAAMgT,mBAE9C,OACE9R,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,QACNF,EAAA5D,EAAA6D,cAACmS,GAAD,CACE/B,gBAAiBnT,KAAK4B,MAAMuR,gBAC5ByB,iBAAkB5U,KAAK4B,MAAMgT,iBAC7B1D,YAAalR,KAAK4B,MAAMsP,YACxBE,eAAgBpR,KAAKqF,mBACrBwP,gBAAiB7U,KAAK4F,sBAEtB5F,KAAKsB,MAAMQ,YAAYoL,KAAK,SAAAC,GAAI,OAAIA,EAAKzJ,QAAQnB,OAAS,IAEhC,IAAxBwS,EAAaxS,OACXO,EAAA5D,EAAA6D,cAAA,UAAK+R,EAAkB3O,qBACvB4O,EAAa5K,IAAI,SAAC8K,EAAOrJ,GAAR,OACjB9I,EAAA5D,EAAA6D,cAACoS,GAAD,CAAoB9V,IAAKuM,EACvBwI,YAAaa,EACb9B,gBAAiB9J,EAAKzH,MAAMuR,oBANhCrQ,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAAQuH,EAAkB5O,8DAWzCpE,EAA2BqR,GAAyB,IAAAiC,EAAApV,KACtEqV,EAAiC,IAAI/R,IAoB3C,OAlBAxB,EAAYyB,QAAQ,SAACC,GACnBA,EAAWE,QAAQH,QAAQ,SAACI,GAC1B,IAAMqD,EAAaoO,EAAKjB,cAAcxQ,EAAQwP,GAE9C,GAAKnM,EAAL,CAIA,IAAIsO,EAAgBD,EAAQxR,IAAImD,GAC3BsO,IACHA,EAAgB,IAElBA,EAAc7S,KAAKkB,GAEnB0R,EAAQvR,IAAIkD,EAAYsO,QAIrBvR,MAAMC,KAAKqR,EAAQpR,UAAUC,KAAK,SAACC,EAAIC,GAAL,OAAYA,EAAG7B,OAAS4B,EAAG5B,+CAGhDoB,EAAgBwP,GACpC,OAAInT,KAAK4B,MAAMsP,aAAe8B,GAAarP,GAClC,KAGLwP,EAAkB,EACbxP,EAAOqD,WAAWuO,WAGpB5R,EAAOqD,WAAWiF,MAAM,EAAGkH,GAAiBoC,kBApERpQ,GCF1BqQ,8MACZ5T,MAAe,CACpBiJ,aAAa,KAuBPC,YAAc,WACpBvJ,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,kBAGhDG,aAAe,WACrBzJ,EAAKmB,SAAS,CAAEmI,aAAa,6EAxB7B,IAAMlH,EAAS3D,KAAKsB,MAAMqC,OACpByP,EAAQzP,EAAOqD,WAAWiF,MAAM,EAAGoC,KAAKxB,IAAI7M,KAAKsB,MAAMmU,kBAAmB,KAEhF,OACE3S,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,SAAIyD,EAAOU,iBAAiBvD,IAE5Bb,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,cACXuL,EAAMjJ,IAAI,SAACkJ,EAAMzH,GAAP,OACT9I,EAAA5D,EAAA6D,cAAA,MAAI1D,IAAKuM,GAAQyH,KACnBvQ,EAAA5D,EAAA6D,cAAA,UAAID,EAAA5D,EAAA6D,cAAA,KAAGqI,QAASpL,KAAK8K,aAAjB,wBAGL9K,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQA,EAAQyF,SAAUpJ,KAAKgL,uBApBnB9H,IAAM6C,eCSlCmO,GAbwB,SAAApV,GAAwC,IAArC2W,EAAqC3W,EAArC2W,kBAAmBrB,EAAkBtV,EAAlBsV,YAC3D,OACEtR,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACGoK,EAAYjK,IAAI,SAACxG,EAAQiI,GAAT,OACf9I,EAAA5D,EAAA6D,cAAC2S,GAAD,CACErW,IAAKuM,EACLjI,OAAQA,EACR8R,kBAAmBA,QCHRE,8MAEZ/T,MAAe,CACpBiJ,aAAa,KAwBP4J,YAAc,WACpBlT,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,wFArBtD,GAAsC,IAAlC7K,KAAKsB,MAAM8S,YAAY7R,OACzB,OAAO,KAGT,IAAMoB,EAAS3D,KAAKsB,MAAM8S,YAAY,GACtC,OACEtR,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,YAAYuD,QAASpL,KAAKyU,aACtC3R,EAAA5D,EAAA6D,cAAA,QAAM8E,UAAW7H,KAAK4B,MAAMiJ,YAAc,UAAY,mBACrD7K,KAAKsB,MAAM8S,YAAY7R,OAF1B,0BAEyDoB,EAAOhF,KAFhE,KAKCqB,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAAC6S,GAAD,CACExB,YAAapU,KAAKsB,MAAM8S,YACxBqB,kBAAmBzV,KAAKsB,MAAMmU,4BAtBKvS,IAAM6C,eC+BtC8P,GAhCb,SAAA/W,GAAA,IAAG2W,EAAH3W,EAAG2W,kBAAmBK,EAAtBhX,EAAsBgX,eAAgB5E,EAAtCpS,EAAsCoS,YAAaE,EAAnDtS,EAAmDsS,eAAgByD,EAAnE/V,EAAmE+V,gBAAnE,OACE/R,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,YACNF,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,WACb/E,EAAA5D,EAAA6D,cAAA,qBAEAD,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,cAAcoS,YAAY,eACrCtL,QAASyL,EAAazE,SAAU2E,KAGpCtO,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,SACLI,IAAI,IACJjO,KAAK,iBACLkE,MAAOiT,EACPrJ,SAAUoI,IAEZ/R,EAAA5D,EAAA6D,cAAA,+DAGFD,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SACEyJ,KAAK,SACL7N,KAAK,oBACLkE,MAAO4S,EACPhJ,SAAUoI,IAEZ/R,EAAA5D,EAAA6D,cAAA,qDCxBagT,eAGnB,SAAAA,EAAYzU,GAA6B,IAAAC,EAAA,OAAAxC,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAA+V,IACvCxU,EAAAxC,OAAA0C,EAAA,EAAA1C,CAAAiB,KAAAjB,OAAA2C,EAAA,EAAA3C,CAAAgX,GAAApU,KAAA3B,KAAMsB,KAHE8D,UAAY,gBAEmB7D,EAoCjCyU,cAAgB,SAAClU,GACvB,OAAOA,EACJqI,IAAI,SAAA3G,GAAU,OAAIjC,EAAK0U,aAAazS,KACpC8F,OAAO,SAAA6D,GAAI,OAAIA,EAAK5K,OAAS,KAvCOhB,EA0CjC0U,aAAe,SAACC,GACtB,IAAMrE,EAAW,GADuDtN,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IAGxE,QAAAgF,EAAAC,EAAqBuR,EAArBtR,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAAqC,KAA1BZ,EAA0Be,EAAA7B,MAC/BtB,EAAKK,MAAMsP,aAAe8B,GAAarP,EAAO,KAIlDkO,EAASpP,KAAKkB,EAAO,KARiD,MAAAsB,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAWxE,OAAOoN,GArDgCtQ,EAwDjC4U,cAAgB,SAACrU,GACvB,IAAMsU,EAAuB,GADkCpE,GAAA,EAAAC,GAAA,EAAAC,OAAAxS,EAAA,IAG/D,QAAAyS,EAAAC,EAA6BtQ,EAA7B8C,OAAAC,cAAAmN,GAAAG,EAAAC,EAAA3S,QAAAqF,MAAAkN,GAAA,EAA0C,KAA/BkE,EAA+B/D,EAAAtP,MACxCtB,EAAK8U,sBAAsBH,GACxB5M,OAAO,SAAAgN,GAAC,OAAIA,EAAE/T,QAAUhB,EAAKK,MAAMkU,iBACnCvS,QAAQ,SAAA+S,GAAC,OAAIF,EAAS3T,KAAK6T,MAN+B,MAAArR,GAAAgN,GAAA,EAAAC,EAAAjN,EAAA,YAAA+M,GAAA,MAAAI,EAAAlN,QAAAkN,EAAAlN,SAAA,WAAA+M,EAAA,MAAAC,GAS/D,OAAOkE,EAASlS,KAAK,SAACqS,EAAIC,GAAL,OAAYA,EAAGjU,OAASgU,EAAGhU,UAjEThB,EAoEjC8U,sBAAwB,SAACH,GAI/B,IAHA,IAAME,EAAW,GAEbK,EAAiB,CAACP,EAAe,IAC5BvK,EAAI,EAAGA,EAAIuK,EAAe3T,OAAQoJ,IAAK,CAC9C,IAAM+K,EAAWR,EAAevK,EAAI,GAC9BgL,EAAUT,EAAevK,GAE3BpK,EAAKqV,wBAAwBF,EAAUC,GACzCF,EAAehU,KAAKkU,IAEpBP,EAAS3T,KAAKgU,GACdA,EAAiB,CAACE,IAKtB,OADAP,EAAS3T,KAAKgU,GACPL,GArFgC7U,EAwFjCqV,wBAA0B,SAACzS,EAAYC,GAC7C,IAAMyS,EAAS1S,EAAG6C,WACZ8P,EAAS1S,EAAG4C,WAElB,GAAIqH,KAAK0I,IAAIF,EAAOtU,OAASuU,EAAOvU,QAAUhB,EAAKK,MAAM6T,kBACvD,OAAO,EAIT,IADA,IACS9J,EADK0C,KAAKxB,IAAIgK,EAAOtU,OAAQuU,EAAOvU,QACzBoJ,GAAK,EAAGA,IAC1B,GAAIkL,EAAOlL,KAAOmL,EAAOnL,GACvB,OAAQA,GAAKpK,EAAKK,MAAM6T,kBAI5B,OAAO,GApGPlU,EAAKK,MAAQ,CACX6T,kBAAmB,EACnBK,eAAgBvU,EAAKD,MAAMQ,YAAYS,OACvC2O,aAAa,GANwB3P,wEAUzB,IAAA8H,EAAArJ,KACRkW,EAAiB9S,EAAmBpD,KAAKsB,MAAMQ,aAC/C+P,EAAW7R,KAAKgW,cAAcE,GAC9BE,EAAWpW,KAAKmW,cAActE,GAEpC,OACE/O,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,QACNF,EAAA5D,EAAA6D,cAACiU,GAAD,CACEvB,kBAAmBzV,KAAK4B,MAAM6T,kBAC9BK,eAAgB9V,KAAK4B,MAAMkU,eAC3B5E,YAAalR,KAAK4B,MAAMsP,YACxBE,eAAgBpR,KAAKqF,mBACrBwP,gBAAiB7U,KAAK4F,sBAEtB5F,KAAKsB,MAAMQ,YAAYoL,KAAK,SAAAC,GAAI,OAAIA,EAAKzJ,QAAQnB,OAAS,IAEpC,IAApB6T,EAAS7T,OACPO,EAAA5D,EAAA6D,cAAA,UAAKgT,EAAiB5P,qBACtBiQ,EAASjM,IAAI,SAAC8K,EAAOrJ,GAAR,OACb9I,EAAA5D,EAAA6D,cAACkU,GAAD,CAAmB5X,IAAKuM,EACtBwI,YAAaa,EACbQ,kBAAmBpM,EAAKzH,MAAM6T,sBANlC3S,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAAQwI,EAAiB7P,2BA5BtBf,YC2B/B+R,GAhC6B,SAAApY,GAAqB,IAAlBgD,EAAkBhD,EAAlBgD,YACvCqV,EAAiB,GAYvB,OAXArV,EAAYqI,IAAI,SAAC3G,GACXA,EAAW4J,cACb+J,EAAK1U,KAAK,CACR2U,eAAgB5T,EAAW4J,aAAagK,eACxCC,YAAa7T,EAAW4J,aAAaiK,YACrC1Y,KAAM8P,GAAWvH,iBAAiB1D,GAClC8T,UAAW9T,EAAW4J,aAAakK,cAMvCxU,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,SACb/E,EAAA5D,EAAA6D,cAAA,2BACAD,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACxC3U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAWJ,KAAMA,GACfrU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAOG,QAAQ,SACf5U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAO/K,KAAK,WACZ1J,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAeI,OAAO,UAAUC,gBAAgB,QAChD9U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,MACAzU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,MACAzU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAM5Y,KAAK,aAAa+Y,QAAQ,YAAYC,OAAO,YACnD7U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAM5Y,KAAK,eAAe+Y,QAAQ,cAAcC,OAAO,YACvD7U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAM5Y,KAAK,kBAAkB+Y,QAAQ,iBAAiBC,OAAO,gBC3BjEE,GAAU,SAAChV,GACf,OAAIA,EAAQ,IACV,GAAAoI,OAAU6M,GAAMjV,EAAQ,KAAxB,OAEF,GAAAoI,OAAU6M,GAAMjV,EAAQ,KAAxB,QAGIiV,GAAQ,SAACjV,GACb,OAAOA,EAAMoH,QAAQ,IAGR8N,GAfX,SAAClV,GACD,OAAOgV,GAAQhV,ICGbmV,GAAS,CAAC,UAAW,WAqCZC,GA/B4B,SAAAnZ,GAAqB,IACxDoZ,EADwDpZ,EAAlBgD,YAEzCqI,IAAI,SAAA3G,GAAU,OAAIA,EAAWoL,cAC7BtF,OAAO,SAAAsF,GAAW,QAAMA,IAErBuJ,EAAgBD,EAAarK,OAAO,SAAC3O,EAAGwO,GAAJ,OAAUxO,EAAIwO,EAAE0K,YAAY,GAAKF,EAAa3V,OAGlF4U,EAAiB,CACrB,CAAExY,KAAM,cAAekE,MAHHqV,EAAarK,OAAO,SAAC3O,EAAGwO,GAAJ,OAAUxO,EAAIwO,EAAE2K,YAAY,GAAKH,EAAa3V,QAItF,CAAE5D,KAAM,cAAekE,MAAOsV,IAGhC,OACErV,EAAA5D,EAAA6D,cAAA,WACED,EAAA5D,EAAA6D,cAAA,0BACAD,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACxC3U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,KACEzU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAKJ,KAAMA,EAAMO,QAAQ,QAAQY,QAAQ,QAErCnB,EAAKhN,IAAI,SAACoO,EAAG3M,GAAJ,OAAc9I,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAMlY,IAAKuM,EAAO4M,KAAMR,GAAOpM,QAG1D9I,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAASkB,UAAWV,KACpBjV,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,UCIKmB,GAhCiC,SAAA5Z,GAAqB,IAAlBgD,EAAkBhD,EAAlBgD,YAC3CqV,EAAiB,GAUvB,OATArV,EAAYqI,IAAI,SAAC3G,GACXA,EAAW4J,cACb+J,EAAK1U,KAAK,CACR9D,KAAM8P,GAAWvH,iBAAiB1D,GAClCmL,iBAAkBnL,EAAWmL,qBAMjC7L,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,SACb/E,EAAA5D,EAAA6D,cAAA,+BACAD,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACxC3U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAWJ,KAAMA,GACfrU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAOG,QAAQ,SACf5U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAO/K,KAAK,WACZ1J,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAeI,OAAO,UAAUC,gBAAgB,QAChD9U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,MACAzU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,MACAzU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CACE5Y,KAAK,oBACL+Y,QAAQ,mBACRC,OAAO,gBC1BbK,WAAS,CAAC,UAAW,YAqCZW,GA/B0B,SAAA7Z,GAAqB,IACtDoZ,EADsDpZ,EAAlBgD,YAEvCqI,IAAI,SAAA3G,GAAU,OAAIA,EAAWoL,cAC7BtF,OAAO,SAAAsF,GAAW,QAAMA,IAKrBuI,EAAiB,CACrB,CAAExY,KAAM,YAAakE,MAJHqV,EAAarK,OAAO,SAAC3O,EAAGwO,GAAJ,OAAUxO,EAAIwO,EAAEkL,UAAU,GAAKV,EAAa3V,QAKlF,CAAE5D,KAAM,YAAakE,MAJHqV,EAAarK,OAAO,SAAC3O,EAAGwO,GAAJ,OAAUxO,EAAIwO,EAAEmL,UAAU,GAAKX,EAAa3V,SAOpF,OACEO,EAAA5D,EAAA6D,cAAA,WACED,EAAA5D,EAAA6D,cAAA,wBACAD,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAqBC,MAAM,OAAOC,OAAQ,KACxC3U,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,KACEzU,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAKJ,KAAMA,EAAMO,QAAQ,QAAQY,QAAQ,QAErCnB,EAAKhN,IAAI,SAACoO,EAAG3M,GAAJ,OAAc9I,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAAMlY,IAAKuM,EAAO4M,KAAMR,GAAOpM,QAG1D9I,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,CAASkB,UAAWV,KACpBjV,EAAA5D,EAAA6D,cAACwU,GAAA,EAAD,UC9BWuB,8MACZC,OAAS,kBACdjW,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,aACJzB,EAAKD,MAAMQ,YAAYoL,KAAK,SAAAC,GAAI,QAAMA,EAAKC,eAEzCtK,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACAlH,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,iBACNF,EAAA5D,EAAA6D,cAACiW,GAAD,CAAkBlX,YAAaP,EAAKD,MAAMQ,cAC1CgB,EAAA5D,EAAA6D,cAACkW,GAAD,CAAgBnX,YAAaP,EAAKD,MAAMQ,eAE1CgB,EAAA5D,EAAA6D,cAACmW,GAAD,CAAmBpX,YAAaP,EAAKD,MAAMQ,cAC3CgB,EAAA5D,EAAA6D,cAACoW,GAAD,CAAuBrX,YAAaP,EAAKD,MAAMQ,eAP/CgB,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAAQuL,EAAY9S,+CAJpBb,GC8BnCiU,GAAyB,SAACnL,EAAaoL,GAC3C,OAAOpL,EAAMlK,MAAMC,KAAKqV,EAAapV,UAAU4J,OAAOyL,GAAiB,IAEnEA,GAAkB,SAACrL,EAAaC,GACpC,OAAOD,GAAOC,EAAcjH,eAAiB,EAAI,IAG7CsS,GAAkB,SAACtL,EAAaoL,GACpC,OAAOpL,EAAMlK,MAAMC,KAAKqV,EAAapV,UAAU1B,QAGlCiX,GAvCX,SAAA1a,GAAuD,IAApD2a,EAAoD3a,EAApD2a,kBAAmBC,EAAiC5a,EAAjC4a,cAAe5X,EAAkBhD,EAAlBgD,YAErC,GAAI2X,EAAmB,CACrB,IAAME,EAAW7X,EAAY+L,OAAOuL,GAAwB,GACtDQ,EAAQ9X,EAAY+L,OAAO0L,GAAiB,GAC5CM,GAAcF,EAAWC,EAAQ,KAAK3P,QAAQ,GAEpD,OACEnH,EAAA5D,EAAA6D,cAAA,KAAGC,GAAG,oBACH2W,EADH,WACqBC,EADrB,KAC8BC,EAD9B,uDAMJ,GAAIH,IAAkB5X,EAAYS,OAAQ,CACxC,IAAMoX,EAAW7X,EAAYS,OACvBsX,GAAcF,EAAWD,EAAgB,KAAKzP,QAAQ,GAE5D,OACEnH,EAAA5D,EAAA6D,cAAA,KAAGC,GAAG,oBACH2W,EADH,WACqBD,EADrB,KACsCG,EADtC,+CAMJ,OAAO/W,EAAA5D,EAAA6D,cAAA,KAAGC,GAAG,sBCjBF8W,GAhB0B,kBACvChX,EAAA5D,EAAA6D,cAAA,SAAOC,GAAG,0BACRF,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,YAAd,YACA/E,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,WAAd,WACA/E,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,WAAd,WACA/E,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,iBAAd,iBACA/E,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,WAAd,WACA/E,EAAA5D,EAAA6D,cAAA,WACAD,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,YAAd,uBCyCOkS,WAtCmC,SAAAjb,GAAA,IAAGkb,EAAHlb,EAAGkb,OAAQC,EAAXnb,EAAWmb,OAAQC,EAAnBpb,EAAmBob,UACnEC,EADgDrb,EAChDqb,SAAUC,EADsCtb,EACtCsb,OAAQC,EAD8Bvb,EAC9Bub,WAAYC,EADkBxb,EAClBwb,YAAalJ,EADKtS,EACLsS,eAAgBmJ,EADXzb,EACWyb,eADX,OAE9CzX,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,6BACNF,EAAA5D,EAAA6D,cAAA,OAAK8E,UAAU,WACb/E,EAAA5D,EAAA6D,cAAA,qBAEAD,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,SAASoS,YAAY,UAChCtL,QAASuU,EAAQvN,SAAU2E,IAE7BtO,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,SAASoS,YAAY,SAChCtL,QAASwU,EAAQxN,SAAU2E,IAE7BtO,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,YAAYoS,YAAY,aACnCtL,QAASyU,EAAWzN,SAAU2E,IAEhCtO,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,WAAWoS,YAAY,WAClCtL,QAAS0U,EAAU1N,SAAU2E,IAE/BtO,EAAA5D,EAAA6D,cAACsO,GAAD,CAAQ1S,KAAK,SAASoS,YAAY,SAChCtL,QAAS2U,EAAQ3N,SAAU2E,KAG/BtO,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,kBACNF,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SAAOyJ,KAAK,OAAO7N,KAAK,aAAakE,MAAOwX,EAAY5N,SAAU8N,IAElEzX,EAAA5D,EAAA6D,cAAA,gCAGFD,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,SAAOyJ,KAAK,OAAO7N,KAAK,cAAckE,MAAOyX,EAAa7N,SAAU8N,IAEpEzX,EAAA5D,EAAA6D,cAAA,oCChCWyX,8MAEZ5Y,MAAe,CACpBiJ,aAAa,KA2BP2I,cAAgB,WACtBjS,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEF,aAAcE,EAAUF,kBAGhDG,aAAe,WACrBzJ,EAAKmB,SAAS,CAAEmI,aAAa,6EA5B7B,IAAMlH,EAAS3D,KAAKsB,MAAMqC,OAE1B,IAAKA,EACH,OAAOb,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,UAGvB,IAAMA,EAAa7H,KAAKsB,MAAMmZ,WAC1Bza,KAAKsB,MAAMoZ,iBAAmB,WAAa,GAC3C/W,EAAO+C,OAAS/C,EAAO+C,OAAO6O,WAAalP,EAAasU,QAAQpF,WAEpE,OACEzS,EAAA5D,EAAA6D,cAAAD,EAAA5D,EAAA8K,SAAA,KACElH,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAWA,EAAWuD,QAASpL,KAAKwT,eACrC7P,EAAOqD,WAAW,GACnBlE,EAAA5D,EAAA6D,cAAA,YAAOY,EAAOqD,WAAW,KAG1BhH,KAAK4B,MAAMiJ,aACV/H,EAAA5D,EAAA6D,cAACsI,EAAD,CAAqB1H,OAAQA,EAAQyF,SAAUpJ,KAAKgL,uBAzBd9H,IAAM6C,eCqBvC6U,GA1B6B,SAAA9b,GAE1C,IAF8E,IAAjC8a,EAAiC9a,EAAjC8a,MAAOlW,EAA0B5E,EAA1B4E,QAAS+W,EAAiB3b,EAAjB2b,WACvDI,EAA2C,GACxClP,EAAI,EAAGA,EAAIiO,EAAOjO,IACzBkP,EAAclP,GAAKjI,EAAQG,IAAI8H,GAGjC,IAAMmP,EAAcD,EAAcE,KAAK,SAAApX,GAAM,YAAejE,IAAXiE,IAC3C4H,EAAauP,EAAcA,EAAYnc,KAAO,GAEpD,OACEmE,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAA,MAAI8E,UAAU,QACX0D,EACDzI,EAAA5D,EAAA6D,cAAA,YAAOwI,IAERsP,EAAc1Q,IAAI,SAACxG,EAAQgI,GAAT,OACjB7I,EAAA5D,EAAA6D,cAACiY,GAAD,CAAoB3b,IAAKsM,EACvBhI,OAAQA,EACR8W,WAAYA,EACZC,mBAAkB/W,GAASA,EAAOsD,qBCQ7BgU,GA3B2B,SAAAnc,GAAA,IAAGoc,EAAHpc,EAAGoc,MAAOzB,EAAV3a,EAAU2a,kBAAmB3X,EAA7BhD,EAA6BgD,YAA7B,OACxCgB,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,kCACNF,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,aACED,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAA,WACCmY,EAAM/Q,IAAI,SAACuE,EAAM9C,GAAP,OACT9I,EAAA5D,EAAA6D,cAAA,MAAI1D,IAAKuM,GACN8C,EACD5L,EAAA5D,EAAA6D,cAAA,YAAO2L,QAKf5L,EAAA5D,EAAA6D,cAAA,aACGjB,EAAYqI,IAAI,SAACzG,EAASkI,GAAV,OACf9I,EAAA5D,EAAA6D,cAACoY,GAAD,CAAmB9b,IAAKuM,EACtB6O,WAAYhB,EACZG,MAAOsB,EAAM3Y,OACbmB,QAASA,UCRA0X,8MAGZxZ,MAAQ,CACboY,QAAQ,EACRC,QAAQ,EACRC,WAAW,EACXC,UAAU,EACVC,QAAQ,EACRC,WAAY,GACZC,YAAa,MAILlV,UAAY,qBAGdiW,SAAW,8MACXC,YAAc,mDACdC,cAAgB,gGAChBC,YAAc,2BA0Cd/B,kBAAoB,WAC1B,OAAOlY,EAAKK,MAAM0Y,YAAY/X,OAAS,GAClChB,EAAKK,MAAMwY,QACX7Y,EAAKK,MAAMuY,YAGVnE,cAAgB,SAAClU,GACvB,IAAI+P,EAAW/P,EAGf,OAFA+P,EAAWtQ,EAAKka,aAAa5J,EAAUtQ,EAAKK,MAAMyY,YAClD9Y,EAAKma,wBAAwB7J,EAAUtQ,EAAKK,MAAM0Y,aAC3CzI,KAGD4J,aAAe,SAAC3Z,EAAyCuY,GAC/D,IAAIsB,EACJ,GAAItB,EACF,IACEsB,EAAe,IAAIC,OAAOvB,EAAY,KACtC,MAAAwB,IAKJ,OAAO/Z,EACJwH,OAAO,SAAA5F,GAAO,OAAInC,EAAKK,MAAMoY,SAAUzY,EAAKua,YAAYpY,EAASnC,EAAK8Z,YACtE/R,OAAO,SAAA5F,GAAO,OAAInC,EAAKK,MAAMqY,QAAS1Y,EAAKua,YAAYpY,EAASnC,EAAK+Z,eACrEhS,OAAO,SAAA5F,GAAO,OAAInC,EAAKK,MAAMsY,YAAa3Y,EAAKua,YAAYpY,EAASnC,EAAK+Z,eACzEhS,OAAO,SAAA5F,GAAO,OAAIiY,GAAepa,EAAKua,YAAYpY,EAASiY,QAYxDD,wBAA0B,SAAC5Z,EAAyCwH,GAC1E/H,EAAKwa,gBAAgBja,GAErB,IAAMka,EAAUza,EAAK0a,qBAAqB3S,GACnB,IAAnB0S,EAAQzZ,QAIZT,EAAYyB,QAAQ,SAACG,GACnBA,EAAQH,QAAQ,SAAAI,GAAM,OAAIpC,EAAK2a,wBAAwBvY,EAAQqY,UAI3DD,gBAAkB,SAACja,GACzBA,EAAYyB,QAAQ,SAACG,GACnBA,EAAQH,QAAQ,SAACI,GACfA,EAAOsD,gBAAiB,SAKtBgV,qBAAuB,SAACE,GAC9B,IAAMH,EAAoB,GAE1B,GAAIG,EACF,IACE,IAAMR,EAAe,IAAIC,OAAOO,EAAoB,KACpDH,EAAQvZ,KAAKkZ,GACb,MAAAS,IAYJ,OAPI7a,EAAKK,MAAMwY,QACb4B,EAAQvZ,KAAKlB,EAAKia,aAEhBja,EAAKK,MAAMuY,UACb6B,EAAQvZ,KAAKlB,EAAKga,eAGbS,KAGDE,wBAA0B,SAACvY,EAAgBqY,GAAsB,IAAAzX,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IACvE,QAAAgF,EAAAC,EAAqBqX,EAArBpX,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAA8B,KAAnB+E,EAAmB5E,EAAA7B,MAC5B,IAAKtB,EAAK8a,wBAAwB1Y,EAAQ2F,GACxC,QAHmE,MAAArE,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAMvEd,EAAOsD,gBAAiB,KAGlBoV,wBAA0B,SAAC1Y,EAAgB2F,GAAmB,IAAA0I,GAAA,EAAAC,GAAA,EAAAC,OAAAxS,EAAA,IACpE,QAAAyS,EAAAC,EAAmBzO,EAAOqD,WAA1BpC,OAAAC,cAAAmN,GAAAG,EAAAC,EAAA3S,QAAAqF,MAAAkN,GAAA,EAAsC,KAA3BqB,EAA2BlB,EAAAtP,MACpC,GAAIyG,EAAOgT,KAAKjJ,GACd,OAAO,GAHyD,MAAApO,GAAAgN,GAAA,EAAAC,EAAAjN,EAAA,YAAA+M,GAAA,MAAAI,EAAAlN,QAAAkN,EAAAlN,SAAA,WAAA+M,EAAA,MAAAC,GAMpE,OAAO,2EAvIP,IAAMgE,EAAiB9S,EAAmBpD,KAAKsB,MAAMQ,aAC/Cya,EAAgBvc,KAAKgW,cAAcE,GACnCgF,EAAQlb,KAAKsB,MAAMQ,YAAYqI,IAAI,SAAAgD,GAAI,OAAIsB,GAAWvH,iBAAiBiG,KACvEsM,EAAoBzZ,KAAKyZ,oBAE/B,OACE3W,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,aACNF,EAAA5D,EAAA6D,cAACyZ,GAAD,CACExC,OAAQha,KAAK4B,MAAMoY,OACnBC,OAAQja,KAAK4B,MAAMqY,OACnBC,UAAWla,KAAK4B,MAAMsY,UACtBC,SAAUna,KAAK4B,MAAMuY,SACrBC,OAAQpa,KAAK4B,MAAMwY,OACnBC,WAAYra,KAAK4B,MAAMyY,WACvBC,YAAata,KAAK4B,MAAM0Y,YACxBlJ,eAAgBpR,KAAKqF,mBACrBkV,eAAgBva,KAAK8F,qBAGvBhD,EAAA5D,EAAA6D,cAAC0Z,GAAD,CACEhD,kBAAmBA,EACnBC,cAAexD,EAAe3T,OAC9BT,YAAaya,IAGfzZ,EAAA5D,EAAA6D,cAAC2Z,GAAD,MACE1c,KAAKsB,MAAMQ,YAAYoL,KAAK,SAAAC,GAAI,OAAIA,EAAKzJ,QAAQnB,OAAS,IAExDO,EAAA5D,EAAA6D,cAAC4Z,GAAD,CACAzB,MAAOA,EACPzB,kBAAmBA,EACnB3X,YAAaya,IAJbzZ,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAAQ6N,EAAoBlV,wDAyCjDxC,EAA8BkZ,GAAwB,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAArd,EAAA,IACxE,QAAAsd,EAAAC,EAAqBvZ,EAArBkB,OAAAC,cAAAgY,GAAAG,EAAAC,EAAAxd,QAAAqF,MAAA+X,GAAA,EAA8B,KAAnBlZ,EAAmBqZ,EAAAna,MAC5B,GAAI+Z,EAAMN,KAAK3Y,EAAO,GAAGhF,MACvB,OAAO,GAH6D,MAAAsG,GAAA6X,GAAA,EAAAC,EAAA9X,EAAA,YAAA4X,GAAA,MAAAI,EAAA/X,QAAA+X,EAAA/X,SAAA,WAAA4X,EAAA,MAAAC,GAMxE,OAAO,SAlGsC5X,GC8BlC+X,8MA/BNtb,MAAe,CACpBub,gBAAgB,KAyBVC,iBAAmB,WACzB7b,EAAKmB,SAAS,SAAAqI,GAAS,MAAK,CAAEoS,gBAAiBpS,EAAUoS,2FAtBzD,OACEra,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,aACNF,EAAA5D,EAAA6D,cAACsa,GAAD,CAAYtU,KAAM/I,KAAK4B,MAAMub,iBAE7Bra,EAAA5D,EAAA6D,cAACua,GAAD,CAAWvU,KAAM/I,KAAK4B,MAAMub,eAAgB/R,QAASpL,KAAKod,mBAE1Dta,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,WACNF,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,KACEza,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,iBAAiBC,UAAWC,EAAK7E,MACnDhW,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,uBAAuBC,UAAWC,EAAK7Q,KACzDhK,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,wBAAwBC,UAAWC,EAAK7I,MAC1DhS,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,uBAAuBC,UAAWC,EAAK5H,MACzDjT,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,0BAA0BC,UAAWC,EAAKvC,MAC5DtY,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,kBAAkBC,UAAWC,EAAKrM,MACpDxO,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOG,UAAWC,EAAK5K,gBArBX7P,IAAM6C,yBCdT6X,GAOnB,SAAAA,EAAYC,GAAmB,IAAAtc,EAAAvB,KAAAjB,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAA4d,GAAA5d,KANxB2O,sBAMwB,EAAA3O,KALxBoN,kBAKwB,EAAApN,KAJxB4O,iBAIwB,EAAA5O,KAHxB8d,qBAGwB,EAAA9d,KAFvByG,WAEuB,EAAAzG,KASxB8O,SAAW,WAChB,OAAOvN,EAAKkF,OARZ,IAAMsI,EAAQlJ,SAASgY,EAAU7O,UAAU,EAAG,GAAI,IAC5CC,EAAUpJ,SAASgY,EAAU7O,UAAU,EAAG,GAAI,IAC9CE,EAAUrJ,SAASgY,EAAU7O,UAAU,GAAI,IAEjDhP,KAAKyG,MAAgB,KAARsI,EAA4B,IAAVE,EAA4B,IAAVC,GCjBhC6O,yCACZzG,sBACAD,wBACAD,uBCHY4G,yCACZC,wBACA5F,uBACAD,uBACA8F,sBACArF,qBACAD,iBCNYuF,yCACZnb,eACA2D,qBACAC,mBCHF,SAASwX,GAASC,EAAiBC,GACxC,IAAMC,EAAoCF,EAAQG,KAAKF,GAAO,IAC9D,OAAOC,EAAYA,EAAU,GAAK,GAG7B,SAASE,GAAoBJ,EAAiBC,GACnD,IAAMC,EAAoCF,EAAQG,KAAKF,GAAO,IAC9D,OAAoB,MAAbC,EAAoBA,EAAUtS,MAAM,GAAK,GAI3C,SAASyS,GAAmBL,EAAiBC,GAIlD,IAHA,IAAMK,EAAoB,GAEtBJ,EAAoCF,EAAQG,KAAKF,GAAO,IACxC,MAAbC,GACLI,EAAQlc,KAAK8b,EAAU,IACvBA,EAAYF,EAAQG,KAAKF,GAAO,IAGlC,OAAOK,ECdF,IAAMC,GAAsC,sCAC7CC,GAAgC,oDAChCC,GAAoC,qBACpCC,GAA+B,wBAC/BC,GAA8B,oBAC9BC,GAA8B,oBAC9BC,GAAyB,cAIVC,8GAESC,EAAiBC,GAC3C,IAAM1Y,EAAqB,IAAIiX,GAASQ,GAASQ,GAA6BQ,EAAM,KAGpFzY,EAASyG,aAAe+R,EAAeG,kBAAkBF,EAAMG,SAG/D5Y,EAASgI,iBAAmBwQ,EAAeK,sBAAsBJ,EAAMG,SAGvEH,EAAMG,QAIN5Y,EAASiI,YAAcuQ,EAAeM,iBAAiBL,EAAMG,QAASH,EAAMG,SAQ5E5Y,EAASmX,gBAAkBqB,EAAeO,qBAAqBN,GAE/DC,EAAS1Y,6CAGsB0M,GAC/B,IAAMsL,EAAoBF,GAAoBI,GAAuBxL,GAErE,GAAuB,IAAnBsL,EAAQpc,OAEV,OADAuR,QAAQC,MAAR,4CAAA9I,OAA0DoI,IACnD,KAGT,IAAMjG,EAAe,IAAI2Q,GAIzB,OAHA3Q,EAAakK,UAAYqI,WAAWhB,EAAQ,IAC5CvR,EAAaiK,YAAcsI,WAAWhB,EAAQ,IAC9CvR,EAAagK,eAAiBuI,WAAWhB,EAAQ,IAC1CvR,gDAG4BiG,GACnC,OAAOxN,SAASuY,GAASU,GAA2BzL,GAAO,6CAG7BuM,EAAgBC,GAC9C,IAAMjR,EAA2B,IAAIoP,GAUrC,OARApP,EAAYqP,YAAcpY,SAASuY,GAASW,GAAsBa,GAAQ,IAC1EhR,EAAYyJ,WAAaxS,SAASuY,GAASY,GAAqBY,GAAQ,IACxEhR,EAAYwJ,WAAavS,SAASuY,GAASa,GAAqBW,GAAQ,IAExEhR,EAAYsP,UAAYrY,SAASuY,GAASW,GAAsBc,GAAQ,IACxEjR,EAAYiK,SAAWhT,SAASuY,GAASY,GAAqBa,GAAQ,IACtEjR,EAAYgK,SAAW/S,SAASuY,GAASa,GAAqBY,GAAQ,IAE/DjR,+CAG2BwQ,GAGlC,IAFA,IAAMtB,EAAoC,GAEjCnS,EAAI,EAAGA,EAAIyT,EAAM7c,OAAQoJ,IAAK,CACrC,IAAM0H,EAAe+L,EAAMzT,GAC3B,GAAK0H,EAAL,CAEA,IAAMyM,EAAoBpB,GAAmBQ,GAAgB7L,GAC7D,GAAIyM,EAAQvd,OAAS,GACnBuR,QAAQC,MAAR,oDAAA9I,OAAkEoI,QADpE,CAKA,IAAM0M,EAAiC,IAAI5B,GAC3C4B,EAAe/c,GAAK6C,SAASia,EAAQ,GAAI,IACzCC,EAAepZ,SAAWgZ,WAAWG,EAAQ,IAC7CC,EAAenZ,WAAakZ,EAAQ,IACpChC,EAAgBrb,KAAKsd,KAGvB,OAAOjC,WChGUkC,yCACZhd,eACA6E,sBACA0C,MAAuB,UACvB+E,QAAoB,ICGhB2Q,GAAmC,+DAC1CC,GAAuB,aACvBC,GAAsB,qBACtBC,GAAsB,qBACtBC,GAAwB,cACxBC,GAA+B,mCAC/BC,GAAyC,yCACzCC,GAA+C,oCAC/CC,GAA4B,aAC5BC,GAA4B,kCAC5BC,GAAiC,mCAKlBC,gHAEWxB,EAAiBC,GAC7C,IAAM7b,EAAa,IAAIiL,GAAW2P,GAAS6B,GAA0Bb,EAAMG,UAC3EH,EAAM7b,QAAQ,SAAA8P,GAAI,OAAIuN,EAAiBC,UAAUxN,EAAM7P,KACvDod,EAAiBE,+BAA+Btd,EAAWE,SAE3D2b,EAAS7b,qCAKc6P,EAAc7P,GACjC6P,EAAK0N,WA/BwB,KAgC/BH,EAAiBI,kBAAkB3N,EAAM7P,GAChC6P,GACTuN,EAAiBK,eAAe5N,EAAM7P,6CAIT0d,EAAgB1d,GAC/C,IAAM7E,EAAOyf,GAAS8B,GAAcgB,GAAQC,OAGtCC,EAAMvb,SAASuY,GAAS+B,GAAae,GAAS,IAC9CG,EAAMxb,SAASuY,GAASgC,GAAac,GAAS,IAC9Cle,EAAa,IAARoe,EAAYA,EAAMC,EAE7BT,EAAiB1S,cAAgB,IAAI1H,EAAOxD,EAAIrE,EAAM6E,EAAWsL,YACjEtL,EAAWE,QAAQjB,KAAKme,EAAiB1S,sDAGbmF,EAAc7P,GAC1C,GAAKod,EAAiB1S,cAAtB,CAIA,IAAMoT,EAAgBlD,GAASiC,GAAehN,GAC9C,GAAIiO,EACFV,EAAiB1S,cAAclH,WAAWvE,KAAK6e,OADjD,CAKA,IAAMC,EAAsBnD,GAASkC,GAAsBjN,GAC3D,GAAIkO,EACFX,EAAiB1S,cAAcxH,OAASka,EAAiBY,qBAAqBD,OADhF,CAKA,IAAME,EAAwBhD,GAAoB8B,GAAgClN,GAClF,GAAIoO,GAA0D,IAAjCA,EAAsBlf,OAAc,CAC/D,IAAMX,EAAgB6f,EAAsB,GACtCxN,EAAiBwN,EAAsB,GACvC5Z,EAAoB4Z,EAAsB,GAEhD,OAAQ7f,GACN,IAAK,aACL,IAAK,sBACL,IAAK,kBACH,IAAIwI,EAAawW,EAAiBc,gBAAgBle,EAAWqL,MAAOoF,EAAQpM,GAG5E,OAFAuC,EAAKkF,QAAQ7M,KAAKme,EAAiB1S,oBACnC0S,EAAiB1S,cAAcrH,eAAiBuD,GAGlD,IAAK,SACH,GAAIwW,EAAiB1S,cAAcrH,gBAC9B+Z,EAAiB1S,cAAcrH,eAAe7D,KAAOiR,EAExD,OAMF,OAJA7J,EAAOwW,EAAiBc,gBAAgBle,EAAWqL,MAAOoF,EAAQpM,IAC7D0C,MAAQqW,EAAiB1S,cAC9B0S,EAAiB1S,cAAcpH,UAAUrE,KAAK2H,QAC9CwW,EAAiB1S,cAAcnH,mBAAmBtE,KAAK2H,GAGzD,IAAK,aAEH,OAEF,QAEE,YADA0J,QAAQ6N,KAAR,mCAAA1W,OAAgDoI,KAKtD,IAAMuO,EAAqBnD,GAAoBiC,GAAmBrN,GAClE,GAAIuO,GAAgC,IAApBA,EAASrf,OAAc,CACrC,IAAM0R,EAAiB2N,EAAS,GAC1B/Z,EAAoB+Z,EAAS,GAE7BxX,EAAawW,EAAiBc,gBAAgBle,EAAWqL,MAAOoF,EAAQpM,GAG9E,OAFAuC,EAAKG,MAAQqW,EAAiB1S,mBAC9B0S,EAAiB1S,cAAcpH,UAAUrE,KAAK2H,GAK5CgU,GAASoC,GAAsCnN,IAC9C+K,GAASqC,GAAmBpN,IAC5B+K,GAASuC,GAAwBtN,IAItCS,QAAQ6N,KAAR,yBAAA1W,OAAsCoI,8DAGM3P,GAG5C,IAAMme,EAAgB,CAACxb,EAAayb,QAASzb,EAAa0b,cAAe1b,EAAa2b,SAEtFte,EACG4F,OAAO,SAAA3F,GAAM,OAAKA,EAAOkD,iBACzByC,OAAO,SAAA3F,GAAM,YAAsBjE,IAAlBiE,EAAO+C,QAAwBmb,EAAc5O,SAAStP,EAAO+C,UAC9EnD,QAAQ,SAACI,GACR,IAAMyG,EAAazG,EAAOoD,mBAAmB,GACxCqD,IAILA,EAAKG,MAAQ,KACbH,EAAKkF,QAAQ7M,KAAKkB,GAElBA,EAAOkD,eAAiBuD,EACxBzG,EAAOmD,UAAUmb,OAAOte,EAAOmD,UAAUob,QAAQ9X,GAAO,GACxDzG,EAAOoD,mBAAmBkb,OAAOte,EAAOoD,mBAAmBmb,QAAQ9X,GAAO,mDAI5C1D,GAClC,IACMyb,EAAe9b,EADTK,GAEZ,OAAIyb,IAIAzb,EAAOqa,WAAW,WACb1a,EAAayb,QAElBpb,EAAOqa,WAAW,WACb1a,EAAa2b,QAElBtb,EAAOqa,WAAW,iBACb1a,EAAa0b,cAGf1b,EAAasU,iDAGS9L,EAAe7L,EAAY6E,GAAyB,IAAAtD,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IACjF,QAAAgF,EAAAC,EAA2BkK,EAA3BjK,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAAkC,KAAvB6d,EAAuB1d,EAAA7B,MAChC,GAAIuf,EAAapf,KAAOA,EACtB,OAAOof,GAHsE,MAAAnd,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,GAOjF,IAAM4d,EAAgB,IAAIrC,GAK1B,OAJAqC,EAAQrf,GAAKA,EACbqf,EAAQxa,UAAYA,EAEpBgH,EAAMpM,KAAK4f,GACJA,WAlKUzB,GAUJ1S,qBC3BjB,IAEqBoU,cAOnB,SAAAA,EAAYC,GAAoD,IAAAhhB,EAAAvB,KAAAjB,OAAAyC,EAAA,EAAAzC,CAAAiB,KAAAsiB,GAAAtiB,KANxDwiB,UAAwB,GAMgCxiB,KALxD8B,YAA4B,GAK4B9B,KAHxDyiB,aAAuB,EAGiCziB,KAFxDuiB,mBAEwD,EAAAviB,KAIzD0iB,WAAa,SAACC,GACnBphB,EAAKihB,UAAY,GACjBjhB,EAAKO,YAAc,GACnBP,EAAKkhB,aAAe,EAEpBlhB,EAAKN,MAAM0hB,IATmD3iB,KA0ExD4iB,iBAAmB,SAACjc,GAC1BpF,EAAKihB,UAAU/f,KAAKkE,GACpBpF,EAAKkhB,aAAelhB,EAAKkhB,aAAe,EACxClhB,EAAKshB,mBA7EyD7iB,KAgFxD8iB,mBAAqB,SAACtf,GACxBA,EAAWE,QAAQnB,OAAS,GAC9BhB,EAAKO,YAAYW,KAAKe,GAExBjC,EAAKkhB,aAAelhB,EAAKkhB,aAAe,EACxClhB,EAAKshB,mBApFL7iB,KAAKuiB,cAAgBA,oDAWTQ,GAES,IAAjBA,EAAMxgB,QAAiBwgB,EAAM,GAAGpkB,KAAKsU,SAAS,OAGhDjT,KAAKgjB,mBAAmBD,GAFxB/iB,KAAKijB,gBAAgBF,EAAM,4CAMPG,GAAY,IAAA7Z,EAAArJ,KAC5BmjB,EAAS,IAAIC,WACnBD,EAAOE,OAAS,WAKd,IAJA,IAAMjE,EAAmB+D,EAAOG,OAAkBC,MAAM,MAEpDlQ,EAAO+L,EAAMG,QACbiE,EAAwB,QACZ9jB,IAAT2T,GAED+K,GAAS6B,GAA0B5M,IACrChK,EAAKoZ,eACL7B,GAAiB6C,gBAAgBD,EAAYvX,QAAS5C,EAAKyZ,oBAC3DU,EAAc,CAACnQ,IAEfmQ,EAAY/gB,KAAK4Q,GAGnBA,EAAO+L,EAAMG,QAGfqB,GAAiB6C,gBAAgBD,EAAana,EAAKyZ,qBAErD9iB,KAAKyiB,eACLU,EAAOO,WAAWR,8CAGOH,GAAe,IAAA3N,EAAApV,KACxCA,KAAKyiB,aAAeziB,KAAKyiB,aAAeM,EAAMxgB,OADN,IAAAgC,GAAA,EAAAC,GAAA,EAAAC,OAAA/E,EAAA,IAGxC,IAHwC,IAGxCgF,EAHwCif,EAAA,eAG7BT,EAH6Bxe,EAAA7B,MAIhCsgB,EAAS,IAAIC,WAEnBD,EAAOE,OAAS,WACd,IAAMjE,EAAmB+D,EAAOG,OAAkBC,MAAM,MAClDK,EAAYxE,EAAM,GAEnBwE,IAIDxF,GAASQ,GAA6BgF,GACxCzE,GAAe0E,cAAczE,EAAOhK,EAAKwN,kBAChCxE,GAAS6B,GAA0B2D,GAC5ChD,GAAiB6C,gBAAgBrE,EAAOhK,EAAK0N,oBAE7C1N,EAAKqN,aAAerN,EAAKqN,aAAe,IAI5CU,EAAOO,WAAWR,IApBpBve,EAAmBoe,EAAnBne,OAAAC,cAAAN,GAAAG,EAAAC,EAAAlF,QAAAqF,MAAAP,GAAA,EAA0Bof,IAHc,MAAA1e,GAAAT,GAAA,EAAAC,EAAAQ,EAAA,YAAAV,GAAA,MAAAI,EAAAO,QAAAP,EAAAO,SAAA,WAAAV,EAAA,MAAAC,8CA0CnCzE,KAAKyiB,eACRziB,KAAK8jB,gCACL9jB,KAAK+jB,kBACL/jB,KAAKuiB,cAAcviB,KAAK8B,sEAIY,IAAAkiB,EAAAhkB,KACtCA,KAAKwiB,UACFlZ,OAAO,SAAA3C,GAAQ,OAAIA,EAASmI,aAC5BvL,QAAQ,SAACoD,GACR,IAAMnD,EAAyBwgB,EAAKC,4BAA4Btd,GAChEqd,EAAKE,4BAA4B1gB,EAAYmD,+CAKjD3G,KAAK8B,YAAYoC,KAAK,SAACC,EAAIC,GACzB,OAAID,EAAG2K,aAAe1K,EAAG0K,WAChB,EAEJ3K,EAAG2K,WAGH1K,EAAG0K,WAGA3K,EAAG2K,WAAyB1K,EAAG0K,WAF9B,GAHC,wDASsBnI,GAClC,IACMwd,EAAgBxd,EAASmI,WAC3BsV,EAA6B,KAC7BC,EArIoC,IA6JxC,OAtBArkB,KAAK8B,YACFwH,OAAO,SAAA9F,GAAU,OAAIA,EAAWsL,aAChCvL,QAAQ,SAACC,GACR,IAAM8gB,EAAY9gB,EAAWsL,WAE7B,GAAKwV,GAAcH,EAAnB,CAIA,IAAMI,EAAOlW,KAAK0I,IAAKuN,EAdX,KAcmCH,EAdnC,MAgBRI,EAAOF,IACTA,EAAeE,EACfH,EAAU5gB,MAID,MAAX4gB,IACFA,EAAU,IAAI3V,GAAW,MACzBzO,KAAK8B,YAAYW,KAAK2hB,IAGjBA,sDAG2B5gB,EAAwBmD,GAA0B,IAAA6d,EAAAxkB,KACpFwD,EAAW4J,aAAezG,EAASyG,aACnC5J,EAAWmL,iBAAmBhI,EAASgI,iBACvCnL,EAAWoL,YAAcjI,EAASiI,YAElCjI,EAASmX,gBAAgBva,QAAQ,SAACkhB,GAChC,IAAM9gB,EAAS6gB,EAAKE,iBAAiBlhB,EAAYihB,EAAIzhB,IAEjDW,IACFA,EAAOgD,SAAW8d,EAAI9d,SACtBhD,EAAOiD,WAAa6d,EAAI7d,uDAKLpD,EAAwBR,GAA2B,IAAAgP,GAAA,EAAAC,GAAA,EAAAC,OAAAxS,EAAA,IAC1E,QAAAyS,EAAAC,EAAqB5O,EAAWE,QAAhCkB,OAAAC,cAAAmN,GAAAG,EAAAC,EAAA3S,QAAAqF,MAAAkN,GAAA,EAAyC,KAA9BrO,EAA8BwO,EAAAtP,MACvC,GAAIc,EAAOX,KAAOA,EAChB,OAAOW,GAH+D,MAAAsB,GAAAgN,GAAA,EAAAC,EAAAjN,EAAA,YAAA+M,GAAA,MAAAI,EAAAlN,QAAAkN,EAAAlN,SAAA,WAAA+M,EAAA,MAAAC,GAM1E,OAAO,cClLLtC,GAAkB,SAACtK,GAEvBA,EAAMsK,mBA6BO+U,GA1BkB,kBAC/B7hB,EAAA5D,EAAA6D,cAAA,OAAKC,GAAG,iBAAiBoI,QAASwE,IAChC9M,EAAA5D,EAAA6D,cAAA,MAAIuK,wBAAyB,CAAEC,OAZpB,4FAaXzK,EAAA5D,EAAA6D,cAAA,oBACOD,EAAA5D,EAAA6D,cAAC6P,GAAD,CAAcJ,GAbA,gFAad,uBAKP1P,EAAA5D,EAAA6D,cAAA,KAAGuK,wBAAyB,CAAEC,OAjBf,mEAmBfzK,EAAA5D,EAAA6D,cAAA,MAAIC,GAAG,kBACLF,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAC6P,GAAD,CAAcJ,GtCrBoB,0CsCqBlC,kBAIF1P,EAAA5D,EAAA6D,cAAA,UACED,EAAA5D,EAAA6D,cAAC6P,GAAD,CAAcJ,GtCzBkB,mCsCyBhC,mBCxBFoS,sNACG7L,OAAS,kBACdjW,EAAA5D,EAAA6D,cAAC8hB,GAAA,EAAD,CAAUC,UAAU,EAAMC,OAAQxjB,EAAKwjB,QACpC,SAAAjmB,GAAA,IAAGkmB,EAAHlmB,EAAGkmB,aAAcC,EAAjBnmB,EAAiBmmB,cAAeC,EAAhCpmB,EAAgComB,aAAhC,OACCpiB,EAAA5D,EAAA6D,cAAA,MAAAhE,OAAAkE,OAAA,CAAKD,GAAG,YAAegiB,KACrBliB,EAAA5D,EAAA6D,cAAA,QAAWkiB,KAETC,EACEpiB,EAAA5D,EAAA6D,cAAA,gCACAD,EAAA5D,EAAA6D,cAAA,sEAEJD,EAAA5D,EAAA6D,cAACoiB,GAAD,YAMAJ,OAAS,SAAChC,GACD,IAAIT,GAAO/gB,EAAK6jB,UACxB1C,WAAWK,MAGZqC,SAAW,SAACtjB,GAClB,IAAMzC,EAAMa,EAAe4B,GACvBA,EAAYoL,KAAK,SAAAC,GAAI,QAAMA,EAAKC,eAClC7L,EAAKD,MAAMkB,QAAQC,KAAnB,IAAAwI,OAA4B5L,EAA5B,cAEAkC,EAAKD,MAAMkB,QAAQC,KAAnB,IAAAwI,OAA4B5L,EAA5B,mDA3ByB6D,IAAM6C,gBAgCtB8M,eAAW+R,IC5BXS,GAP6B,kBAC1CviB,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,KACEza,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWkH,KACjC9hB,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOE,KAAK,QAAQC,UAAWR,elE0BA,WACjC,IAAMoI,GAAe,IAAIvkB,MAAOwkB,SAAQ,IAAIxkB,MAAOykB,UAAY,GAE/DhnB,EAAgBinB,QAAQ,SAAC/W,EAAMrP,GACzBqP,EAAO4W,IACT1mB,EAAmB8mB,WAAWrmB,GAC9Bb,EAAgBknB,WAAWrmB,MmElCjCsmB,GAEAnc,IAASuP,OACPjW,EAAA5D,EAAA6D,cAAC4P,EAAA,EAAD,KACE7P,EAAA5D,EAAA6D,cAACwa,EAAA,EAAD,CAAOG,UAAW2H,MAEpBpjB,SAASC,eAAe","file":"static/js/main.048d28d5.chunk.js","sourcesContent":["import { parse, stringify } from 'flatted';\nimport localforage from 'localforage';\nimport SparkMD5 from 'spark-md5';\nimport ThreadDump from '../types/ThreadDump';\n\nlet currentThreadDumps: ThreadDump[];\nconst lastUsedStorage = localforage.createInstance({ name: 'lastUsed' });\nconst threadDumpsStorage = localforage.createInstance({ name: 'threadDumps' });\n\n// Given a key, returns a promise that resolves to the stored thread dumps.\nexport const getThreadDumpsAsync = async (key: string): Promise<ThreadDump[]> => {\n  if (currentThreadDumps === undefined) {\n    return getFromStorage(key);\n  }\n\n  return currentThreadDumps;\n};\n\n// Stores thread dumps in persistent storage for subsequent page loads.\n// Returns a key that can be used to retrieve the thread dumps.\nexport const setThreadDumps = (parsedDumps: ThreadDump[]): string => {\n  currentThreadDumps = parsedDumps;\n  const stringified = stringify(currentThreadDumps);\n  const key = SparkMD5.hash(stringified);\n  threadDumpsStorage.setItem(key, stringified);\n  return key;\n};\n\n// Clears currently held thread dump.\n// Does not modify data storage.\nexport const clearCurrentThreadDump = (): void => {\n  currentThreadDumps = [];\n};\n\n// Clears all persisted thread dumps not used in the last 7 days.\nexport const clearOldThreadDumps = (): void => {\n  const sevenDaysAgo = new Date().setDate(new Date().getDate() - 7);\n\n  lastUsedStorage.iterate((date, key) => {\n    if (date < sevenDaysAgo) {\n      threadDumpsStorage.removeItem(key);\n      lastUsedStorage.removeItem(key);\n    }\n  });\n};\n\nasync function getFromStorage(key: string) {\n  const fromStorage = await threadDumpsStorage.getItem<string>(key);\n\n  // update the \"Last used\" date if the key exists\n  if (fromStorage) {\n    lastUsedStorage.setItem(key, new Date().valueOf());\n  }\n\n  currentThreadDumps = fromStorage ? parse(fromStorage) : [];\n  return currentThreadDumps;\n}\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ThreadDump from '../types/ThreadDump';\nimport { getThreadDumpsAsync } from './threadDumpsStorageService';\n\nexport type WithThreadDumpsProps = RouteComponentProps<any> & {\n  threadDumps: ThreadDump[];\n};\n\ntype State = {\n  promisePending: boolean;\n  threadDumps: ThreadDump[];\n};\n\nexport const withThreadDumps =\n  <P extends WithThreadDumpsProps>(WrappedComponent: React.ComponentType<P>) => {\n    class WithThreadDumps extends React.Component<P, State> {\n      public state: State = {\n        promisePending: true,\n        threadDumps: [],\n      };\n\n      constructor(props: P) {\n        super(props);\n\n        const key: string = props.match.params.key;\n        const threadDumpsPromise = getThreadDumpsAsync(key);\n\n        threadDumpsPromise\n          .then((threadDumps) => {\n            if (threadDumps.length === 0) {\n              props.history.push('/');\n            }\n            return threadDumps;\n          })\n          .then((threadDumps) => {\n            this.setState({ threadDumps, promisePending: false });\n          });\n      }\n\n      public componentDidMount() {\n        this.scrollToTop();\n      }\n\n      public render() {\n        if (this.state.promisePending) {\n          return <h4 id=\"centered\">Loading data from cache...</h4>;\n        }\n\n        return <WrappedComponent threadDumps={this.state.threadDumps} {...this.props} />;\n      }\n\n      private scrollToTop = () => {\n        const contentDiv = document.getElementById('content');\n        if (contentDiv) {\n          contentDiv.scrollTop = 0;\n        }\n      }\n    }\n\n    return WithThreadDumps;\n  };\n","import Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\n\nexport default function getThreadsOverTime(threadDumps: ThreadDump[]): Array<Map<number, Thread>> {\n  const threadsOverTime = new Map<number, Map<number, Thread>>();\n\n  threadDumps.forEach((threadDump, dumpNumber) => {\n    threadDump.threads.forEach((thread) => {\n      let threadOccurences = threadsOverTime.get(thread.id);\n      if (!threadOccurences) {\n        threadOccurences = new Map<number, Thread>();\n      }\n\n      threadOccurences.set(dumpNumber, thread);\n      threadsOverTime.set(thread.id, threadOccurences);\n    });\n  });\n\n  return Array.from(threadsOverTime.values())\n    .sort((t1, t2) => getThreadName(t1).localeCompare(getThreadName(t2)));\n}\n\nconst getThreadName = (threads: Map<number, Thread>): string => {\n  for (const [, thread] of threads) {\n    if (thread) {\n      return thread.name;\n    }\n  }\n  return '';\n};\n","import React, { ComponentState } from 'react';\nimport { WithThreadDumpsProps } from '../../common/withThreadDumps';\n\nexport default class PageWithSettings<S> extends React.PureComponent<WithThreadDumpsProps, S> {\n  // tslint:disable:max-line-length\n  protected static NO_CPU_INFOS = 'You need to load the <i>cpu_info</i> files to see this data.';\n  protected static NO_CPU_AND_THREADS_PAIR = 'You need to load matching <i>cpu_info</i> and <i>jira_threads</i> files to see this data.';\n  protected static NO_THREAD_DUMPS = 'You need to load the <i>thread_dump</i> files to see this data.';\n\n  protected static N0_THREADS_MATCHING = 'No threads match the selected criteria.';\n  protected static N0_MONITORS_MATCHING = 'No monitors match the selected criteria.';\n  // tslint:enable:max-line-length\n\n  protected PAGE_NAME = 'Unknown Page';\n\n  public render(): JSX.Element | null {\n    return null;\n  }\n\n  protected handleFilterChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const isChecked: boolean = event.target.checked;\n    const newState: ComponentState = { [name]: isChecked };\n    this.setState(newState);\n  }\n\n  protected handleIntegerChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const value: number = parseInt(event.target.value ? event.target.value : '0', 10);\n    const newState: ComponentState = { [name]: value > 0 ? value : 0 };\n    this.setState(newState);\n  }\n\n  protected handleRegExpChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const value: string = event.target.value;\n    const newState: ComponentState = { [name]: value };\n    this.setState(newState);\n  }\n}\n","enum ThreadStatus {\n  RUNNABLE = 'runnable',\n  BLOCKED = 'blocked',\n  WAITING = 'waiting',\n  TIMED_WAITING = 'timed-waiting',\n  UNKNOWN = 'unknown',\n}\n\nexport default ThreadStatus;\n","import Thread from '../../types/Thread';\n\nexport default class CpuConsumer {\n  public calculatedValue: number;\n  public threadOccurences: Map<number, Thread>;\n\n  constructor(calculatedValue: number, threadOccurences: Map<number, Thread>) {\n    this.calculatedValue = calculatedValue;\n    this.threadOccurences = threadOccurences;\n  }\n}\n","import Lock from './Lock';\nimport ThreadStatus from './ThreadStatus';\n\nexport default class Thread {\n  public static getFormattedTime = (thread: Thread): string => {\n    return thread.epoch ? new Date(thread.epoch).toLocaleTimeString() : '';\n  }\n\n  public id: number;\n  public name: string;\n  public status: ThreadStatus | undefined;\n  public cpuUsage: number = 0.0;\n  public runningFor!: string;\n  public lockWaitingFor: Lock | null = null;\n  public locksHeld: Lock[] = [];\n  public classicalLocksHeld: Lock[] = [];\n  public stackTrace: string[] = [];\n  public matchingFilter: boolean = false;\n  private epoch: number | null;\n\n  constructor(id: number, name: string, epoch: number | null) {\n    this.id = id;\n    this.name = name;\n    this.epoch = epoch;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\ntype Props = {\n  windowTitle: string;\n  className: string;\n  onUnload: () => void;\n};\n\nexport default class WindowPortal extends React.PureComponent<Props> {\n  private static windows: Array<Window | null> = [];\n  private externalWindow: Window | null;\n  private container: HTMLElement;\n\n  private windowFeatures =\n    'width=960,height=530,titlebar=0,menubar=0,location=0,toolbar=0,status=0';\n\n  constructor(props: Props) {\n    super(props);\n\n    this.externalWindow = null;\n    this.container = document.createElement('div');\n    if (this.props.className) {\n      this.container.className = this.props.className;\n    }\n  }\n\n  public copyStyles(sourceDoc: Document, targetDoc: Document) {\n    Array.from(sourceDoc.styleSheets).forEach((sheet) => {\n      const styleSheet = sheet as CSSStyleSheet;\n\n      if (styleSheet.cssRules) { // for <style> elements\n        const newStyleEl = sourceDoc.createElement('style');\n\n        Array.from(styleSheet.cssRules).forEach((cssRule) => {\n          newStyleEl.appendChild(sourceDoc.createTextNode(cssRule.cssText));\n        });\n\n        targetDoc.head.appendChild(newStyleEl);\n      } else if (styleSheet.href) { // for <link> elements\n        const newLinkEl = sourceDoc.createElement('link');\n\n        newLinkEl.rel = 'stylesheet';\n        newLinkEl.href = styleSheet.href;\n        targetDoc.head.appendChild(newLinkEl);\n      }\n    });\n  }\n\n  public componentDidMount() {\n    window.onunload = this.closeAllExternalWindows;\n\n    this.externalWindow = window.open('', '', this.windowFeatures);\n    if (this.externalWindow) {\n      WindowPortal.windows.push(this.externalWindow);\n      this.externalWindow.document.title = this.props.windowTitle;\n      this.externalWindow.document.body.appendChild(this.container);\n      this.copyStyles(document, this.externalWindow.document);\n      this.externalWindow.onunload = this.props.onUnload;\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.externalWindow && !this.externalWindow.closed) {\n      this.externalWindow.close();\n    }\n    WindowPortal.windows = WindowPortal.windows.filter(ext => ext !== this.externalWindow);\n  }\n\n  public render() {\n    return ReactDOM.createPortal(this.props.children, this.container);\n  }\n\n  private closeAllExternalWindows = () => {\n    for (const external of WindowPortal.windows) {\n      if (external && !external.closed) {\n        external.close();\n      }\n    }\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadStatus from '../../types/ThreadStatus';\nimport './ThreadDetailsWindow.css';\nimport WindowPortal from './WindowPortal';\n\ntype Props = {\n  thread: Thread;\n  onUnload: () => void;\n};\n\nconst ThreadDetailsWindow: React.SFC<Props> = ({ thread, onUnload }) => (\n  <WindowPortal windowTitle={thread.name} className=\"thread-details\" onUnload={onUnload}>\n    {renderName(thread)}\n    {renderStatus(thread)}\n    {renderLockWaitingFor(thread)}\n    {renderLocksHeld(thread)}\n    {renderStackTrace(thread)}\n  </WindowPortal>\n);\n\nconst renderName = (thread: Thread) => {\n  return (\n    <h3>{Thread.getFormattedTime(thread)} <i>{thread.name}</i></h3>\n  );\n};\n\nconst renderStatus = (thread: Thread) => {\n  if (thread.status === undefined) {\n    return null;\n  }\n\n  return (\n    <span>\n      <b>\n        {thread.status.toLocaleUpperCase()}\n        {thread.status === ThreadStatus.RUNNABLE &&\n          <> ({thread.cpuUsage.toFixed(1)}% CPU usage)</>}\n      </b>\n      , running for: {thread.runningFor}\n    </span>\n  );\n};\n\nconst renderLocksHeld = (thread: Thread) => {\n  return (\n    thread.locksHeld.length > 0 &&\n    <span><b>Locks held:</b> [{thread.locksHeld.map(lock => lock.id).join(', ')}]</span>\n  );\n};\n\nconst renderLockWaitingFor = (thread: Thread) => {\n  return (\n    thread.lockWaitingFor &&\n    <span>\n      <b>Waiting for notification on lock:</b> [{thread.lockWaitingFor.id}]\n        {thread.lockWaitingFor.owner\n        ? <> owned by <i>{thread.lockWaitingFor.owner.name}</i></>\n        : <> without an owner</>}\n    </span>\n  );\n};\n\nconst renderStackTrace = (thread: Thread) => {\n  return (\n    <textarea\n      wrap=\"off\"\n      readOnly={true}\n      className=\"mono stacktrace-window\"\n      value={thread.stackTrace.join('\\n')} />\n  );\n};\n\nexport default ThreadDetailsWindow;\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport Thread from '../../types/Thread';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumersList from './CpuConsumersList';\nimport './CpuConsumersPage.css';\nimport CpuConsumersSettings from './CpuConsumersSettings';\n\nexport enum CpuConsumersMode {\n  Mean,\n  Median,\n  Max,\n}\n\ntype State = {\n  mode: CpuConsumersMode;\n  limit: number;\n};\n\nexport default class CpuConsumersPage extends PageWithSettings<State> {\n\n  public state: State = {\n    limit: 100,\n    mode: CpuConsumersMode.Mean,\n  };\n\n  protected PAGE_NAME = 'CPU Consumers';\n\n  public render() {\n    const consumers = this.calculateCpuUsages(this.state.mode);\n\n    return (\n      <div id=\"page\">\n        <CpuConsumersSettings\n          mode={this.state.mode}\n          limit={this.state.limit}\n          onModeChange={this.handleModeChange}\n          onLimitChange={this.handleIntegerChange}\n        />\n\n        {!this.props.threadDumps.some(dump => !!dump.loadAverages && dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: CpuConsumersPage.NO_CPU_AND_THREADS_PAIR }} />\n          : <CpuConsumersList\n            limit={this.state.limit}\n            dumpsNumber={this.props.threadDumps.length}\n            consumers={consumers}\n          />\n        }\n      </div>\n    );\n  }\n\n  private handleModeChange = (mode: number): React.ChangeEventHandler<HTMLInputElement> => () => {\n    this.setState({ mode: mode as CpuConsumersMode });\n  }\n\n  private calculateCpuUsages(calculationMode: CpuConsumersMode): CpuConsumer[] {\n    const consumers: CpuConsumer[] = [];\n    const threadsOverTime = getThreadsOverTime(this.props.threadDumps);\n\n    for (const threads of threadsOverTime) {\n      consumers.push(this.calculateUsageFor(threads, calculationMode));\n    }\n    consumers.sort((a, b) => b.calculatedValue - a.calculatedValue);\n\n    return consumers;\n  }\n\n  private calculateUsageFor(threadsMap: Map<number, Thread>, calculationMode: CpuConsumersMode) {\n    const threads = Array.from(threadsMap.values());\n\n    let usage: number = 0;\n    switch (calculationMode) {\n      case CpuConsumersMode.Mean:\n        usage = threads.reduce(this.reduceSum, 0) / this.props.threadDumps.length;\n        break;\n      case CpuConsumersMode.Median:\n        usage = this.calculateMedian(threads);\n        break;\n      case CpuConsumersMode.Max:\n        usage = threads.reduce(this.reduceMax, 0);\n        break;\n    }\n\n    return new CpuConsumer(usage, threadsMap);\n  }\n\n  private reduceSum(sum: number, currentThread: Thread): number {\n    return sum + currentThread.cpuUsage;\n  }\n\n  private reduceMax(maxValue: number, currentThread: Thread): number {\n    return (currentThread.cpuUsage > maxValue) ? currentThread.cpuUsage : maxValue;\n  }\n\n  private calculateMedian(threads: Thread[]): number {\n    const values = threads.slice();\n    values.sort((a, b) => a.cpuUsage - b.cpuUsage);\n    const lowMiddle = Math.floor((values.length - 1) / 2);\n    const highMiddle = Math.ceil((values.length - 1) / 2);\n    return (values[lowMiddle].cpuUsage + values[highMiddle].cpuUsage) / 2;\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread | undefined;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class CpuConsumerSingleUsage extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n  };\n\n  public handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  public handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n\n  public render() {\n    const thread = this.props.thread;\n\n    if (!thread) {\n      return <>     -- </>;\n    }\n\n    const cpuUsage = `${thread.cpuUsage.toFixed(1)}%`;\n    const padding = ' '.repeat(8 - cpuUsage.length);\n    let className = thread.cpuUsage > 78\n      ? 'high '\n      : thread.cpuUsage > 42\n        ? 'mid '\n        : thread.cpuUsage > 13\n          ? 'low '\n          : thread.cpuUsage > 0\n            ? 'vlow '\n            : '';\n    className += 'cpu-usage';\n\n    return (\n      <>\n        {padding}\n        <span className={className} onClick={this.handleClick}>{cpuUsage}</span>\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumerSingleUsage from './CpuConsumerSingleUsage';\n\ntype Props = {\n  dumpsNumber: number;\n  consumer: CpuConsumer;\n};\n\nconst CpuConsumerItem: React.SFC<Props> = ({ dumpsNumber, consumer }) => {\n  const threads: Array<Thread | undefined> = [];\n\n  for (let i = 0; i < dumpsNumber; i++) {\n    threads.push(consumer.threadOccurences.get(i));\n  }\n\n  return (\n    <li>\n      <h6>\n        {formatConsumerHeader(consumer.calculatedValue, consumer.threadOccurences.values())}\n      </h6>\n      <span className=\"mono\">\n        {threads.map((thread, index) => <CpuConsumerSingleUsage thread={thread} key={index} />)}\n      </span>\n    </li>\n  );\n};\n\nconst formatConsumerHeader = (value: number, threads: IterableIterator<Thread>): string => {\n  let threadName: string = '';\n\n  for (const thread of threads) {\n    if (thread) {\n      threadName = thread.name;\n    }\n  }\n\n  return (\n    `${value.toFixed(2)}% - \"${threadName}\"`\n  );\n};\n\nexport default CpuConsumerItem;\n","import React from 'react';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumerItem from './CpuConsumerItem';\n\ntype Props = {\n  limit: number;\n  dumpsNumber: number;\n  consumers: CpuConsumer[];\n};\n\nconst CpuConsumersList: React.SFC<Props> = ({ limit, dumpsNumber, consumers }) => (\n  <ul id=\"consumers-list\">\n    {consumers.slice(0, limit).map((consumer, index) => (\n      <CpuConsumerItem key={index} dumpsNumber={dumpsNumber} consumer={consumer} />\n    ))}\n  </ul>\n);\n\nexport default CpuConsumersList;\n","import React from 'react';\nimport { CpuConsumersMode } from './CpuConsumersPage';\n\ntype Props = {\n  mode: CpuConsumersMode;\n  limit: number;\n  onModeChange: (mode: number) => React.ChangeEventHandler<HTMLInputElement>;\n  onLimitChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst CpuConsumersSettings: React.SFC<Props> = ({ mode, limit, onModeChange, onLimitChange }) => (\n  <div id=\"settings\">\n    <div className=\"filters\">\n      <b>CPU usage calculation:</b>\n\n      <label className={mode === CpuConsumersMode.Mean ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Mean}\n          onChange={onModeChange(CpuConsumersMode.Mean)}\n        />\n        Mean\n        </label>\n\n      <label className={mode === CpuConsumersMode.Median ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Median}\n          onChange={onModeChange(CpuConsumersMode.Median)}\n        />\n        Median\n        </label>\n\n      <label className={mode === CpuConsumersMode.Max ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Max}\n          onChange={onModeChange(CpuConsumersMode.Max)}\n        />\n        Max\n        </label>\n    </div>\n\n    <div id=\"cpu-consumers-limit\">\n      <label>\n        <input type=\"number\" name=\"limit\" min=\"0\" max=\"10000\"\n          value={limit}\n          onChange={onLimitChange}\n        />\n        <b>Threads to show</b>\n      </label>\n    </div>\n  </div>\n);\n\nexport default CpuConsumersSettings;\n","import LoadAverages from './LoadAverage';\nimport Lock from './Lock';\nimport MemoryUsage from './MemoryUsage';\nimport Thread from './Thread';\n\nexport default class ThreadDump {\n  public static getFormattedTime = (threadDump: ThreadDump): string => {\n    return threadDump.epoch ? new Date(threadDump.epoch).toLocaleTimeString() : 'unknown time';\n  }\n\n  public loadAverages!: LoadAverages | null;\n  public runningProcesses!: number;\n  public memoryUsage!: MemoryUsage;\n  public threads: Thread[] = [];\n  public locks: Lock[] = [];\n  private epoch!: number | null;\n\n  constructor(date: string | null) {\n    if (!date) {\n      this.epoch = null;\n      return;\n    }\n\n    // we want to create a date like below, but we can't because Safari throws \"Invalid Date\"\n    // this.epoch = new Date(date).valueOf();\n    const hours = parseInt(date.substring(11, 13), 10);\n    const minutes = parseInt(date.substring(14, 16), 10);\n    const seconds = parseInt(date.substring(17), 10);\n    this.epoch = hours * 3600000 + minutes * 60000 + seconds * 1000;\n  }\n\n  public getEpoch = () => {\n    return this.epoch;\n  }\n}\n","import Lock from '../../types/Lock';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\n\nexport default class Monitor {\n  public time: string;\n  public javaClass: string;\n  public owner: Thread | null;\n  public waiting: Thread[];\n\n  public constructor(threadDump: ThreadDump, lock: Lock) {\n    this.time = ThreadDump.getFormattedTime(threadDump);\n    this.javaClass = lock.className;\n    this.owner = lock.owner;\n    this.waiting = lock.waiting;\n  }\n}\n","import Monitor from './Monitor';\n\nexport default class MonitorOverTime {\n  public id: string;\n  public waitingSum: number = 0;\n  public monitors: Monitor[] = [];\n\n  public constructor(id: string) {\n    this.id = id;\n  }\n}\n","import React from 'react';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\nimport Monitor from './Monitor';\n\ntype Props = {\n  monitor: Monitor;\n};\n\ntype State = {\n  showOwner: boolean;\n};\n\nexport default class MonitorOwner extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showOwner: false,\n  };\n\n  public render() {\n    const monitor = this.props.monitor;\n\n    if (!monitor.owner) {\n      return null;\n    }\n\n    return (\n      <>\n        <b>Held by:</b>\n        <br />\n        <a className=\"expandable-details\" onClick={this.handleClick}>{monitor.owner.name}</a>\n        <br />\n\n        {this.state.showOwner &&\n          <ThreadDetailsWindow thread={monitor.owner} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    this.setState(prevState => ({ showOwner: !prevState.showOwner }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showOwner: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class WaitingListItem extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n\n    return (\n      <>\n        <a onClick={this.handleClick}>{thread.name}</a>\n        <br />\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport WaitingListItem from './WaitingListItem';\n\ntype Props = {\n  waiting: Thread[],\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nexport default class WaitingList extends React.PureComponent<Props, State> {\n\n  private static THREADS_TO_SHOW_WHEN_COLLAPSED = 20;\n\n  public state: State = {\n    expanded: false,\n  };\n\n  public render() {\n    if (this.props.waiting.length === 0) {\n      return null;\n    }\n\n    const collapsable = this.props.waiting.length - WaitingList.THREADS_TO_SHOW_WHEN_COLLAPSED;\n    const threads = this.state.expanded\n      ? this.props.waiting\n      : this.props.waiting.slice(0, WaitingList.THREADS_TO_SHOW_WHEN_COLLAPSED);\n\n    return (\n      <>\n        <b>{this.props.waiting.length} thread(s) waiting for notification on lock:</b>\n        <br />\n\n        {threads.map((thread, index) => <WaitingListItem thread={thread} key={index} />)}\n\n        {collapsable > 0 &&\n          <a onClick={this.toggleExpand}>\n            {this.state.expanded\n              ? `Collapse threads list (hide ${collapsable} thread(s))`\n              : `Expand threads list (${collapsable} more thread(s) to show)`}\n          </a>}\n      </>\n    );\n  }\n\n  private toggleExpand = () => {\n    this.setState(prevState => ({ expanded: !prevState.expanded }));\n  }\n}\n","import React from 'react';\nimport Monitor from './Monitor';\nimport MonitorOwner from './MonitorOwner';\nimport WaitingList from './WaitingList';\n\ntype Props = {\n  monitor: Monitor;\n};\n\nconst MonitorItem: React.SFC<Props> = ({ monitor }) => {\n  const javaClass = monitor.javaClass\n    ? monitor.javaClass.substring(monitor.javaClass.lastIndexOf('.') + 1)\n    : 'unknown class';\n\n  return (\n    <div className=\"monitors-container\">\n      <div className=\"left\">\n        <b>{monitor.time}</b>\n        <br />\n        {javaClass}\n      </div>\n      <div>\n        <MonitorOwner monitor={monitor} />\n        <WaitingList waiting={monitor.waiting} />\n      </div>\n    </div>\n  );\n};\n\nexport default MonitorItem;\n","import React from 'react';\nimport MonitorItem from './MonitorItem';\nimport MonitorOverTime from './MonitorOverTime';\n\ntype Props = {\n  monitor: MonitorOverTime;\n};\n\ntype State = {\n  collapse: boolean;\n};\n\nexport default class MonitorOverTimeItem extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    collapse: false,\n  };\n\n  public render() {\n    const monitor = this.props.monitor;\n\n    return (\n      <>\n        <h6 className=\"clickable\" onClick={this.toggleCollapse}>\n          <span className={this.state.collapse ? 'chevron rotate' : 'chevron'} />\n          {monitor.waitingSum} thread(s) waiting for &lt;{monitor.id}&gt;\n        </h6>\n\n        {!this.state.collapse &&\n          monitor.monitors.map((item, index) => <MonitorItem key={index} monitor={item} />)}\n      </>\n    );\n  }\n\n  private toggleCollapse = () => {\n    this.setState(prevState => ({ collapse: !prevState.collapse }));\n  }\n}\n","import React from 'react';\nimport './Filter.css';\n\ntype Props = {\n  name: string;\n  displayName: string;\n  checked: boolean;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst Filter: React.SFC<Props> = ({ name, displayName, checked, onChange }) => (\n  <label className={checked ? 'checked' : ''}>\n    <input\n      type=\"checkbox\"\n      name={name}\n      checked={checked}\n      onChange={onChange}\n    />\n    {displayName}\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  withOwner: boolean;\n  withoutIdle: boolean;\n  withoutOwner: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst MonitorsSettings: React.SFC<Props> =\n  ({ withOwner, withoutIdle, withoutOwner, onFilterChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n\n        <Filter name=\"withOwner\" displayName=\"With Owner\"\n          checked={withOwner} onChange={onFilterChange} />\n\n        <Filter name=\"withoutOwner\" displayName=\"Without Owner\"\n          checked={withoutOwner} onChange={onFilterChange} />\n      </div>\n    </div>\n  );\n\nexport default MonitorsSettings;\n","import React from 'react';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport Monitor from './Monitor';\nimport MonitorOverTime from './MonitorOverTime';\nimport MonitorOverTimeItem from './MonitorOverTimeItem';\nimport './MonitorsPage.css';\nimport MonitorsSettings from './MonitorsSettings';\n\ntype State = {\n  withOwner: boolean;\n  withoutIdle: boolean;\n  withoutOwner: boolean;\n};\n\nexport default class MonitorsPage extends PageWithSettings<State> {\n\n  public state: State = {\n    withOwner: false,\n    withoutIdle: true,\n    withoutOwner: false,\n  };\n\n  protected PAGE_NAME = 'Monitors';\n\n  public render() {\n    const monitors = this.getMonitorsOverTime(this.props.threadDumps);\n    const filtered = this.filterMonitors(monitors);\n\n    return (\n      <div id=\"page\">\n        <MonitorsSettings\n          withOwner={this.state.withOwner}\n          withoutIdle={this.state.withoutIdle}\n          withoutOwner={this.state.withoutOwner}\n          onFilterChange={this.handleFilterChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: MonitorsPage.NO_THREAD_DUMPS }} />\n          : filtered.length === 0\n            ? <h4>{MonitorsPage.N0_MONITORS_MATCHING}</h4>\n            : filtered.map(monitor => <MonitorOverTimeItem key={monitor.id} monitor={monitor} />)}\n      </div>\n    );\n  }\n\n  private getMonitorsOverTime = (threadDumps: ThreadDump[]): MonitorOverTime[] => {\n    const monitorsOverTime: Map<string, MonitorOverTime> = new Map();\n\n    threadDumps.forEach((threadDump) => {\n      threadDump.locks.forEach((lock) => {\n        const monitor = new Monitor(threadDump, lock);\n\n        let monitorOverTime = monitorsOverTime.get(lock.id);\n        if (!monitorOverTime) {\n          monitorOverTime = new MonitorOverTime(lock.id);\n          monitorsOverTime.set(lock.id, monitorOverTime);\n        }\n\n        monitorOverTime.monitors.push(monitor);\n        monitorOverTime.waitingSum += monitor.waiting.length;\n      });\n    });\n\n    return Array\n      .from(monitorsOverTime.values())\n      .sort((m1, m2) => m2.waitingSum - m1.waitingSum);\n  }\n\n  private filterMonitors = (monitors: MonitorOverTime[]) => {\n    let filtered = monitors.filter(monitor => monitor.waitingSum > 0);\n\n    if (this.state.withoutIdle) {\n      filtered = filtered.filter(monitor => !this.isQueueThread(monitor));\n    }\n    if (this.state.withOwner) {\n      filtered = filtered.filter(monitor => this.hasAnyOwner(monitor));\n    }\n    if (this.state.withoutOwner) {\n      filtered = filtered.filter(monitor => !this.hasAnyOwner(monitor));\n    }\n\n    return filtered;\n  }\n\n  private hasAnyOwner = (monitorOverTime: MonitorOverTime): boolean => {\n    return monitorOverTime.monitors.some(monitor => monitor.owner !== null);\n  }\n\n  private isQueueThread = (monitorOverTime: MonitorOverTime): boolean => {\n    for (const monitor of monitorOverTime.monitors) {\n      // if the lock has an owner, it's not a queue thread\n      if (monitor.owner !== null) {\n        return false;\n      }\n\n      // if the stack trace is too long, it's not a queue thread\n      for (const thread of monitor.waiting) {\n        if (thread.stackTrace.length > 12) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","import React, { ReactNode } from 'react';\n\ntype Props = {\n  to: string;\n  children: ReactNode;\n};\n\nconst OutboundLink: React.SFC<Props> = ({ to, children }) => (\n  <a href={to} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nexport default OutboundLink;\n","import React from 'react';\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { clearCurrentThreadDump } from '../../common/threadDumpsStorageService';\nimport './Navigation.css';\nimport OutboundLink from './OutboundLink';\n\n// tslint:disable:max-line-length\nexport const ISSUE_TRACKER_LINK: string = 'https://github.com/drauf/watson/issues';\nexport const SOURCE_CODE_LINK: string = 'https://github.com/drauf/watson';\n// tslint:enable:max-line-length\n\ntype Props = RouteComponentProps<any> & {\n  open: boolean;\n};\n\nclass Navigation extends React.PureComponent<Props> {\n\n  public render() {\n    const key: string = this.props.match.params.key as string;\n\n    return (\n      <nav className={this.props.open ? 'open' : ''}>\n        <h1 id={this.props.open ? 'brand-visible' : 'brand-hidden'}>\n          Watson\n        </h1>\n\n        <ul>\n          <NavLink to={`/${key}/summary/`}><li>Summary</li></NavLink>\n        </ul>\n        <ul>\n          <NavLink to={`/${key}/cpu-consumers/`}><li>CPU Consumers</li></NavLink>\n          <NavLink to={`/${key}/similar-stacks/`}><li>Similar Stack Traces</li></NavLink>\n          <NavLink to={`/${key}/stuck-threads/`}><li>Stuck Threads Suspects</li></NavLink>\n          <NavLink to={`/${key}/threads-overview/`}><li>Threads Overview</li></NavLink>\n          <NavLink to={`/${key}/monitors/`}><li>Monitors</li></NavLink>\n        </ul>\n\n        <div id=\"nav-content-bottom\">\n          <ul>\n            <li onClick={this.onClear}>Load another thread dump</li>\n          </ul>\n\n          <ul>\n            <OutboundLink to={ISSUE_TRACKER_LINK}>\n              <li>Issue tracker</li>\n            </OutboundLink>\n            <OutboundLink to={SOURCE_CODE_LINK}>\n              <li>Source code</li>\n            </OutboundLink>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n\n  private onClear = () => {\n    clearCurrentThreadDump();\n    this.props.history.push('/');\n  }\n}\n\nexport default withRouter(Navigation);\n","import React from 'react';\nimport './NavToggle.css';\n\ntype Props = {\n  open: boolean;\n  onClick: () => void;\n};\n\nconst NavToggle: React.SFC<Props> = ({ open, onClick }) => (\n  <div className={open ? 'nav-toggle open' : 'nav-toggle'} onClick={onClick}>\n    <div id=\"nav-arrow\" />\n  </div>\n);\n\nexport default NavToggle;\n","import React from 'react';\nimport { WithThreadDumpsProps } from '../common/withThreadDumps';\n\nconst NotFoundError: React.SFC<WithThreadDumpsProps> = () => (\n  <h4 id=\"centered\">Oops, you've found a dead link!</h4>\n);\n\nexport default NotFoundError;\n","import Thread from '../types/Thread';\n\n// tslint:disable:max-line-length\nexport default function isIdleThread(thread: Thread): boolean {\n  return thread.stackTrace.length < 17\n    || (thread.name.includes('rufus-scheduler')\n      && thread.stackTrace[7] === 'org.jruby.ext.thread.Queue$INVOKER$i$pop.call(Queue$INVOKER$i$pop.gen)'\n      || thread.stackTrace[3] === 'org.jruby.RubyKernel$INVOKER$s$0$1$sleep.call(RubyKernel$INVOKER$s$0$1$sleep.gen)')\n    || (thread.name.includes('rubinius-actor')\n      && thread.stackTrace[5] === 'org.jruby.ext.rubinius.RubiniusChannel$INVOKER$i$0$0$receive.call(RubiniusChannel$INVOKER$i$0$0$receive.gen)');\n}\n","import React from 'react';\n\ntype Props = {\n  stackTrace: string[];\n  linesToConsider: number;\n};\n\nconst StackTrace: React.SFC<Props> = ({ stackTrace, linesToConsider }) => {\n  const stack = linesToConsider > 0 ? stackTrace.slice(0, linesToConsider) : stackTrace;\n\n  return (\n    <ol className=\"stacktrace\">\n      {stack.map((line, index) => (\n        <li key={index}>{line}</li>))}\n    </ol>\n  );\n};\n\nexport default StackTrace;\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n  showLockOwner: boolean;\n};\n\nexport default class ThreadSummary extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n    showLockOwner: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n    const lockOwner = thread.lockWaitingFor ? thread.lockWaitingFor.owner : null;\n    const locksHeld = this.getLocksHeldString(thread);\n\n    return (\n      <li>\n        <a onClick={this.toggleDetails}>\"{thread.name}\"</a>\n        {` ${Thread.getFormattedTime(thread)}`}\n        {this.waitingForRender(thread, lockOwner)}\n        {thread.locksHeld.length > 0 && `, holding [${locksHeld}]`}\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n        {this.state.showLockOwner && lockOwner &&\n          <ThreadDetailsWindow thread={lockOwner} onUnload={this.handleUnload} />}\n      </li>\n    );\n  }\n\n  private toggleDetails = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private toggleLockOwner = () => {\n    this.setState(prevState => ({ showLockOwner: !prevState.showLockOwner }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false, showLockOwner: false });\n  }\n\n  private waitingForRender(thread: Thread, lockOwner: Thread | null) {\n    const lockWaitingFor = thread.lockWaitingFor ? thread.lockWaitingFor.id : null;\n\n    if (!lockWaitingFor) {\n      return null;\n    }\n\n    if (lockOwner) {\n      console.error(thread);\n      return (\n        <>\n          , awaiting notification on <a onClick={this.toggleLockOwner}>[{lockWaitingFor}]</a>\n        </>\n      );\n    }\n    return `, awaiting notification on [${lockWaitingFor}] without an owner`;\n  }\n\n  private getLocksHeldString = (thread: Thread): string | null => {\n    if (thread.locksHeld.length === 0) {\n      return null;\n    }\n    return thread.locksHeld.map(lock => lock.id).reduce(this.locksReducer);\n  }\n\n  private locksReducer(accumulator: string, lockId: string, index: number): string {\n    return (index === 0) ? lockId : `${accumulator}, ${lockId}`;\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport StackTrace from './StackTrace';\nimport ThreadSummary from './ThreadSummary';\n\ntype Props = {\n  threadGroup: Thread[];\n  linesToConsider: number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nexport default class GroupDetails extends React.PureComponent<Props, State> {\n\n  private static THREADS_TO_SHOW_WHEN_COLLAPSED = 20;\n\n  public state: State = {\n    expanded: false,\n  };\n\n  public render() {\n    const stackTrace = this.getStackTrace(this.props.threadGroup);\n    const sortedByName = this.props.threadGroup.sort((t1, t2) => t1.name.localeCompare(t2.name));\n    const collapsable = sortedByName.length - GroupDetails.THREADS_TO_SHOW_WHEN_COLLAPSED;\n    const threads = this.state.expanded\n      ? sortedByName\n      : sortedByName.slice(0, GroupDetails.THREADS_TO_SHOW_WHEN_COLLAPSED);\n\n    return (\n      <>\n        <ul>\n          {threads.map((thread, index) => <ThreadSummary key={index} thread={thread} />)}\n\n          {collapsable > 0 &&\n            <li><a onClick={this.toggleExpand}>\n              {this.state.expanded\n                ? `Collapse threads list (hide ${collapsable} thread(s))`\n                : `Expand threads list (${collapsable} more thread(s) to show)`}\n            </a></li>}\n        </ul>\n        <StackTrace stackTrace={stackTrace} linesToConsider={this.props.linesToConsider} />\n      </>\n    );\n  }\n\n  private toggleExpand = () => {\n    this.setState(prevState => ({ expanded: !prevState.expanded }));\n  }\n\n  private getStackTrace = (threads: Thread[]): string[] => {\n    for (const thread of threads) {\n      if (thread) {\n        return thread.stackTrace;\n      }\n    }\n    return [];\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport GroupDetails from './GroupDetails';\n\ntype Props = {\n  threadGroup: Thread[];\n  linesToConsider: number;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class SimilarStacksGroup extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: true,\n  };\n\n  public render() {\n    return (\n      <>\n        <h6 className=\"clickable\" onClick={this.toggleGroup}>\n          <span className={this.state.showDetails ? 'chevron' : 'chevron rotate'} />\n          {this.props.threadGroup.length} thread(s) with this stack:\n        </h6>\n\n        {this.state.showDetails &&\n          <GroupDetails\n            threadGroup={this.props.threadGroup}\n            linesToConsider={this.props.linesToConsider} />}\n      </>\n    );\n  }\n\n  private toggleGroup = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n}\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  linesToConsider: number;\n  minimalGroupSize: number;\n  withoutIdle: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onIntegerChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst SimilarStacksSettings: React.SFC<Props> =\n  ({ linesToConsider, minimalGroupSize, withoutIdle, onFilterChange, onIntegerChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n      </div>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"linesToConsider\"\n          value={linesToConsider}\n          onChange={onIntegerChange}\n        />\n        <b>Stack trace lines to compare</b>\n      </label>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"minimalGroupSize\"\n          value={minimalGroupSize}\n          onChange={onIntegerChange}\n        />\n        <b>Minimal group size to show</b>\n      </label>\n    </div>\n  );\n\nexport default SimilarStacksSettings;\n","import React from 'react';\nimport isIdleThread from '../../common/isIdleThread';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport SimilarStacksGroup from './SimilarStacksGroup';\nimport './SimilarStacksPage.css';\nimport SimilarStacksSettings from './SimilarStacksSettings';\n\ntype State = {\n  linesToConsider: number;\n  minimalGroupSize: number;\n  withoutIdle: boolean;\n};\n\nexport default class SimilarStacksPage extends PageWithSettings<State> {\n\n  public state: State = {\n    linesToConsider: 40,\n    minimalGroupSize: 2,\n    withoutIdle: true,\n  };\n\n  protected PAGE_NAME = 'Similar Stacks';\n\n  public render() {\n    const threadGroups = this.groupByStackTrace(this.props.threadDumps, this.state.linesToConsider)\n      .filter(group => group.length >= this.state.minimalGroupSize);\n\n    return (\n      <div id=\"page\">\n        <SimilarStacksSettings\n          linesToConsider={this.state.linesToConsider}\n          minimalGroupSize={this.state.minimalGroupSize}\n          withoutIdle={this.state.withoutIdle}\n          onFilterChange={this.handleFilterChange}\n          onIntegerChange={this.handleIntegerChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: SimilarStacksPage.NO_THREAD_DUMPS }} />\n          : threadGroups.length === 0\n            ? <h4>{SimilarStacksPage.N0_THREADS_MATCHING}</h4>\n            : threadGroups.map((group, index) => (\n              <SimilarStacksGroup key={index}\n                threadGroup={group}\n                linesToConsider={this.state.linesToConsider} />))}\n      </div>\n    );\n  }\n\n  private groupByStackTrace(threadDumps: ThreadDump[], linesToConsider: number) {\n    const grouped: Map<string, Thread[]> = new Map();\n\n    threadDumps.forEach((threadDump) => {\n      threadDump.threads.forEach((thread) => {\n        const stackTrace = this.getStackTrace(thread, linesToConsider);\n\n        if (!stackTrace) {\n          return;\n        }\n\n        let similarStacks = grouped.get(stackTrace);\n        if (!similarStacks) {\n          similarStacks = [];\n        }\n        similarStacks.push(thread);\n\n        grouped.set(stackTrace, similarStacks);\n      });\n    });\n\n    return Array.from(grouped.values()).sort((t1, t2) => t2.length - t1.length);\n  }\n\n  private getStackTrace(thread: Thread, linesToConsider: number): string | null {\n    if (this.state.withoutIdle && isIdleThread(thread)) {\n      return null;\n    }\n\n    if (linesToConsider < 1) {\n      return thread.stackTrace.toString();\n    }\n\n    return thread.stackTrace.slice(0, linesToConsider).toString();\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  maxDifferingLines: number;\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class ThreadDetails extends React.PureComponent<Props, State> {\n  public state: State = {\n    showDetails: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n    const stack = thread.stackTrace.slice(0, Math.max(this.props.maxDifferingLines, 10));\n\n    return (\n      <>\n        <b>{Thread.getFormattedTime(thread)}</b>\n\n        <ul className=\"stacktrace\">\n          {stack.map((line, index) => (\n            <li key={index}>{line}</li>))}\n          <li><a onClick={this.handleClick}>See thread details</a></li>\n        </ul>\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetails from './ThreadDetails';\n\ntype Props = {\n  maxDifferingLines: number;\n  threadGroup: Thread[];\n};\n\nconst GroupDetails: React.SFC<Props> = ({ maxDifferingLines, threadGroup }) => {\n  return (\n    <>\n      {threadGroup.map((thread, index) =>\n        <ThreadDetails\n          key={index}\n          thread={thread}\n          maxDifferingLines={maxDifferingLines}\n        />)}\n    </>\n  );\n};\n\nexport default GroupDetails;\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport GroupDetails from './GroupDetails';\n\ntype Props = {\n  threadGroup: Thread[];\n  maxDifferingLines: number;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class StuckThreadsGroup extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: true,\n  };\n\n  public render() {\n    if (this.props.threadGroup.length === 0) {\n      return null;\n    }\n\n    const thread = this.props.threadGroup[0];\n    return (\n      <>\n        <h6 className=\"clickable\" onClick={this.toggleGroup}>\n          <span className={this.state.showDetails ? 'chevron' : 'chevron rotate'} />\n          {this.props.threadGroup.length} similar stack(s) for \"{thread.name}\"\n        </h6>\n\n        {this.state.showDetails &&\n          <GroupDetails\n            threadGroup={this.props.threadGroup}\n            maxDifferingLines={this.props.maxDifferingLines} />}\n      </>\n    );\n  }\n\n  private toggleGroup = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n}\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  maxDifferingLines: number;\n  minClusterSize: number;\n  withoutIdle: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onIntegerChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst StuckThreadsSettings: React.SFC<Props> =\n  ({ maxDifferingLines, minClusterSize, withoutIdle, onFilterChange, onIntegerChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n      </div>\n\n      <label>\n        <input\n          type=\"number\"\n          min=\"2\"\n          name=\"minClusterSize\"\n          value={minClusterSize}\n          onChange={onIntegerChange}\n        />\n        <b>Minimal similar stacks to consider a thread stuck</b>\n      </label>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"maxDifferingLines\"\n          value={maxDifferingLines}\n          onChange={onIntegerChange}\n        />\n        <b>Maximum differing lines between dumps</b>\n      </label>\n    </div>\n  );\n\nexport default StuckThreadsSettings;\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport isIdleThread from '../../common/isIdleThread';\nimport { WithThreadDumpsProps } from '../../common/withThreadDumps';\nimport Thread from '../../types/Thread';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport StuckThreadsGroup from './StuckThreadsGroup';\nimport StuckThreadsSettings from './StuckThreadsSettings';\n\ntype State = {\n  maxDifferingLines: number;\n  minClusterSize: number;\n  withoutIdle: boolean;\n};\n\nexport default class StuckThreadsPage extends PageWithSettings<State> {\n  protected PAGE_NAME = 'Stuck Threads';\n\n  constructor(props: WithThreadDumpsProps) {\n    super(props);\n\n    this.state = {\n      maxDifferingLines: 5,\n      minClusterSize: this.props.threadDumps.length,\n      withoutIdle: true,\n    };\n  }\n\n  public render() {\n    const threadOverTime = getThreadsOverTime(this.props.threadDumps);\n    const filtered = this.filterThreads(threadOverTime);\n    const clusters = this.buildClusters(filtered);\n\n    return (\n      <div id=\"page\">\n        <StuckThreadsSettings\n          maxDifferingLines={this.state.maxDifferingLines}\n          minClusterSize={this.state.minClusterSize}\n          withoutIdle={this.state.withoutIdle}\n          onFilterChange={this.handleFilterChange}\n          onIntegerChange={this.handleIntegerChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: StuckThreadsPage.NO_THREAD_DUMPS }} />\n          : clusters.length === 0\n            ? <h4>{StuckThreadsPage.N0_THREADS_MATCHING}</h4>\n            : clusters.map((group, index) => (\n              <StuckThreadsGroup key={index}\n                threadGroup={group}\n                maxDifferingLines={this.state.maxDifferingLines} />))}\n      </div>\n    );\n  }\n\n  private filterThreads = (threadDumps: Array<Map<number, Thread>>): Thread[][] => {\n    return threadDumps\n      .map(threadDump => this.filterThread(threadDump))\n      .filter(dump => dump.length > 0);\n  }\n\n  private filterThread = (threadOverTime: Map<number, Thread>): Thread[] => {\n    const filtered = [];\n\n    for (const thread of threadOverTime) {\n      if (this.state.withoutIdle && isIdleThread(thread[1])) {\n        continue;\n      }\n\n      filtered.push(thread[1]);\n    }\n\n    return filtered;\n  }\n\n  private buildClusters = (threadDumps: Thread[][]): Thread[][] => {\n    const clusters: Thread[][] = [];\n\n    for (const threadOverTime of threadDumps) {\n      this.getClustersFromThread(threadOverTime)\n        .filter(c => c.length >= this.state.minClusterSize)\n        .forEach(c => clusters.push(c));\n    }\n\n    return clusters.sort((c1, c2) => c2.length - c1.length);\n  }\n\n  private getClustersFromThread = (threadOverTime: Thread[]): Thread[][] => {\n    const clusters = [];\n\n    let currentCluster = [threadOverTime[0]];\n    for (let i = 1; i < threadOverTime.length; i++) {\n      const previous = threadOverTime[i - 1];\n      const current = threadOverTime[i];\n\n      if (this.areThreadsSimilarEnough(previous, current)) {\n        currentCluster.push(current);\n      } else {\n        clusters.push(currentCluster);\n        currentCluster = [current];\n      }\n    }\n\n    clusters.push(currentCluster);\n    return clusters;\n  }\n\n  private areThreadsSimilarEnough = (t1: Thread, t2: Thread): boolean => {\n    const stack1 = t1.stackTrace;\n    const stack2 = t2.stackTrace;\n\n    if (Math.abs(stack1.length - stack2.length) > this.state.maxDifferingLines) {\n      return false;\n    }\n\n    const limit = Math.max(stack1.length, stack2.length);\n    for (let i = limit; i >= 0; i--) {\n      if (stack1[i] !== stack2[i]) {\n        return (i <= this.state.maxDifferingLines);\n      }\n    }\n\n    return true;\n  }\n}\n","import React from 'react';\r\nimport {\r\n  CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis,\r\n} from 'recharts';\r\nimport ThreadDump from '../../types/ThreadDump';\r\n\r\ntype Props = {\r\n  threadDumps: ThreadDump[];\r\n};\r\n\r\nconst LoadAveragesChart: React.SFC<Props> = ({ threadDumps }) => {\r\n  const data: object[] = [];\r\n  threadDumps.map((threadDump) => {\r\n    if (threadDump.loadAverages) {\r\n      data.push({\r\n        fifteenMinutes: threadDump.loadAverages.fifteenMinutes,\r\n        fiveMinutes: threadDump.loadAverages.fiveMinutes,\r\n        name: ThreadDump.getFormattedTime(threadDump),\r\n        oneMinute: threadDump.loadAverages.oneMinute,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3>Load averages</h3>\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <LineChart data={data}>\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" />\r\n          <CartesianGrid stroke=\"#EBECF0\" strokeDasharray=\"5 5\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line name=\"One minute\" dataKey=\"oneMinute\" stroke=\"#36B37E\" />\r\n          <Line name=\"Five minutes\" dataKey=\"fiveMinutes\" stroke=\"#FFAB00\" />\r\n          <Line name=\"Fifteen minutes\" dataKey=\"fifteenMinutes\" stroke=\"#6554C0\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadAveragesChart;\r\n","import { TooltipFormatter } from 'recharts';\n\n// perform a \"best effort\" conversion to GBs\nconst labelFormatter: TooltipFormatter\n  = (value: string | number | Array<string | number>): React.ReactNode => {\n    return convert(value as number);\n  };\n\nconst convert = (value: number): string => {\n  if (value > 1000000) {\n    return `${round(value / 1000000)} GB`;\n  }\n  return `${round(value / 1000)} MB`;\n};\n\nconst round = (value: number): string => {\n  return value.toFixed(2);\n};\n\nexport default labelFormatter;\n","import React from 'react';\nimport {\n  Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip,\n} from 'recharts';\nimport MemoryUsage from '../../types/MemoryUsage';\nimport ThreadDump from '../../types/ThreadDump';\nimport labelFormatter from './LabelFormatter';\n\nconst COLORS = ['#00B8D9', '#36B37E'];\n\ntype Props = {\n  threadDumps: ThreadDump[];\n};\n\nconst MemoryUsageChart: React.SFC<Props> = ({ threadDumps }) => {\n  const memoryUsages: MemoryUsage[] = threadDumps\n    .map(threadDump => threadDump.memoryUsage)\n    .filter(memoryUsage => !!memoryUsage);\n\n  const freeMemoryAvg = memoryUsages.reduce((a, b) => a + b.memoryFree, 0) / memoryUsages.length;\n  const usedMemoryAvg = memoryUsages.reduce((a, b) => a + b.memoryUsed, 0) / memoryUsages.length;\n\n  const data: object[] = [\n    { name: 'Used memory', value: usedMemoryAvg },\n    { name: 'Free memory', value: freeMemoryAvg },\n  ];\n\n  return (\n    <div>\n      <h3>Memory usage</h3>\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={data} dataKey=\"value\" nameKey=\"name\">\n            {\n              data.map((_, index) => <Cell key={index} fill={COLORS[index]} />)\n            }\n          </Pie>\n          <Tooltip formatter={labelFormatter} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default MemoryUsageChart;\n","import React from 'react';\r\nimport {\r\n  CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis,\r\n} from 'recharts';\r\nimport ThreadDump from '../../types/ThreadDump';\r\n\r\ntype Props = {\r\n  threadDumps: ThreadDump[];\r\n};\r\n\r\nconst RunningProcessesChart: React.SFC<Props> = ({ threadDumps }) => {\r\n  const data: object[] = [];\r\n  threadDumps.map((threadDump) => {\r\n    if (threadDump.loadAverages) {\r\n      data.push({\r\n        name: ThreadDump.getFormattedTime(threadDump),\r\n        runningProcesses: threadDump.runningProcesses,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3>Running processes</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <LineChart data={data}>\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" />\r\n          <CartesianGrid stroke=\"#EBECF0\" strokeDasharray=\"5 5\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line\r\n            name=\"Running processes\"\r\n            dataKey=\"runningProcesses\"\r\n            stroke=\"#36B37E\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunningProcessesChart;\r\n","import React from 'react';\nimport {\n  Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip,\n} from 'recharts';\nimport MemoryUsage from '../../types/MemoryUsage';\nimport ThreadDump from '../../types/ThreadDump';\nimport labelFormatter from './LabelFormatter';\n\nconst COLORS = ['#6554C0', '#FF5630'];\n\ntype Props = {\n  threadDumps: ThreadDump[];\n};\n\nconst SwapUsageChart: React.SFC<Props> = ({ threadDumps }) => {\n  const memoryUsages: MemoryUsage[] = threadDumps\n    .map(threadDump => threadDump.memoryUsage)\n    .filter(memoryUsage => !!memoryUsage);\n\n  const freeSwapAvg = memoryUsages.reduce((a, b) => a + b.swapFree, 0) / memoryUsages.length;\n  const usedSwapAvg = memoryUsages.reduce((a, b) => a + b.swapUsed, 0) / memoryUsages.length;\n\n  const data: object[] = [\n    { name: 'Free swap', value: freeSwapAvg },\n    { name: 'Used swap', value: usedSwapAvg },\n  ];\n\n  return (\n    <div>\n      <h3>Swap usage</h3>\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={data} dataKey=\"value\" nameKey=\"name\">\n            {\n              data.map((_, index) => <Cell key={index} fill={COLORS[index]} />)\n            }\n          </Pie>\n          <Tooltip formatter={labelFormatter} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default SwapUsageChart;\n","import React from 'react';\r\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\r\nimport LoadAveragesChart from './LoadAveragesChart';\r\nimport MemoryUsageChart from './MemoryUsageChart';\r\nimport RunningProcessesChart from './RunningProcessesChart';\r\nimport './SummaryPage.css';\r\nimport SwapUsageChart from './SwapUsageChart';\r\n\r\nexport default class SummaryPage extends PageWithSettings<any> {\r\n  public render = () => (\r\n    <div id=\"wide-page\">\r\n      {!this.props.threadDumps.some(dump => !!dump.loadAverages)\r\n        ? <h4 dangerouslySetInnerHTML={{ __html: SummaryPage.NO_CPU_INFOS }} />\r\n        : <>\r\n          <div id=\"memory-usages\">\r\n            <MemoryUsageChart threadDumps={this.props.threadDumps} />\r\n            <SwapUsageChart threadDumps={this.props.threadDumps} />\r\n          </div>\r\n          <LoadAveragesChart threadDumps={this.props.threadDumps} />\r\n          <RunningProcessesChart threadDumps={this.props.threadDumps} />\r\n        </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Thread from '../../types/Thread';\n\ntype Props = {\n  isFilteredByStack: boolean;\n  threadsNumber: number;\n  threadDumps: Array<Map<number, Thread>>;\n};\n\nconst ThreadsOverviewFilteringSummary: React.SFC<Props>\n  = ({ isFilteredByStack, threadsNumber, threadDumps }) => {\n\n    if (isFilteredByStack) {\n      const matching = threadDumps.reduce(matchingInGroupCounter, 0);\n      const total = threadDumps.reduce(nonEmptyCounter, 0);\n      const percentage = (matching / total * 100).toFixed(1);\n\n      return (\n        <p id=\"matching-summary\">\n          {matching} out of {total} ({percentage}%) visible threads matching the stack trace filters\n        </p>\n      );\n    }\n\n    if (threadsNumber !== threadDumps.length) {\n      const matching = threadDumps.length;\n      const percentage = (matching / threadsNumber * 100).toFixed(1);\n\n      return (\n        <p id=\"matching-summary\">\n          {matching} out of {threadsNumber} ({percentage}%) threads matching the thread name filters\n        </p>\n      );\n    }\n\n    return <p id=\"matching-summary\" />;\n  };\n\nconst matchingInGroupCounter = (sum: number, currentGroup: Map<number, Thread>): number => {\n  return sum + Array.from(currentGroup.values()).reduce(matchingCounter, 0);\n};\nconst matchingCounter = (sum: number, currentThread: Thread): number => {\n  return sum + (currentThread.matchingFilter ? 1 : 0);\n};\n\nconst nonEmptyCounter = (sum: number, currentGroup: Map<number, Thread>): number => {\n  return sum + Array.from(currentGroup.values()).length;\n};\n\nexport default ThreadsOverviewFilteringSummary;\n","import React from 'react';\n\nconst ThreadsOverviewLegend: React.SFC = () => (\n  <table id=\"thread-overview-legend\">\n    <tbody>\n      <tr>\n        <td className=\"runnable\">runnable</td>\n        <td className=\"blocked\">blocked</td>\n        <td className=\"waiting\">waiting</td>\n        <td className=\"timed-waiting\">timed waiting</td>\n        <td className=\"unknown\">unknown</td>\n        <td />\n        <td className=\"matching\">matching filter</td>\n      </tr>\n    </tbody>\n  </table>\n);\n\nexport default ThreadsOverviewLegend;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  nonJvm: boolean;\n  tomcat: boolean;\n  nonTomcat: boolean;\n  database: boolean;\n  lucene: boolean;\n  nameFilter: string;\n  stackFilter: string;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onRegExpChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst ThreadsOverviewSettings: React.SFC<Props> = ({ nonJvm, tomcat, nonTomcat,\n  database, lucene, nameFilter, stackFilter, onFilterChange, onRegExpChange }) => (\n    <div id=\"threads-overview-settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"nonJvm\" displayName=\"Non-JVM\"\n          checked={nonJvm} onChange={onFilterChange} />\n\n        <Filter name=\"tomcat\" displayName=\"Tomcat\"\n          checked={tomcat} onChange={onFilterChange} />\n\n        <Filter name=\"nonTomcat\" displayName=\"Non-Tomcat\"\n          checked={nonTomcat} onChange={onFilterChange} />\n\n        <Filter name=\"database\" displayName=\"Database\"\n          checked={database} onChange={onFilterChange} />\n\n        <Filter name=\"lucene\" displayName=\"Lucene\"\n          checked={lucene} onChange={onFilterChange} />\n      </div>\n\n      <div id=\"regexp-filters\">\n        <label>\n          <input type=\"text\" name=\"nameFilter\" value={nameFilter} onChange={onRegExpChange}\n          />\n          <b>Thread name RegExp</b>\n        </label>\n\n        <label>\n          <input type=\"text\" name=\"stackFilter\" value={stackFilter} onChange={onRegExpChange}\n          />\n          <b>Stack trace RegExp</b>\n        </label>\n      </div>\n    </div>\n  );\n\nexport default ThreadsOverviewSettings;\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadStatus from '../../types/ThreadStatus';\r\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\r\n\r\ntype Props = {\r\n  thread?: Thread;\r\n  isFiltered: boolean;\r\n  isMatchingFilter: boolean;\r\n};\r\n\r\ntype State = {\r\n  showDetails: boolean;\r\n};\r\n\r\nexport default class ThreadOverviewItem extends React.PureComponent<Props, State> {\r\n\r\n  public state: State = {\r\n    showDetails: false,\r\n  };\r\n\r\n  public render() {\r\n    const thread = this.props.thread;\r\n\r\n    if (!thread) {\r\n      return <td className=\"empty\" />;\r\n    }\r\n\r\n    const className = (this.props.isFiltered)\r\n      ? this.props.isMatchingFilter ? 'matching' : ''\r\n      : thread.status ? thread.status.toString() : ThreadStatus.UNKNOWN.toString();\r\n\r\n    return (\r\n      <>\r\n        <td className={className} onClick={this.toggleDetails}>\r\n          {thread.stackTrace[0]}\r\n          <span>{thread.stackTrace[0]}</span>\r\n        </td>\r\n\r\n        {this.state.showDetails &&\r\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\r\n      </>\r\n    );\r\n  }\r\n\r\n  private toggleDetails = () => {\r\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\r\n  }\r\n\r\n  private handleUnload = () => {\r\n    this.setState({ showDetails: false });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadOverviewItem from './ThreadOverviewItem';\r\n\r\ntype Props = {\r\n  total: number;\r\n  threads: Map<number, Thread>;\r\n  isFiltered: boolean;\r\n};\r\n\r\nconst ThreadOverviewRow: React.SFC<Props> = ({ total, threads, isFiltered }) => {\r\n  const threadsPadded: Array<Thread | undefined> = [];\r\n  for (let i = 0; i < total; i++) {\r\n    threadsPadded[i] = threads.get(i);\r\n  }\r\n\r\n  const firstThread = threadsPadded.find(thread => thread !== undefined);\r\n  const threadName = firstThread ? firstThread.name : '';\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"name\">\r\n        {threadName}\r\n        <span>{threadName}</span>\r\n      </td>\r\n      {threadsPadded.map((thread, i) => (\r\n        <ThreadOverviewItem key={i}\r\n          thread={thread}\r\n          isFiltered={isFiltered}\r\n          isMatchingFilter={thread ? thread.matchingFilter : false}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ThreadOverviewRow;\r\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadOverviewRow from './ThreadOverviewRow';\r\n\r\ntype Props = {\r\n  dates: Array<string | null>;\r\n  isFilteredByStack: boolean;\r\n  threadDumps: Array<Map<number, Thread>>;\r\n};\r\n\r\nconst ThreadsOverview: React.SFC<Props> = ({ dates, isFilteredByStack, threadDumps }) => (\r\n  <div id=\"threads-overview-table-wrapper\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th />\r\n          {dates.map((date, index) => (\r\n            <th key={index}>\r\n              {date}\r\n              <span>{date}</span>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {threadDumps.map((threads, index) => (\r\n          <ThreadOverviewRow key={index}\r\n            isFiltered={isFilteredByStack}\r\n            total={dates.length}\r\n            threads={threads}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nexport default ThreadsOverview;\r\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport ThreadsOverviewFilteringSummary from './ThreadsOverviewFilteringSummary';\nimport ThreadsOverviewLegend from './ThreadsOverviewLegend';\nimport './ThreadsOverviewPage.css';\nimport ThreadsOverviewSettings from './ThreadsOverviewSettings';\nimport ThreadsOverviewTable from './ThreadsOverviewTable';\n\ntype State = {\n  nonJvm: boolean;\n  tomcat: boolean;\n  nonTomcat: boolean;\n  database: boolean;\n  lucene: boolean;\n  nameFilter: string;\n  stackFilter: string;\n};\n\nexport default class ThreadsOverviewPage extends PageWithSettings<State> {\n\n  // tslint:disable:object-literal-sort-keys\n  public state = {\n    nonJvm: true,\n    tomcat: false,\n    nonTomcat: false,\n    database: false,\n    lucene: false,\n    nameFilter: '',\n    stackFilter: '',\n  };\n  // tslint:enable:object-literal-sort-keys\n\n  protected PAGE_NAME = 'Threads Overview';\n\n  // tslint:disable:max-line-length\n  private jvmRegex = /^Attach Listener|^C[12] CompilerThread|^G1 Concurrent |^G1 Main|^Gang worker#|^GC Daemon|^Service Thread|^Signal Dispatcher|^String Deduplication Thread|^Surrogate Locker Thread|^VM Periodic|^VM Thread/;\n  private tomcatRegex = /^http(s\\-jsse)?\\-[a-z]io\\-[0-9]+\\-exec\\-[0-9]+/;\n  private databaseRegex = /^oracle\\.jdbc\\.driver\\.|^org\\.postgresql\\.|^com\\.microsoft\\.sqlserver\\.|^com\\.mysql\\.jdbc\\./;\n  private luceneRegex = /^org\\.apache\\.lucene\\./;\n  // tslint:enable:max-line-length\n\n  public render() {\n    const threadOverTime = getThreadsOverTime(this.props.threadDumps);\n    const filteredDumps = this.filterThreads(threadOverTime);\n    const dates = this.props.threadDumps.map(dump => ThreadDump.getFormattedTime(dump));\n    const isFilteredByStack = this.isFilteredByStack();\n\n    return (\n      <div id=\"wide-page\">\n        <ThreadsOverviewSettings\n          nonJvm={this.state.nonJvm}\n          tomcat={this.state.tomcat}\n          nonTomcat={this.state.nonTomcat}\n          database={this.state.database}\n          lucene={this.state.lucene}\n          nameFilter={this.state.nameFilter}\n          stackFilter={this.state.stackFilter}\n          onFilterChange={this.handleFilterChange}\n          onRegExpChange={this.handleRegExpChange}\n        />\n\n        <ThreadsOverviewFilteringSummary\n          isFilteredByStack={isFilteredByStack}\n          threadsNumber={threadOverTime.length}\n          threadDumps={filteredDumps}\n        />\n\n        <ThreadsOverviewLegend />\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: ThreadsOverviewPage.NO_THREAD_DUMPS }} />\n          : <ThreadsOverviewTable\n            dates={dates}\n            isFilteredByStack={isFilteredByStack}\n            threadDumps={filteredDumps}\n          />\n        }\n      </div>\n    );\n  }\n\n  private isFilteredByStack = (): boolean => {\n    return this.state.stackFilter.length > 0\n      || this.state.lucene\n      || this.state.database;\n  }\n\n  private filterThreads = (threadDumps: Array<Map<number, Thread>>) => {\n    let filtered = threadDumps;\n    filtered = this.filterByName(filtered, this.state.nameFilter);\n    this.markMatchingStackFilter(filtered, this.state.stackFilter);\n    return filtered;\n  }\n\n  private filterByName = (threadDumps: Array<Map<number, Thread>>, nameFilter: string) => {\n    let userProvided: RegExp;\n    if (nameFilter) {\n      try {\n        userProvided = new RegExp(nameFilter, 'i');\n      } catch {\n        // ignore when user provides invalid RegExp\n      }\n    }\n\n    return threadDumps\n      .filter(threads => this.state.nonJvm ? !this.matchesName(threads, this.jvmRegex) : true)\n      .filter(threads => this.state.tomcat ? this.matchesName(threads, this.tomcatRegex) : true)\n      .filter(threads => this.state.nonTomcat ? !this.matchesName(threads, this.tomcatRegex) : true)\n      .filter(threads => userProvided ? this.matchesName(threads, userProvided) : true);\n  }\n\n  private matchesName(threads: Map<number, Thread>, regex: RegExp): boolean {\n    for (const thread of threads) {\n      if (regex.test(thread[1].name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private markMatchingStackFilter = (threadDumps: Array<Map<number, Thread>>, filter: string) => {\n    this.clearAllMatches(threadDumps);\n\n    const filters = this.getStackTraceFilters(filter);\n    if (filters.length === 0) {\n      return;\n    }\n\n    threadDumps.forEach((threads) => {\n      threads.forEach(thread => this.markIfMatchesAllFilters(thread, filters));\n    });\n  }\n\n  private clearAllMatches = (threadDumps: Array<Map<number, Thread>>) => {\n    threadDumps.forEach((threads) => {\n      threads.forEach((thread) => {\n        thread.matchingFilter = false;\n      });\n    });\n  }\n\n  private getStackTraceFilters = (userProvidedFilter: string): RegExp[] => {\n    const filters: RegExp[] = [];\n\n    if (userProvidedFilter) {\n      try {\n        const userProvided = new RegExp(userProvidedFilter, 'i');\n        filters.push(userProvided);\n      } catch {\n        // ignore when user provides invalid RegExp\n      }\n    }\n\n    if (this.state.lucene) {\n      filters.push(this.luceneRegex);\n    }\n    if (this.state.database) {\n      filters.push(this.databaseRegex);\n    }\n\n    return filters;\n  }\n\n  private markIfMatchesAllFilters = (thread: Thread, filters: RegExp[]) => {\n    for (const filter of filters) {\n      if (!this.matchesStackTraceFilter(thread, filter)) {\n        return;\n      }\n    }\n    thread.matchingFilter = true;\n  }\n\n  private matchesStackTraceFilter = (thread: Thread, filter: RegExp) => {\n    for (const line of thread.stackTrace) {\n      if (filter.test(line)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { withThreadDumps as page } from '../common/withThreadDumps';\nimport './Container.css';\nimport CpuConsumersPage from './CpuConsumers/CpuConsumersPage';\nimport MonitorsPage from './Monitors/MonitorsPage';\nimport Navigation from './Navigation/Navigation';\nimport NavToggle from './Navigation/NavToggle';\nimport NotFoundError from './NotFoundError';\nimport SimilarStacksPage from './SimilarStacks/SimilarStacksPage';\nimport StuckThreadsPage from './StuckThreads/StuckThreadsPage';\nimport SummaryPage from './Summary/SummaryPage';\nimport ThreadsOverviewPage from './ThreadsOverview/ThreadsOverviewPage';\n\ntype State = {\n  navigationOpen: boolean;\n};\n\nclass Container extends React.PureComponent<any, State> {\n\n  public state: State = {\n    navigationOpen: true,\n  };\n\n  public render() {\n    return (\n      <div id=\"container\">\n        <Navigation open={this.state.navigationOpen} />\n\n        <NavToggle open={this.state.navigationOpen} onClick={this.toggleNavigation} />\n\n        <div id=\"content\">\n          <Switch>\n            <Route exact path=\"/:key/summary/\" component={page(SummaryPage)} />\n            <Route exact path=\"/:key/cpu-consumers/\" component={page(CpuConsumersPage)} />\n            <Route exact path=\"/:key/similar-stacks/\" component={page(SimilarStacksPage)} />\n            <Route exact path=\"/:key/stuck-threads/\" component={page(StuckThreadsPage)} />\n            <Route exact path=\"/:key/threads-overview/\" component={page(ThreadsOverviewPage)} />\n            <Route exact path=\"/:key/monitors/\" component={page(MonitorsPage)} />\n            <Route component={page(NotFoundError)} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n\n  private toggleNavigation = () => {\n    this.setState(prevState => ({ navigationOpen: !prevState.navigationOpen }));\n  }\n}\n\nexport default Container;\n","import LoadAverages from './LoadAverage';\nimport MemoryUsage from './MemoryUsage';\nimport ThreadCpuUsage from './ThreadCpuUsage';\n\nexport default class CpuUsage {\n  public runningProcesses!: number;\n  public loadAverages!: LoadAverages | null;\n  public memoryUsage!: MemoryUsage;\n  public threadCpuUsages!: ThreadCpuUsage[];\n  private epoch: number | null;\n\n  constructor(timestamp: string) {\n    // timestamp is in the format of hh:mm:ss, e.g. 09:50:49\n    const hours = parseInt(timestamp.substring(0, 2), 10);\n    const minutes = parseInt(timestamp.substring(3, 5), 10);\n    const seconds = parseInt(timestamp.substring(6), 10);\n\n    this.epoch = hours * 3600000 + minutes * 60000 + seconds * 1000;\n  }\n\n  public getEpoch = () => {\n    return this.epoch;\n  }\n}\n","export default class LoadAverages {\n  public oneMinute!: number;\n  public fiveMinutes!: number;\n  public fifteenMinutes!: number;\n}\n","export default class MemoryUsage {\n  public memoryTotal!: number;\n  public memoryUsed!: number;\n  public memoryFree!: number;\n  public swapTotal!: number;\n  public swapUsed!: number;\n  public swapFree!: number;\n}\n","export default class ThreadCpuUsage {\n  public id!: number;\n  public cpuUsage!: number;\n  public runningFor!: string;\n}\n","export function matchOne(pattern: RegExp, str?: string): string {\n  const execArray: RegExpExecArray | null = pattern.exec(str || '');\n  return execArray ? execArray[1] : '';\n}\n\nexport function matchMultipleGroups(pattern: RegExp, str?: string): string[] {\n  const execArray: RegExpExecArray | null = pattern.exec(str || '');\n  return execArray != null ? execArray.slice(1) : [];\n}\n\n// any RegExp passed here needs to have the 'g' flag, otherwise it'll cause an infinite loop!\nexport function matchMultipleTimes(pattern: RegExp, str?: string): string[] {\n  const matches: string[] = [];\n\n  let execArray: RegExpExecArray | null = pattern.exec(str || '');\n  while (execArray != null) {\n    matches.push(execArray[1]);\n    execArray = pattern.exec(str || '');\n  }\n\n  return matches;\n}\n","import CpuUsage from '../types/CpuUsage';\nimport LoadAverages from '../types/LoadAverage';\nimport MemoryUsage from '../types/MemoryUsage';\nimport ThreadCpuUsage from '../types/ThreadCpuUsage';\nimport { matchMultipleGroups, matchMultipleTimes, matchOne } from './RegExpUtils';\n\nexport const CPU_USAGE_TIMESTAMP_PATTERN: RegExp = /^top - ([0-9]{2}:[0-9]{2}:[0-9]{2})/;\nconst LOAD_AVERAGES_PATTERN: RegExp = / load average: ([0-9\\.]+), ([0-9\\.]+), ([0-9\\.]+)/;\nconst RUNNING_PROCESSES_PATTERN: RegExp = /([0-9\\.]+) running/;\nconst TOTAL_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k?[ +]total/;\nconst USED_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k? used/;\nconst FREE_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k? free/;\nconst COLUMN_MATCHER: RegExp = /([^\\s]+) +/g;\n\nexport type ParseCpuUsageCallback = (cpuUsage: CpuUsage) => void;\n\nexport default class CpuUsageParser {\n\n  public static parseCpuUsage(lines: string[], callback: ParseCpuUsageCallback) {\n    const cpuUsage: CpuUsage = new CpuUsage(matchOne(CPU_USAGE_TIMESTAMP_PATTERN, lines[0]));\n\n    // top - 10:25:00 up 3 days, 13:14,  1 user,  load average: 90.75, 97.79, 86.84\n    cpuUsage.loadAverages = CpuUsageParser.parseLoadAverages(lines.shift());\n\n    // Tasks: 466 total,   4 running, 462 sleeping,   0 stopped,   0 zombie\n    cpuUsage.runningProcesses = CpuUsageParser.parseRunningProcesses(lines.shift());\n\n    // Cpu(s): 11.4%us,  0.5%sy,  0.0%ni, 87.9%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st\n    lines.shift(); // ignoring as it's not a useful data for us\n\n    // Mem:  65846052k total, 57542808k used,  8303244k free,  1200960k buffers\n    // Swap:  2097148k total,        0k used,  2097148k free, 23876776k cached\n    cpuUsage.memoryUsage = CpuUsageParser.parseMemoryUsage(lines.shift(), lines.shift());\n\n    //\n    // PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n    // 13038 wrtjava   20   0 53.0g  26g 1.2g S 48.6 41.6  15:04.56 java\n    // 18393 wrtjava   20   0 53.0g  26g 1.2g S  9.7 41.6   4:08.78 java\n    // 19084 wrtjava   20   0 53.0g  26g 1.2g S  9.7 41.6   3:07.71 java\n    //  ... until <EOT>\n    cpuUsage.threadCpuUsages = CpuUsageParser.parseThreadCpuUsages(lines);\n\n    callback(cpuUsage);\n  }\n\n  private static parseLoadAverages(line?: string): LoadAverages | null {\n    const matches: string[] = matchMultipleGroups(LOAD_AVERAGES_PATTERN, line);\n\n    if (matches.length !== 3) {\n      console.error(`Unable to parse load averages from line: ${line}`);\n      return null;\n    }\n\n    const loadAverages = new LoadAverages();\n    loadAverages.oneMinute = parseFloat(matches[0]);\n    loadAverages.fiveMinutes = parseFloat(matches[1]);\n    loadAverages.fifteenMinutes = parseFloat(matches[2]);\n    return loadAverages;\n  }\n\n  private static parseRunningProcesses(line?: string): number {\n    return parseInt(matchOne(RUNNING_PROCESSES_PATTERN, line), 10);\n  }\n\n  private static parseMemoryUsage(line1?: string, line2?: string): MemoryUsage {\n    const memoryUsage: MemoryUsage = new MemoryUsage();\n\n    memoryUsage.memoryTotal = parseInt(matchOne(TOTAL_MEMORY_PATTERN, line1), 10);\n    memoryUsage.memoryUsed = parseInt(matchOne(USED_MEMORY_PATTERN, line1), 10);\n    memoryUsage.memoryFree = parseInt(matchOne(FREE_MEMORY_PATTERN, line1), 10);\n\n    memoryUsage.swapTotal = parseInt(matchOne(TOTAL_MEMORY_PATTERN, line2), 10);\n    memoryUsage.swapUsed = parseInt(matchOne(USED_MEMORY_PATTERN, line2), 10);\n    memoryUsage.swapFree = parseInt(matchOne(FREE_MEMORY_PATTERN, line2), 10);\n\n    return memoryUsage;\n  }\n\n  private static parseThreadCpuUsages(lines: string[]): ThreadCpuUsage[] {\n    const threadCpuUsages: ThreadCpuUsage[] = [];\n\n    for (let i = 2; i < lines.length; i++) {\n      const line: string = lines[i];\n      if (!line) continue;\n\n      const columns: string[] = matchMultipleTimes(COLUMN_MATCHER, line);\n      if (columns.length < 11) {\n        console.error(`Unable to parse thread cpu usage info from line: ${line}`);\n        continue;\n      }\n\n      const threadCpuUsage: ThreadCpuUsage = new ThreadCpuUsage();\n      threadCpuUsage.id = parseInt(columns[0], 10);\n      threadCpuUsage.cpuUsage = parseFloat(columns[8]);\n      threadCpuUsage.runningFor = columns[10];\n      threadCpuUsages.push(threadCpuUsage);\n    }\n\n    return threadCpuUsages;\n  }\n}\n","import Thread from './Thread';\n\nexport default class Lock {\n  public id!: string;\n  public className!: string;\n  public owner: Thread | null = null;\n  public waiting: Thread[] = [];\n}\n","import Lock from '../types/Lock';\nimport Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\nimport ThreadStatus from '../types/ThreadStatus';\nimport { matchMultipleGroups, matchOne } from './RegExpUtils';\n\nconst THREAD_HEADER_PREFIX: string = '\"';\n\n// tslint:disable:max-line-length\nexport const THREAD_DUMP_DATE_PATTERN: RegExp = /^([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})\\r?$/;\nconst NAME_PATTERN: RegExp = /^\\\"(.*)\\\" /;\nconst NID_PATTERN: RegExp = / nid=([0-9a-fx,]+)/;\nconst TID_PATTERN: RegExp = / tid=([0-9a-fx,]+)/;\nconst FRAME_PATTERN: RegExp = /^\\s+at (.*)/;\nconst THREAD_STATE_PATTERN: RegExp = /^\\s*java.lang.Thread.State: (.*)/;\nconst SYNCHRONIZATION_STATUS_PATTERN: RegExp = /^\\s+- (.*?) +<([x0-9a-f]+)> \\(a (.*)\\)/;\nconst LOCKED_OWNABLE_SYNCHRONIZERS_PATTERN: RegExp = /^\\s+Locked ownable synchronizers:/;\nconst NONE_HELD_PATTERN: RegExp = /^\\s+- None/;\nconst HELD_LOCK_PATTERN: RegExp = /^\\s+- <([x0-9a-f]+)> \\(a (.*)\\)/;\nconst JNI_REFERENCES_PATTERN: RegExp = /^\\s?JNI global references: (\\d+)/;\n// tslint:enable:max-line-length\n\nexport type ParseThreadDumpCallback = (threadDump: ThreadDump) => void;\n\nexport default class ThreadDumpParser {\n\n  public static parseThreadDump(lines: string[], callback: ParseThreadDumpCallback) {\n    const threadDump = new ThreadDump(matchOne(THREAD_DUMP_DATE_PATTERN, lines.shift() as string));\n    lines.forEach(line => ThreadDumpParser.parseLine(line, threadDump));\n    ThreadDumpParser.identifyAnonymousSynchronizers(threadDump.threads);\n\n    callback(threadDump);\n  }\n\n  private static currentThread: Thread;\n\n  private static parseLine(line: string, threadDump: ThreadDump): void {\n    if (line.startsWith(THREAD_HEADER_PREFIX)) {\n      ThreadDumpParser.parseThreadHeader(line, threadDump);\n    } else if (line) {\n      ThreadDumpParser.parseStackLine(line, threadDump);\n    }\n  }\n\n  private static parseThreadHeader(header: string, threadDump: ThreadDump): void {\n    const name = matchOne(NAME_PATTERN, header).trim();\n    // Depending on the way thread dumps were made, they can either have NID or TID\n    // We prefer NID, as it allows linking thread dumps with cpu_usage files\n    const nid = parseInt(matchOne(NID_PATTERN, header), 16);\n    const tid = parseInt(matchOne(TID_PATTERN, header), 16);\n    const id = nid !== 0 ? nid : tid;\n\n    ThreadDumpParser.currentThread = new Thread(id, name, threadDump.getEpoch());\n    threadDump.threads.push(ThreadDumpParser.currentThread);\n  }\n\n  private static parseStackLine(line: string, threadDump: ThreadDump): void {\n    if (!ThreadDumpParser.currentThread) {\n      return;\n    }\n\n    const frame: string = matchOne(FRAME_PATTERN, line);\n    if (frame) {\n      ThreadDumpParser.currentThread.stackTrace.push(frame);\n      return;\n    }\n\n    const threadState: string = matchOne(THREAD_STATE_PATTERN, line);\n    if (threadState) {\n      ThreadDumpParser.currentThread.status = ThreadDumpParser.stringToThreadStatus(threadState);\n      return;\n    }\n\n    const synchronizationStatus = matchMultipleGroups(SYNCHRONIZATION_STATUS_PATTERN, line);\n    if (synchronizationStatus && synchronizationStatus.length === 3) {\n      const state: string = synchronizationStatus[0];\n      const lockId: string = synchronizationStatus[1];\n      const className: string = synchronizationStatus[2];\n\n      switch (state) {\n        case 'waiting on':\n        case 'parking to wait for':\n        case 'waiting to lock':\n          let lock: Lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n          lock.waiting.push(ThreadDumpParser.currentThread);\n          ThreadDumpParser.currentThread.lockWaitingFor = lock;\n          return;\n\n        case 'locked':\n          if (ThreadDumpParser.currentThread.lockWaitingFor\n            && ThreadDumpParser.currentThread.lockWaitingFor.id === lockId) {\n            // lock is released while waiting for the notification\n            return;\n          }\n          lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n          lock.owner = ThreadDumpParser.currentThread;\n          ThreadDumpParser.currentThread.locksHeld.push(lock);\n          ThreadDumpParser.currentThread.classicalLocksHeld.push(lock);\n          return;\n\n        case 'eliminated':\n          // redundant lock that has been removed in the bytecode - we don't care about those\n          return;\n\n        default:\n          console.warn(`Unknown synchronziation status: ${line}`);\n          return;\n      }\n    }\n\n    const lockHeld: string[] = matchMultipleGroups(HELD_LOCK_PATTERN, line);\n    if (lockHeld && lockHeld.length === 2) {\n      const lockId: string = lockHeld[0];\n      const className: string = lockHeld[1];\n\n      const lock: Lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n      lock.owner = ThreadDumpParser.currentThread;\n      ThreadDumpParser.currentThread.locksHeld.push(lock);\n      return;\n    }\n\n    // ignore those lines, as they provide no useful data\n    if (matchOne(LOCKED_OWNABLE_SYNCHRONIZERS_PATTERN, line)\n      || matchOne(NONE_HELD_PATTERN, line)\n      || matchOne(JNI_REFERENCES_PATTERN, line)) {\n      return;\n    }\n\n    console.warn(`Unable to parse line: ${line}`);\n  }\n\n  private static identifyAnonymousSynchronizers(threads: Thread[]): void {\n    // sometimes threads wait for notification, but the thread dump doesn't say on which object\n    // this function guesses it's the last hit classical lock\n    const validStatuses = [ThreadStatus.BLOCKED, ThreadStatus.TIMED_WAITING, ThreadStatus.WAITING];\n\n    threads\n      .filter(thread => !thread.lockWaitingFor)\n      .filter(thread => thread.status !== undefined && validStatuses.includes(thread.status))\n      .forEach((thread) => {\n        const lock: Lock = thread.classicalLocksHeld[0];\n        if (!lock) {\n          // this can happen if thread is TIMED_WAITING due to Thread.sleep()\n          return;\n        }\n        lock.owner = null;\n        lock.waiting.push(thread);\n\n        thread.lockWaitingFor = lock;\n        thread.locksHeld.splice(thread.locksHeld.indexOf(lock), 1);\n        thread.classicalLocksHeld.splice(thread.classicalLocksHeld.indexOf(lock), 1);\n      });\n  }\n\n  private static stringToThreadStatus(status: string): ThreadStatus {\n    const key = status as keyof typeof ThreadStatus;\n    const threadStatus = ThreadStatus[key];\n    if (threadStatus) {\n      return threadStatus;\n    }\n\n    if (status.startsWith('BLOCKED')) {\n      return ThreadStatus.BLOCKED;\n    }\n    if (status.startsWith('WAITING')) {\n      return ThreadStatus.WAITING;\n    }\n    if (status.startsWith('TIMED_WAITING')) {\n      return ThreadStatus.TIMED_WAITING;\n    }\n\n    return ThreadStatus.UNKNOWN;\n  }\n\n  private static getOrCreateLock(locks: Lock[], id: string, className: string): Lock {\n    for (const existingLock of locks) {\n      if (existingLock.id === id) {\n        return existingLock;\n      }\n    }\n\n    const newLock: Lock = new Lock();\n    newLock.id = id;\n    newLock.className = className;\n\n    locks.push(newLock);\n    return newLock;\n  }\n}\n","import CpuUsage from '../types/CpuUsage';\nimport Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\nimport CpuUsageParser, { CPU_USAGE_TIMESTAMP_PATTERN } from './CpuUsageParser';\nimport { matchOne } from './RegExpUtils';\nimport ThreadDumpParser, { THREAD_DUMP_DATE_PATTERN } from './ThreadDumpParser';\n\nconst MAX_TIME_DIFFERENCE_ALLOWED: number = 10000;\n\nexport default class Parser {\n  private cpuUsages: CpuUsage[] = [];\n  private threadDumps: ThreadDump[] = [];\n\n  private filesToParse: number = 0;\n  private onFilesParsed: (threadDumps: ThreadDump[]) => void;\n\n  constructor(onFilesParsed: (threadDumps: ThreadDump[]) => void) {\n    this.onFilesParsed = onFilesParsed;\n  }\n\n  public parseFiles = (uploaded: File[]) => {\n    this.cpuUsages = [];\n    this.threadDumps = [];\n    this.filesToParse = 0;\n\n    this.parse(uploaded);\n  }\n\n  private parse(files: File[]) {\n    // if only one file was uploaded, assume that it's a set of dumps\n    if (files.length === 1 && !files[0].name.includes('cpu')) {\n      this.parseSingleFile(files[0]);\n    } else {\n      this.parseMultipleFiles(files);\n    }\n  }\n\n  private parseSingleFile(file: File) {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const lines: string[] = (reader.result as string).split('\\n');\n\n      let line = lines.shift();\n      let currentDump: string[] = [];\n      while (line !== undefined) {\n        // check if it's the beginning of another thread dump\n        if (matchOne(THREAD_DUMP_DATE_PATTERN, line)) {\n          this.filesToParse++;\n          ThreadDumpParser.parseThreadDump(currentDump.slice(), this.onParsedThreadDump);\n          currentDump = [line];\n        } else {\n          currentDump.push(line);\n        }\n\n        line = lines.shift();\n      }\n\n      ThreadDumpParser.parseThreadDump(currentDump, this.onParsedThreadDump);\n    };\n    this.filesToParse++;\n    reader.readAsText(file);\n  }\n\n  private parseMultipleFiles(files: File[]) {\n    this.filesToParse = this.filesToParse + files.length;\n\n    for (const file of files) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const lines: string[] = (reader.result as string).split('\\n');\n        const firstLine = lines[0];\n\n        if (!firstLine) {\n          return;\n        }\n\n        if (matchOne(CPU_USAGE_TIMESTAMP_PATTERN, firstLine)) {\n          CpuUsageParser.parseCpuUsage(lines, this.onParsedCpuUsage);\n        } else if (matchOne(THREAD_DUMP_DATE_PATTERN, firstLine)) {\n          ThreadDumpParser.parseThreadDump(lines, this.onParsedThreadDump);\n        } else {\n          this.filesToParse = this.filesToParse - 1;\n        }\n      };\n\n      reader.readAsText(file);\n    }\n  }\n\n  private onParsedCpuUsage = (cpuUsage: CpuUsage) => {\n    this.cpuUsages.push(cpuUsage);\n    this.filesToParse = this.filesToParse - 1;\n    this.checkCompletion();\n  }\n\n  private onParsedThreadDump = (threadDump: ThreadDump) => {\n    if (threadDump.threads.length > 0) {\n      this.threadDumps.push(threadDump);\n    }\n    this.filesToParse = this.filesToParse - 1;\n    this.checkCompletion();\n  }\n\n  private checkCompletion() {\n    if (!this.filesToParse) {\n      this.groupCpuUsagesWithThreadDumps();\n      this.sortThreadDumps();\n      this.onFilesParsed(this.threadDumps);\n    }\n  }\n\n  private groupCpuUsagesWithThreadDumps() {\n    this.cpuUsages\n      .filter(cpuUsage => cpuUsage.getEpoch())\n      .forEach((cpuUsage) => {\n        const threadDump: ThreadDump = this.findCorrespondingThreadDump(cpuUsage);\n        this.groupCpuUsageWithThreadDump(threadDump, cpuUsage);\n      });\n  }\n\n  private sortThreadDumps() {\n    this.threadDumps.sort((t1, t2) => {\n      if (t1.getEpoch() === t2.getEpoch()) {\n        return 0;\n      }\n      if (!t1.getEpoch()) {\n        return -1;\n      }\n      if (!t2.getEpoch()) {\n        return 1;\n      }\n      return (t1.getEpoch() as number) - (t2.getEpoch() as number);\n    });\n  }\n\n  private findCorrespondingThreadDump(cpuUsage: CpuUsage): ThreadDump {\n    const AN_HOUR = 60 * 60 * 1000;\n    const cpuUsageEpoch = cpuUsage.getEpoch();\n    let closest: ThreadDump | null = null;\n    let smallestDiff: number = MAX_TIME_DIFFERENCE_ALLOWED;\n\n    this.threadDumps\n      .filter(threadDump => threadDump.getEpoch())\n      .forEach((threadDump) => {\n        const dumpEpoch = threadDump.getEpoch();\n\n        if (!dumpEpoch || !cpuUsageEpoch) {\n          return;\n        }\n\n        const diff = Math.abs((dumpEpoch % AN_HOUR) - (cpuUsageEpoch % AN_HOUR));\n\n        if (diff < smallestDiff) {\n          smallestDiff = diff;\n          closest = threadDump;\n        }\n      });\n\n    if (closest == null) {\n      closest = new ThreadDump(null);\n      this.threadDumps.push(closest);\n    }\n\n    return closest;\n  }\n\n  private groupCpuUsageWithThreadDump(threadDump: ThreadDump, cpuUsage: CpuUsage): void {\n    threadDump.loadAverages = cpuUsage.loadAverages;\n    threadDump.runningProcesses = cpuUsage.runningProcesses;\n    threadDump.memoryUsage = cpuUsage.memoryUsage;\n\n    cpuUsage.threadCpuUsages.forEach((cpu) => {\n      const thread = this.findThreadWithId(threadDump, cpu.id);\n\n      if (thread) {\n        thread.cpuUsage = cpu.cpuUsage;\n        thread.runningFor = cpu.runningFor;\n      }\n    });\n  }\n\n  private findThreadWithId(threadDump: ThreadDump, id: number): Thread | null {\n    for (const thread of threadDump.threads) {\n      if (thread.id === id) {\n        return thread;\n      }\n    }\n    return null;\n  }\n}\n","import React from 'react';\nimport { ISSUE_TRACKER_LINK, SOURCE_CODE_LINK } from '../Navigation/Navigation';\nimport OutboundLink from '../Navigation/OutboundLink';\n\n// tslint:disable:max-line-length\nconst header = 'For the full experience, you should gather thread dumps along with <i>top</i> outputs.';\nconst GATHER_DATA_LINK = 'https://github.com/drauf/watson/blob/master/README.md#gathering-thread-dumps';\nconst disclaimer = 'Watson works fully offline. No files will leave your machine.';\n// tslint:enable:max-line-length\n\nconst stopPropagation = (event: React.MouseEvent) => {\n  // prevent opening the dropzone popup when clicking on the navigation links\n  event.stopPropagation();\n};\n\nconst DropzoneGuide: React.SFC = () => (\n  <div id=\"dropzone-guide\" onClick={stopPropagation}>\n    <h6 dangerouslySetInnerHTML={{ __html: header }} />\n    <span>\n      See: <OutboundLink to={GATHER_DATA_LINK}>\n        How to gather data\n        </OutboundLink>\n    </span>\n\n    <p dangerouslySetInnerHTML={{ __html: disclaimer }} />\n\n    <ul id=\"dropzone-links\">\n      <li>\n        <OutboundLink to={ISSUE_TRACKER_LINK}>\n          Issue tracker\n        </OutboundLink>\n      </li>\n      <li>\n        <OutboundLink to={SOURCE_CODE_LINK}>\n          Source code\n        </OutboundLink>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default DropzoneGuide;\n","import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { setThreadDumps } from '../../common/threadDumpsStorageService';\nimport Parser from '../../parser/Parser';\nimport ThreadDump from '../../types/ThreadDump';\nimport DropzoneGuide from './DropzoneGuide';\nimport './FullPageDropzone.css';\n\nclass FullPageDropzone extends React.PureComponent<RouteComponentProps> {\n  public render = () => (\n    <Dropzone multiple={true} onDrop={this.onDrop}>\n      {({ getRootProps, getInputProps, isDragActive }) => (\n        <div id=\"dropzone\" {...getRootProps()}>\n          <input {...getInputProps()} />\n          {\n            isDragActive ?\n              <h4>Drop files here...</h4> :\n              <h4>Drop the catalog here, or click to select files to load.</h4>\n          }\n          <DropzoneGuide />\n        </div>\n      )}\n    </Dropzone>\n  )\n\n  private onDrop = (files: File[]): void => {\n    const parser = new Parser(this.onParsed);\n    parser.parseFiles(files);\n  }\n\n  private onParsed = (threadDumps: ThreadDump[]): void => {\n    const key = setThreadDumps(threadDumps);\n    if (threadDumps.some(dump => !!dump.loadAverages)) {\n      this.props.history.push(`/${key}/summary/`);\n    } else {\n      this.props.history.push(`/${key}/similar-stacks/`);\n    }\n  }\n}\n\nexport default withRouter(FullPageDropzone);\n","import React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport './App.css';\nimport Container from './components/Container';\nimport FullPageDropzone from './components/FullPageDropzone/FullPageDropzone';\n\nconst App: React.SFC<RouteComponentProps> = () => (\n  <Switch>\n    <Route exact path=\"/\" component={FullPageDropzone} />\n    <Route path=\"/:key\" component={Container} />\n  </Switch>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { clearOldThreadDumps } from './common/threadDumpsStorageService';\nimport './index.css';\n\nclearOldThreadDumps();\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}