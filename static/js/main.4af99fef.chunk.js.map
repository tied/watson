{"version":3,"sources":["common/threadDumpsStorageService.tsx","common/withThreadDumps.tsx","common/getThreadsOverTime.tsx","components/PageWithSettings/PageWithSettings.tsx","types/ThreadStatus.tsx","components/CpuConsumers/CpuConsumer.tsx","types/Thread.tsx","components/ThreadDetails/WindowPortal.tsx","components/ThreadDetails/ThreadDetailsWindow.tsx","components/CpuConsumers/CpuConsumersPage.tsx","components/CpuConsumers/CpuConsumerSingleUsage.tsx","components/CpuConsumers/CpuConsumerItem.tsx","components/CpuConsumers/CpuConsumersList.tsx","components/CpuConsumers/CpuConsumersSettings.tsx","types/ThreadDump.tsx","components/Monitors/Monitor.tsx","components/Monitors/MonitorOverTime.tsx","components/Monitors/MonitorOwner.tsx","components/Monitors/WaitingListItem.tsx","components/Monitors/WaitingList.tsx","components/Monitors/MonitorItem.tsx","components/Monitors/MonitorOverTimeItem.tsx","components/Filter/Filter.tsx","components/Monitors/MonitorsSettings.tsx","components/Monitors/MonitorsPage.tsx","components/Navigation/Navigation.tsx","components/Navigation/NavToggle.tsx","components/NotFoundError.tsx","common/isIdleThread.tsx","components/SimilarStacks/StackTrace.tsx","components/SimilarStacks/ThreadSummary.tsx","components/SimilarStacks/GroupDetails.tsx","components/SimilarStacks/SimilarStacksGroup.tsx","components/SimilarStacks/SimilarStacksSettings.tsx","components/SimilarStacks/SimilarStacksPage.tsx","components/StuckThreads/ThreadDetails.tsx","components/StuckThreads/GroupDetails.tsx","components/StuckThreads/StuckThreadsGroup.tsx","components/StuckThreads/StuckThreadsSettings.tsx","components/StuckThreads/StuckThreadsPage.tsx","components/Summary/LoadAveragesChart.tsx","components/Summary/LabelFormatter.tsx","components/Summary/MemoryUsageChart.tsx","components/Summary/RunningProcessesChart.tsx","components/Summary/SwapUsageChart.tsx","components/Summary/SummaryPage.tsx","components/ThreadsOverview/ThreadsOverviewFilteringSummary.tsx","components/ThreadsOverview/ThreadsOverviewLegend.tsx","components/ThreadsOverview/ThreadsOverviewSettings.tsx","components/ThreadsOverview/ThreadOverviewItem.tsx","components/ThreadsOverview/ThreadOverviewRow.tsx","components/ThreadsOverview/ThreadsOverviewTable.tsx","components/ThreadsOverview/ThreadsOverviewPage.tsx","components/Container.tsx","types/CpuUsage.tsx","types/LoadAverage.tsx","types/MemoryUsage.tsx","types/ThreadCpuUsage.tsx","parser/RegExpUtils.tsx","parser/CpuUsageParser.tsx","types/Lock.tsx","parser/ThreadDumpParser.tsx","parser/Parser.tsx","components/FullPageDropzone/DropzoneGuide.tsx","components/FullPageDropzone/FullPageDropzone.tsx","App.tsx","index.tsx","common/withTracker.tsx"],"names":["currentThreadDumps","lastUsedStorage","localforage","createInstance","name","threadDumpsStorage","getThreadDumpsAsync","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","key","wrap","_context","prev","next","undefined","abrupt","getFromStorage","stop","_x","apply","this","arguments","setThreadDumps","parsedDumps","stringified","stringify","SparkMD5","hash","setItem","clearCurrentThreadDump","_callee2","fromStorage","_context2","getItem","sent","Date","valueOf","parse","withThreadDumps","WrappedComponent","_React$Component","WithThreadDumps","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","promisePending","threadDumps","scrollToTop","contentDiv","document","getElementById","scrollTop","match","params","then","length","history","push","setState","inherits","createClass","value","react_default","createElement","id","assign","React","Component","getThreadsOverTime","threadsOverTime","Map","forEach","threadDump","dumpNumber","threads","thread","threadOccurences","get","set","Array","from","values","sort","t1","t2","getThreadName","localeCompare","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","slicedToArray","err","return","PageWithSettings","PAGE_NAME","handleFilterChange","event","target","isChecked","checked","newState","defineProperty","ReactGA","action","concat","category","label","handleIntegerChange","parseInt","handleRegExpChange","PureComponent","NO_CPU_INFOS","NO_CPU_AND_THREADS_PAIR","NO_THREAD_DUMPS","N0_THREADS_MATCHING","N0_MONITORS_MATCHING","ThreadStatus","CpuConsumer","calculatedValue","Thread","epoch","status","cpuUsage","runningFor","lockWaitingFor","locksHeld","classicalLocksHeld","stackTrace","matchingFilter","getFormattedTime","toLocaleTimeString","WindowPortal","externalWindow","container","windowFeatures","closeAllExternalWindows","windows","external","closed","close","className","sourceDoc","targetDoc","styleSheets","sheet","styleSheet","cssRules","newStyleEl","cssRule","appendChild","createTextNode","cssText","head","href","newLinkEl","rel","window","onunload","open","title","windowTitle","body","copyStyles","onUnload","_this2","filter","ext","ReactDOM","createPortal","children","CpuConsumersMode","renderName","renderStatus","toLocaleUpperCase","RUNNABLE","Fragment","toFixed","renderLocksHeld","map","lock","join","renderLockWaitingFor","owner","renderStackTrace","readOnly","ThreadDetailsWindow","WindowPortal_WindowPortal","CpuConsumerSingleUsage","showDetails","handleClick","prevState","handleUnload","padding","repeat","onClick","components_ThreadDetails_ThreadDetailsWindow","formatConsumerHeader","threadName","CpuConsumerItem","dumpsNumber","consumer","i","index","CpuConsumerSingleUsage_CpuConsumerSingleUsage","CpuConsumersList","limit","consumers","slice","CpuConsumers_CpuConsumerItem","CpuConsumersSettings","mode","onModeChange","onLimitChange","Mean","type","onChange","Median","Max","min","max","CpuConsumersPage","handleModeChange","calculateCpuUsages","CpuConsumers_CpuConsumersSettings","some","dump","loadAverages","CpuConsumers_CpuConsumersList","dangerouslySetInnerHTML","__html","calculationMode","calculateUsageFor","b","threadsMap","usage","reduce","reduceSum","calculateMedian","reduceMax","sum","currentThread","maxValue","lowMiddle","Math","floor","highMiddle","ceil","ThreadDump","date","runningProcesses","memoryUsage","locks","getEpoch","hours","substring","minutes","seconds","Monitor","time","javaClass","waiting","MonitorOverTime","waitingSum","monitors","MonitorOwner","showOwner","stopPropagation","monitor","WaitingListItem","WaitingList","expanded","toggleExpand","collapsable","THREADS_TO_SHOW_WHEN_COLLAPSED","WaitingListItem_WaitingListItem","MonitorItem","lastIndexOf","MonitorOwner_MonitorOwner","WaitingList_WaitingList","MonitorOverTimeItem","collapse","toggleCollapse","item","Monitors_MonitorItem","Filter","displayName","MonitorsSettings","withOwner","withoutIdle","withoutOwner","onFilterChange","components_Filter_Filter","MonitorsPage","getMonitorsOverTime","monitorsOverTime","monitorOverTime","m1","m2","filterMonitors","filtered","isQueueThread","hasAnyOwner","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Monitors_MonitorsSettings","MonitorOverTimeItem_MonitorOverTimeItem","Navigation","onClear","react_router_dom","to","esm","eventLabel","withRouter","NavToggle","NotFoundError","isIdleThread","includes","StackTrace","linesToConsider","stack","line","ThreadSummary","showLockOwner","toggleDetails","toggleLockOwner","getLocksHeldString","locksReducer","lockOwner","waitingForRender","console","error","accumulator","lockId","GroupDetails","getStackTrace","threadGroup","sortedByName","ThreadSummary_ThreadSummary","SimilarStacks_StackTrace","SimilarStacksGroup","toggleGroup","GroupDetails_GroupDetails","SimilarStacksSettings","minimalGroupSize","onIntegerChange","SimilarStacksPage","threadGroups","groupByStackTrace","group","SimilarStacks_SimilarStacksSettings","SimilarStacksGroup_SimilarStacksGroup","_this3","grouped","similarStacks","toString","ThreadDetails","maxDifferingLines","ThreadDetails_ThreadDetails","StuckThreadsGroup","StuckThreads_GroupDetails","StuckThreadsSettings","minClusterSize","StuckThreadsPage","filterThreads","filterThread","threadOverTime","buildClusters","clusters","getClustersFromThread","c","c1","c2","currentCluster","previous","current","areThreadsSimilarEnough","stack1","stack2","abs","StuckThreads_StuckThreadsSettings","StuckThreadsGroup_StuckThreadsGroup","LoadAveragesChart","data","fifteenMinutes","fiveMinutes","oneMinute","es6","width","height","dataKey","stroke","strokeDasharray","convert","round","labelFormatter","COLORS","MemoryUsageChart","memoryUsages","freeMemoryAvg","memoryFree","memoryUsed","nameKey","_","fill","formatter","RunningProcessesChart","SwapUsageChart","swapFree","swapUsed","SummaryPage","render","Summary_MemoryUsageChart","Summary_SwapUsageChart","Summary_LoadAveragesChart","Summary_RunningProcessesChart","matchingInGroupCounter","currentGroup","matchingCounter","nonEmptyCounter","ThreadsOverviewFilteringSummary","isFilteredByStack","threadsNumber","matching","total","percentage","ThreadsOverviewLegend","ThreadsOverviewSettings","nonJvm","tomcat","nonTomcat","database","lucene","nameFilter","stackFilter","onRegExpChange","ThreadOverviewItem","isFiltered","isMatchingFilter","UNKNOWN","ThreadOverviewRow","threadsPadded","firstThread","find","ThreadOverviewItem_ThreadOverviewItem","ThreadsOverview","dates","ThreadsOverview_ThreadOverviewRow","ThreadsOverviewPage","jvmRegex","tomcatRegex","databaseRegex","luceneRegex","filterByName","markMatchingStackFilter","userProvided","RegExp","_unused","matchesName","clearAllMatches","filters","getStackTraceFilters","markIfMatchesAllFilters","userProvidedFilter","_unused2","matchesStackTraceFilter","test","filteredDumps","ThreadsOverview_ThreadsOverviewSettings","ThreadsOverview_ThreadsOverviewFilteringSummary","ThreadsOverview_ThreadsOverviewLegend","ThreadsOverviewTable","regex","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Container","navigationOpen","toggleNavigation","isOpen","components_Navigation_Navigation","components_Navigation_NavToggle","react_router","exact","path","component","page","CpuUsage","timestamp","threadCpuUsages","LoadAverages","MemoryUsage","memoryTotal","swapTotal","ThreadCpuUsage","matchOne","pattern","str","execArray","exec","matchMultipleGroups","matchMultipleTimes","matches","CPU_USAGE_TIMESTAMP_PATTERN","LOAD_AVERAGES_PATTERN","RUNNING_PROCESSES_PATTERN","TOTAL_MEMORY_PATTERN","USED_MEMORY_PATTERN","FREE_MEMORY_PATTERN","COLUMN_MATCHER","CpuUsageParser","lines","callback","parseLoadAverages","shift","parseRunningProcesses","parseMemoryUsage","parseThreadCpuUsages","parseFloat","line1","line2","columns","threadCpuUsage","Lock","THREAD_DUMP_DATE_PATTERN","NAME_PATTERN","NID_PATTERN","TID_PATTERN","FRAME_PATTERN","THREAD_STATE_PATTERN","SYNCHRONIZATION_STATUS_PATTERN","LOCKED_OWNABLE_SYNCHRONIZERS_PATTERN","NONE_HELD_PATTERN","HELD_LOCK_PATTERN","JNI_REFERENCES_PATTERN","ThreadDumpParser","parseLine","identifyAnonymousSynchronizers","startsWith","parseThreadHeader","parseStackLine","header","trim","nid","tid","frame","threadState","stringToThreadStatus","synchronizationStatus","getOrCreateLock","warn","lockHeld","validStatuses","BLOCKED","TIMED_WAITING","WAITING","splice","indexOf","threadStatus","existingLock","newLock","Parser","onFilesParsed","cpuUsages","filesToParse","parsingStarted","now","parseFiles","uploaded","onParsedCpuUsage","checkCompletion","onParsedThreadDump","files","parseMultipleFiles","parseSingleFile","file","reader","FileReader","onload","result","split","currentDump","parseThreadDump","readAsText","_loop","firstLine","parseCpuUsage","fireAnalytics","groupCpuUsagesWithThreadDumps","sortThreadDumps","timing","variable","_this4","findCorrespondingThreadDump","groupCpuUsageWithThreadDump","cpuUsageEpoch","closest","smallestDiff","dumpEpoch","diff","_this5","cpu","findThreadWithId","DropzoneGuide","FullPageDropzone","es","multiple","onDrop","getRootProps","getInputProps","isDragActive","FullPageDropzone_DropzoneGuide","onParsed","App","initialize","gaOptions","siteSpeedSampleRate","sevenDaysAgo","setDate","getDate","iterate","removeItem","clearOldThreadDumps","basename","process","options","useEffect","location","pathname","objectSpread","pageview","withTracker"],"mappings":"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","file":"static/js/main.4af99fef.chunk.js","sourcesContent":["import { parse, stringify } from 'flatted';\nimport localforage from 'localforage';\nimport SparkMD5 from 'spark-md5';\nimport ThreadDump from '../types/ThreadDump';\n\nlet currentThreadDumps: ThreadDump[];\nconst lastUsedStorage = localforage.createInstance({ name: 'lastUsed' });\nconst threadDumpsStorage = localforage.createInstance({ name: 'threadDumps' });\n\n// Given a key, returns a promise that resolves to the stored thread dumps.\nexport const getThreadDumpsAsync = async (key: string): Promise<ThreadDump[]> => {\n  if (currentThreadDumps === undefined) {\n    return getFromStorage(key);\n  }\n\n  return currentThreadDumps;\n};\n\n// Stores thread dumps in persistent storage for subsequent page loads.\n// Returns a key that can be used to retrieve the thread dumps.\nexport const setThreadDumps = (parsedDumps: ThreadDump[]): string => {\n  currentThreadDumps = parsedDumps;\n  const stringified = stringify(currentThreadDumps);\n  const key = SparkMD5.hash(stringified);\n  threadDumpsStorage.setItem(key, stringified);\n  return key;\n};\n\n// Clears currently held thread dump.\n// Does not modify data storage.\nexport const clearCurrentThreadDump = (): void => {\n  currentThreadDumps = [];\n};\n\n// Clears all persisted thread dumps not used in the last 7 days.\nexport const clearOldThreadDumps = (): void => {\n  const sevenDaysAgo = new Date().setDate(new Date().getDate() - 7);\n\n  lastUsedStorage.iterate((date, key) => {\n    if (date < sevenDaysAgo) {\n      threadDumpsStorage.removeItem(key);\n      lastUsedStorage.removeItem(key);\n    }\n  });\n};\n\nasync function getFromStorage(key: string) {\n  const fromStorage = await threadDumpsStorage.getItem<string>(key);\n\n  // update the \"Last used\" date if the key exists\n  if (fromStorage) {\n    lastUsedStorage.setItem(key, new Date().valueOf());\n  }\n\n  currentThreadDumps = fromStorage ? parse(fromStorage) : [];\n  return currentThreadDumps;\n}\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ThreadDump from '../types/ThreadDump';\nimport { getThreadDumpsAsync } from './threadDumpsStorageService';\n\nexport type WithThreadDumpsProps = RouteComponentProps<any> & {\n  threadDumps: ThreadDump[];\n};\n\ntype State = {\n  promisePending: boolean;\n  threadDumps: ThreadDump[];\n};\n\nexport const withThreadDumps =\n  <P extends WithThreadDumpsProps>(WrappedComponent: React.ComponentType<P>) => {\n    class WithThreadDumps extends React.Component<P, State> {\n      public state: State = {\n        promisePending: true,\n        threadDumps: [],\n      };\n\n      constructor(props: P) {\n        super(props);\n\n        const key: string = props.match.params.key;\n        const threadDumpsPromise = getThreadDumpsAsync(key);\n\n        threadDumpsPromise\n          .then((threadDumps) => {\n            if (threadDumps.length === 0) {\n              props.history.push('/');\n            }\n            return threadDumps;\n          })\n          .then((threadDumps) => {\n            this.setState({ threadDumps, promisePending: false });\n          });\n      }\n\n      public componentDidMount() {\n        this.scrollToTop();\n      }\n\n      public render() {\n        if (this.state.promisePending) {\n          return <h4 id=\"centered\">Loading data from cache...</h4>;\n        }\n\n        return <WrappedComponent threadDumps={this.state.threadDumps} {...this.props} />;\n      }\n\n      private scrollToTop = () => {\n        const contentDiv = document.getElementById('content');\n        if (contentDiv) {\n          contentDiv.scrollTop = 0;\n        }\n      }\n    }\n\n    return WithThreadDumps;\n  };\n","import Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\n\nexport default function getThreadsOverTime(threadDumps: ThreadDump[]): Array<Map<number, Thread>> {\n  const threadsOverTime = new Map<number, Map<number, Thread>>();\n\n  threadDumps.forEach((threadDump, dumpNumber) => {\n    threadDump.threads.forEach((thread) => {\n      let threadOccurences = threadsOverTime.get(thread.id);\n      if (!threadOccurences) {\n        threadOccurences = new Map<number, Thread>();\n      }\n\n      threadOccurences.set(dumpNumber, thread);\n      threadsOverTime.set(thread.id, threadOccurences);\n    });\n  });\n\n  return Array.from(threadsOverTime.values())\n    .sort((t1, t2) => getThreadName(t1).localeCompare(getThreadName(t2)));\n}\n\nconst getThreadName = (threads: Map<number, Thread>): string => {\n  for (const [, thread] of threads) {\n    if (thread) {\n      return thread.name;\n    }\n  }\n  return '';\n};\n","import React, { ComponentState } from 'react';\nimport ReactGA from 'react-ga';\nimport { WithThreadDumpsProps } from '../../common/withThreadDumps';\n\nexport default class PageWithSettings<S> extends React.PureComponent<WithThreadDumpsProps, S> {\n  // tslint:disable:max-line-length\n  protected static NO_CPU_INFOS = 'You need to load the <i>cpu_info</i> files to see this data.';\n  protected static NO_CPU_AND_THREADS_PAIR = 'You need to load matching <i>cpu_info</i> and <i>jira_threads</i> files to see this data.';\n  protected static NO_THREAD_DUMPS = 'You need to load the <i>thread_dump</i> files to see this data.';\n\n  protected static N0_THREADS_MATCHING = 'No threads match the selected criteria.';\n  protected static N0_MONITORS_MATCHING = 'No monitors match the selected criteria.';\n  // tslint:enable:max-line-length\n\n  protected PAGE_NAME = 'Unknown Page';\n\n  public render(): JSX.Element | null {\n    return null;\n  }\n\n  protected handleFilterChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const isChecked: boolean = event.target.checked;\n    const newState: ComponentState = { [name]: isChecked };\n\n    ReactGA.event({\n      action: `${this.PAGE_NAME} settings changed`,\n      category: 'Navigation',\n      label: `Filter ${name} changed to ${isChecked}`,\n    });\n    this.setState(newState);\n  }\n\n  protected handleIntegerChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const value: number = parseInt(event.target.value ? event.target.value : '0', 10);\n    const newState: ComponentState = { [name]: value > 0 ? value : 0 };\n\n    ReactGA.event({\n      action: `${this.PAGE_NAME} settings changed`,\n      category: 'Navigation',\n      label: `Number ${name} changed to ${value}`,\n    });\n    this.setState(newState);\n  }\n\n  protected handleRegExpChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const value: string = event.target.value;\n    const newState: ComponentState = { [name]: value };\n\n    ReactGA.event({\n      action: `${this.PAGE_NAME} settings changed`,\n      category: 'Navigation',\n      label: `RegExp ${name} changed to ${value}`,\n    });\n    this.setState(newState);\n  }\n}\n","enum ThreadStatus {\n  RUNNABLE = 'runnable',\n  BLOCKED = 'blocked',\n  WAITING = 'waiting',\n  TIMED_WAITING = 'timed-waiting',\n  UNKNOWN = 'unknown',\n}\n\nexport default ThreadStatus;\n","import Thread from '../../types/Thread';\n\nexport default class CpuConsumer {\n  public calculatedValue: number;\n  public threadOccurences: Map<number, Thread>;\n\n  constructor(calculatedValue: number, threadOccurences: Map<number, Thread>) {\n    this.calculatedValue = calculatedValue;\n    this.threadOccurences = threadOccurences;\n  }\n}\n","import Lock from './Lock';\nimport ThreadStatus from './ThreadStatus';\n\nexport default class Thread {\n  public static getFormattedTime = (thread: Thread): string => {\n    return thread.epoch ? new Date(thread.epoch).toLocaleTimeString() : '';\n  }\n\n  public id: number;\n  public name: string;\n  public status: ThreadStatus | undefined;\n  public cpuUsage: number = 0.0;\n  public runningFor!: string;\n  public lockWaitingFor: Lock | null = null;\n  public locksHeld: Lock[] = [];\n  public classicalLocksHeld: Lock[] = [];\n  public stackTrace: string[] = [];\n  public matchingFilter: boolean = false;\n  private epoch: number | null;\n\n  constructor(id: number, name: string, epoch: number | null) {\n    this.id = id;\n    this.name = name;\n    this.epoch = epoch;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\ntype Props = {\n  windowTitle: string;\n  className: string;\n  onUnload: () => void;\n};\n\nexport default class WindowPortal extends React.PureComponent<Props> {\n  private static windows: Array<Window | null> = [];\n  private externalWindow: Window | null;\n  private container: HTMLElement;\n\n  private windowFeatures =\n    'width=960,height=530,titlebar=0,menubar=0,location=0,toolbar=0,status=0';\n\n  constructor(props: Props) {\n    super(props);\n\n    this.externalWindow = null;\n    this.container = document.createElement('div');\n    if (this.props.className) {\n      this.container.className = this.props.className;\n    }\n  }\n\n  public copyStyles(sourceDoc: Document, targetDoc: Document) {\n    Array.from(sourceDoc.styleSheets).forEach((sheet) => {\n      const styleSheet = sheet as CSSStyleSheet;\n\n      if (styleSheet.cssRules) { // for <style> elements\n        const newStyleEl = sourceDoc.createElement('style');\n\n        Array.from(styleSheet.cssRules).forEach((cssRule) => {\n          newStyleEl.appendChild(sourceDoc.createTextNode(cssRule.cssText));\n        });\n\n        targetDoc.head.appendChild(newStyleEl);\n      } else if (styleSheet.href) { // for <link> elements\n        const newLinkEl = sourceDoc.createElement('link');\n\n        newLinkEl.rel = 'stylesheet';\n        newLinkEl.href = styleSheet.href;\n        targetDoc.head.appendChild(newLinkEl);\n      }\n    });\n  }\n\n  public componentDidMount() {\n    window.onunload = this.closeAllExternalWindows;\n\n    this.externalWindow = window.open('', '', this.windowFeatures);\n    if (this.externalWindow) {\n      WindowPortal.windows.push(this.externalWindow);\n      this.externalWindow.document.title = this.props.windowTitle;\n      this.externalWindow.document.body.appendChild(this.container);\n      this.copyStyles(document, this.externalWindow.document);\n      this.externalWindow.onunload = this.props.onUnload;\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.externalWindow && !this.externalWindow.closed) {\n      this.externalWindow.close();\n    }\n    WindowPortal.windows = WindowPortal.windows.filter(ext => ext !== this.externalWindow);\n  }\n\n  public render() {\n    return ReactDOM.createPortal(this.props.children, this.container);\n  }\n\n  private closeAllExternalWindows = () => {\n    for (const external of WindowPortal.windows) {\n      if (external && !external.closed) {\n        external.close();\n      }\n    }\n  }\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport Thread from '../../types/Thread';\nimport ThreadStatus from '../../types/ThreadStatus';\nimport './ThreadDetailsWindow.css';\nimport WindowPortal from './WindowPortal';\n\ntype Props = {\n  thread: Thread;\n  onUnload: () => void;\n};\n\nconst ThreadDetailsWindow: React.SFC<Props> = ({ thread, onUnload }) => {\n  ReactGA.event({\n    action: 'Opened thread details',\n    category: 'Navigation',\n  });\n\n  return (\n    <WindowPortal windowTitle={thread.name} className=\"thread-details\" onUnload={onUnload}>\n      {renderName(thread)}\n      {renderStatus(thread)}\n      {renderLockWaitingFor(thread)}\n      {renderLocksHeld(thread)}\n      {renderStackTrace(thread)}\n    </WindowPortal>\n  );\n};\n\nconst renderName = (thread: Thread) => {\n  return (\n    <h3>{Thread.getFormattedTime(thread)} <i>{thread.name}</i></h3>\n  );\n};\n\nconst renderStatus = (thread: Thread) => {\n  if (thread.status === undefined) {\n    return null;\n  }\n\n  return (\n    <span>\n      <b>\n        {thread.status.toLocaleUpperCase()}\n        {thread.status === ThreadStatus.RUNNABLE &&\n          <> ({thread.cpuUsage.toFixed(1)}% CPU usage)</>}\n      </b>\n      , running for: {thread.runningFor}\n    </span>\n  );\n};\n\nconst renderLocksHeld = (thread: Thread) => {\n  return (\n    thread.locksHeld.length > 0 &&\n    <span><b>Locks held:</b> [{thread.locksHeld.map(lock => lock.id).join(', ')}]</span>\n  );\n};\n\nconst renderLockWaitingFor = (thread: Thread) => {\n  return (\n    thread.lockWaitingFor &&\n    <span>\n      <b>Waiting for notification on lock:</b> [{thread.lockWaitingFor.id}]\n        {thread.lockWaitingFor.owner\n        ? <> owned by <i>{thread.lockWaitingFor.owner.name}</i></>\n        : <> without an owner</>}\n    </span>\n  );\n};\n\nconst renderStackTrace = (thread: Thread) => {\n  return (\n    <textarea\n      wrap=\"off\"\n      readOnly={true}\n      className=\"mono stacktrace-window\"\n      value={thread.stackTrace.join('\\n')} />\n  );\n};\n\nexport default ThreadDetailsWindow;\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport Thread from '../../types/Thread';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumersList from './CpuConsumersList';\nimport './CpuConsumersPage.css';\nimport CpuConsumersSettings from './CpuConsumersSettings';\n\nexport enum CpuConsumersMode {\n  Mean,\n  Median,\n  Max,\n}\n\ntype State = {\n  mode: CpuConsumersMode;\n  limit: number;\n};\n\nexport default class CpuConsumersPage extends PageWithSettings<State> {\n\n  public state: State = {\n    limit: 100,\n    mode: CpuConsumersMode.Mean,\n  };\n\n  protected PAGE_NAME = 'CPU Consumers';\n\n  public render() {\n    const consumers = this.calculateCpuUsages(this.state.mode);\n\n    return (\n      <div id=\"page\">\n        <CpuConsumersSettings\n          mode={this.state.mode}\n          limit={this.state.limit}\n          onModeChange={this.handleModeChange}\n          onLimitChange={this.handleIntegerChange}\n        />\n\n        {!this.props.threadDumps.some(dump => !!dump.loadAverages && dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: CpuConsumersPage.NO_CPU_AND_THREADS_PAIR }} />\n          : <CpuConsumersList\n            limit={this.state.limit}\n            dumpsNumber={this.props.threadDumps.length}\n            consumers={consumers}\n          />\n        }\n      </div>\n    );\n  }\n\n  private handleModeChange = (mode: number): React.ChangeEventHandler<HTMLInputElement> => () => {\n    ReactGA.event({\n      action: `${this.PAGE_NAME} settings changed`,\n      category: 'Navigation',\n      label: `Mode changed to ${mode}`,\n    });\n    this.setState({ mode: mode as CpuConsumersMode });\n  }\n\n  private calculateCpuUsages(calculationMode: CpuConsumersMode): CpuConsumer[] {\n    const consumers: CpuConsumer[] = [];\n    const threadsOverTime = getThreadsOverTime(this.props.threadDumps);\n\n    for (const threads of threadsOverTime) {\n      consumers.push(this.calculateUsageFor(threads, calculationMode));\n    }\n    consumers.sort((a, b) => b.calculatedValue - a.calculatedValue);\n\n    return consumers;\n  }\n\n  private calculateUsageFor(threadsMap: Map<number, Thread>, calculationMode: CpuConsumersMode) {\n    const threads = Array.from(threadsMap.values());\n\n    let usage: number = 0;\n    switch (calculationMode) {\n      case CpuConsumersMode.Mean:\n        usage = threads.reduce(this.reduceSum, 0) / this.props.threadDumps.length;\n        break;\n      case CpuConsumersMode.Median:\n        usage = this.calculateMedian(threads);\n        break;\n      case CpuConsumersMode.Max:\n        usage = threads.reduce(this.reduceMax, 0);\n        break;\n    }\n\n    return new CpuConsumer(usage, threadsMap);\n  }\n\n  private reduceSum(sum: number, currentThread: Thread): number {\n    return sum + currentThread.cpuUsage;\n  }\n\n  private reduceMax(maxValue: number, currentThread: Thread): number {\n    return (currentThread.cpuUsage > maxValue) ? currentThread.cpuUsage : maxValue;\n  }\n\n  private calculateMedian(threads: Thread[]): number {\n    const values = threads.slice();\n    values.sort((a, b) => a.cpuUsage - b.cpuUsage);\n    const lowMiddle = Math.floor((values.length - 1) / 2);\n    const highMiddle = Math.ceil((values.length - 1) / 2);\n    return (values[lowMiddle].cpuUsage + values[highMiddle].cpuUsage) / 2;\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread | undefined;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class CpuConsumerSingleUsage extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n  };\n\n  public handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  public handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n\n  public render() {\n    const thread = this.props.thread;\n\n    if (!thread) {\n      return <>     -- </>;\n    }\n\n    const cpuUsage = `${thread.cpuUsage.toFixed(1)}%`;\n    const padding = ' '.repeat(8 - cpuUsage.length);\n    let className = thread.cpuUsage > 78\n      ? 'high '\n      : thread.cpuUsage > 42\n        ? 'mid '\n        : thread.cpuUsage > 13\n          ? 'low '\n          : thread.cpuUsage > 0\n            ? 'vlow '\n            : '';\n    className += 'cpu-usage';\n\n    return (\n      <>\n        {padding}\n        <span className={className} onClick={this.handleClick}>{cpuUsage}</span>\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumerSingleUsage from './CpuConsumerSingleUsage';\n\ntype Props = {\n  dumpsNumber: number;\n  consumer: CpuConsumer;\n};\n\nconst CpuConsumerItem: React.SFC<Props> = ({ dumpsNumber, consumer }) => {\n  const threads: Array<Thread | undefined> = [];\n\n  for (let i = 0; i < dumpsNumber; i++) {\n    threads.push(consumer.threadOccurences.get(i));\n  }\n\n  return (\n    <li>\n      <h6>\n        {formatConsumerHeader(consumer.calculatedValue, consumer.threadOccurences.values())}\n      </h6>\n      <span className=\"mono\">\n        {threads.map((thread, index) => <CpuConsumerSingleUsage thread={thread} key={index} />)}\n      </span>\n    </li>\n  );\n};\n\nconst formatConsumerHeader = (value: number, threads: IterableIterator<Thread>): string => {\n  let threadName: string = '';\n\n  for (const thread of threads) {\n    if (thread) {\n      threadName = thread.name;\n    }\n  }\n\n  return (\n    `${value.toFixed(2)}% - \"${threadName}\"`\n  );\n};\n\nexport default CpuConsumerItem;\n","import React from 'react';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumerItem from './CpuConsumerItem';\n\ntype Props = {\n  limit: number;\n  dumpsNumber: number;\n  consumers: CpuConsumer[];\n};\n\nconst CpuConsumersList: React.SFC<Props> = ({ limit, dumpsNumber, consumers }) => (\n  <ul id=\"consumers-list\">\n    {consumers.slice(0, limit).map((consumer, index) => (\n      <CpuConsumerItem key={index} dumpsNumber={dumpsNumber} consumer={consumer} />\n    ))}\n  </ul>\n);\n\nexport default CpuConsumersList;\n","import React from 'react';\nimport { CpuConsumersMode } from './CpuConsumersPage';\n\ntype Props = {\n  mode: CpuConsumersMode;\n  limit: number;\n  onModeChange: (mode: number) => React.ChangeEventHandler<HTMLInputElement>;\n  onLimitChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst CpuConsumersSettings: React.SFC<Props> = ({ mode, limit, onModeChange, onLimitChange }) => (\n  <div id=\"settings\">\n    <div className=\"filters\">\n      <b>CPU usage calculation:</b>\n\n      <label className={mode === CpuConsumersMode.Mean ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Mean}\n          onChange={onModeChange(CpuConsumersMode.Mean)}\n        />\n        Mean\n        </label>\n\n      <label className={mode === CpuConsumersMode.Median ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Median}\n          onChange={onModeChange(CpuConsumersMode.Median)}\n        />\n        Median\n        </label>\n\n      <label className={mode === CpuConsumersMode.Max ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Max}\n          onChange={onModeChange(CpuConsumersMode.Max)}\n        />\n        Max\n        </label>\n    </div>\n\n    <div id=\"cpu-consumers-limit\">\n      <label>\n        <input type=\"number\" name=\"limit\" min=\"0\" max=\"10000\"\n          value={limit}\n          onChange={onLimitChange}\n        />\n        <b>Threads to show</b>\n      </label>\n    </div>\n  </div>\n);\n\nexport default CpuConsumersSettings;\n","import LoadAverages from './LoadAverage';\nimport Lock from './Lock';\nimport MemoryUsage from './MemoryUsage';\nimport Thread from './Thread';\n\nexport default class ThreadDump {\n  public static getFormattedTime = (threadDump: ThreadDump): string => {\n    return threadDump.epoch ? new Date(threadDump.epoch).toLocaleTimeString() : 'unknown time';\n  }\n\n  public loadAverages!: LoadAverages | null;\n  public runningProcesses!: number;\n  public memoryUsage!: MemoryUsage;\n  public threads: Thread[] = [];\n  public locks: Lock[] = [];\n  private epoch!: number | null;\n\n  constructor(date: string | null) {\n    if (!date) {\n      this.epoch = null;\n      return;\n    }\n\n    // we want to create a date like below, but we can't because Safari throws \"Invalid Date\"\n    // this.epoch = new Date(date).valueOf();\n    const hours = parseInt(date.substring(11, 13), 10);\n    const minutes = parseInt(date.substring(14, 16), 10);\n    const seconds = parseInt(date.substring(17), 10);\n    this.epoch = hours * 3600000 + minutes * 60000 + seconds * 1000;\n  }\n\n  public getEpoch = () => {\n    return this.epoch;\n  }\n}\n","import Lock from '../../types/Lock';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\n\nexport default class Monitor {\n  public time: string;\n  public javaClass: string;\n  public owner: Thread | null;\n  public waiting: Thread[];\n\n  public constructor(threadDump: ThreadDump, lock: Lock) {\n    this.time = ThreadDump.getFormattedTime(threadDump);\n    this.javaClass = lock.className;\n    this.owner = lock.owner;\n    this.waiting = lock.waiting;\n  }\n}\n","import Monitor from './Monitor';\n\nexport default class MonitorOverTime {\n  public id: string;\n  public waitingSum: number = 0;\n  public monitors: Monitor[] = [];\n\n  public constructor(id: string) {\n    this.id = id;\n  }\n}\n","import React from 'react';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\nimport Monitor from './Monitor';\n\ntype Props = {\n  monitor: Monitor;\n};\n\ntype State = {\n  showOwner: boolean;\n};\n\nexport default class MonitorOwner extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showOwner: false,\n  };\n\n  public render() {\n    const monitor = this.props.monitor;\n\n    if (!monitor.owner) {\n      return null;\n    }\n\n    return (\n      <>\n        <b>Held by:</b>\n        <br />\n        <a className=\"expandable-details\" onClick={this.handleClick}>{monitor.owner.name}</a>\n        <br />\n\n        {this.state.showOwner &&\n          <ThreadDetailsWindow thread={monitor.owner} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    this.setState(prevState => ({ showOwner: !prevState.showOwner }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showOwner: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class WaitingListItem extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n\n    return (\n      <>\n        <a onClick={this.handleClick}>{thread.name}</a>\n        <br />\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport WaitingListItem from './WaitingListItem';\n\ntype Props = {\n  waiting: Thread[],\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nexport default class WaitingList extends React.PureComponent<Props, State> {\n\n  private static THREADS_TO_SHOW_WHEN_COLLAPSED = 20;\n\n  public state: State = {\n    expanded: false,\n  };\n\n  public render() {\n    if (this.props.waiting.length === 0) {\n      return null;\n    }\n\n    const collapsable = this.props.waiting.length - WaitingList.THREADS_TO_SHOW_WHEN_COLLAPSED;\n    const threads = this.state.expanded\n      ? this.props.waiting\n      : this.props.waiting.slice(0, WaitingList.THREADS_TO_SHOW_WHEN_COLLAPSED);\n\n    return (\n      <>\n        <b>{this.props.waiting.length} thread(s) waiting for notification on lock:</b>\n        <br />\n\n        {threads.map((thread, index) => <WaitingListItem thread={thread} key={index} />)}\n\n        {collapsable > 0 &&\n          <a onClick={this.toggleExpand}>\n            {this.state.expanded\n              ? `Collapse threads list (hide ${collapsable} thread(s))`\n              : `Expand threads list (${collapsable} more thread(s) to show)`}\n          </a>}\n      </>\n    );\n  }\n\n  private toggleExpand = () => {\n    this.setState(prevState => ({ expanded: !prevState.expanded }));\n  }\n}\n","import React from 'react';\nimport Monitor from './Monitor';\nimport MonitorOwner from './MonitorOwner';\nimport WaitingList from './WaitingList';\n\ntype Props = {\n  monitor: Monitor;\n};\n\nconst MonitorItem: React.SFC<Props> = ({ monitor }) => {\n  const javaClass = monitor.javaClass\n    ? monitor.javaClass.substring(monitor.javaClass.lastIndexOf('.') + 1)\n    : 'unknown class';\n\n  return (\n    <div className=\"monitors-container\">\n      <div className=\"left\">\n        <b>{monitor.time}</b>\n        <br />\n        {javaClass}\n      </div>\n      <div>\n        <MonitorOwner monitor={monitor} />\n        <WaitingList waiting={monitor.waiting} />\n      </div>\n    </div>\n  );\n};\n\nexport default MonitorItem;\n","import React from 'react';\nimport MonitorItem from './MonitorItem';\nimport MonitorOverTime from './MonitorOverTime';\n\ntype Props = {\n  monitor: MonitorOverTime;\n};\n\ntype State = {\n  collapse: boolean;\n};\n\nexport default class MonitorOverTimeItem extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    collapse: false,\n  };\n\n  public render() {\n    const monitor = this.props.monitor;\n\n    return (\n      <>\n        <h6 className=\"clickable\" onClick={this.toggleCollapse}>\n          <span className={this.state.collapse ? 'chevron rotate' : 'chevron'} />\n          {monitor.waitingSum} thread(s) waiting for &lt;{monitor.id}&gt;\n        </h6>\n\n        {!this.state.collapse &&\n          monitor.monitors.map((item, index) => <MonitorItem key={index} monitor={item} />)}\n      </>\n    );\n  }\n\n  private toggleCollapse = () => {\n    this.setState(prevState => ({ collapse: !prevState.collapse }));\n  }\n}\n","import React from 'react';\nimport './Filter.css';\n\ntype Props = {\n  name: string;\n  displayName: string;\n  checked: boolean;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst Filter: React.SFC<Props> = ({ name, displayName, checked, onChange }) => (\n  <label className={checked ? 'checked' : ''}>\n    <input\n      type=\"checkbox\"\n      name={name}\n      checked={checked}\n      onChange={onChange}\n    />\n    {displayName}\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  withOwner: boolean;\n  withoutIdle: boolean;\n  withoutOwner: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst MonitorsSettings: React.SFC<Props> =\n  ({ withOwner, withoutIdle, withoutOwner, onFilterChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n\n        <Filter name=\"withOwner\" displayName=\"With Owner\"\n          checked={withOwner} onChange={onFilterChange} />\n\n        <Filter name=\"withoutOwner\" displayName=\"Without Owner\"\n          checked={withoutOwner} onChange={onFilterChange} />\n      </div>\n    </div>\n  );\n\nexport default MonitorsSettings;\n","import React from 'react';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport Monitor from './Monitor';\nimport MonitorOverTime from './MonitorOverTime';\nimport MonitorOverTimeItem from './MonitorOverTimeItem';\nimport './MonitorsPage.css';\nimport MonitorsSettings from './MonitorsSettings';\n\ntype State = {\n  withOwner: boolean;\n  withoutIdle: boolean;\n  withoutOwner: boolean;\n};\n\nexport default class MonitorsPage extends PageWithSettings<State> {\n\n  public state: State = {\n    withOwner: false,\n    withoutIdle: true,\n    withoutOwner: false,\n  };\n\n  protected PAGE_NAME = 'Monitors';\n\n  public render() {\n    const monitors = this.getMonitorsOverTime(this.props.threadDumps);\n    const filtered = this.filterMonitors(monitors);\n\n    return (\n      <div id=\"page\">\n        <MonitorsSettings\n          withOwner={this.state.withOwner}\n          withoutIdle={this.state.withoutIdle}\n          withoutOwner={this.state.withoutOwner}\n          onFilterChange={this.handleFilterChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: MonitorsPage.NO_THREAD_DUMPS }} />\n          : filtered.length === 0\n            ? <h4>{MonitorsPage.N0_MONITORS_MATCHING}</h4>\n            : filtered.map(monitor => <MonitorOverTimeItem key={monitor.id} monitor={monitor} />)}\n      </div>\n    );\n  }\n\n  private getMonitorsOverTime = (threadDumps: ThreadDump[]): MonitorOverTime[] => {\n    const monitorsOverTime: Map<string, MonitorOverTime> = new Map();\n\n    threadDumps.forEach((threadDump) => {\n      threadDump.locks.forEach((lock) => {\n        const monitor = new Monitor(threadDump, lock);\n\n        let monitorOverTime = monitorsOverTime.get(lock.id);\n        if (!monitorOverTime) {\n          monitorOverTime = new MonitorOverTime(lock.id);\n          monitorsOverTime.set(lock.id, monitorOverTime);\n        }\n\n        monitorOverTime.monitors.push(monitor);\n        monitorOverTime.waitingSum += monitor.waiting.length;\n      });\n    });\n\n    return Array\n      .from(monitorsOverTime.values())\n      .sort((m1, m2) => m2.waitingSum - m1.waitingSum);\n  }\n\n  private filterMonitors = (monitors: MonitorOverTime[]) => {\n    let filtered = monitors.filter(monitor => monitor.waitingSum > 0);\n\n    if (this.state.withoutIdle) {\n      filtered = filtered.filter(monitor => !this.isQueueThread(monitor));\n    }\n    if (this.state.withOwner) {\n      filtered = filtered.filter(monitor => this.hasAnyOwner(monitor));\n    }\n    if (this.state.withoutOwner) {\n      filtered = filtered.filter(monitor => !this.hasAnyOwner(monitor));\n    }\n\n    return filtered;\n  }\n\n  private hasAnyOwner = (monitorOverTime: MonitorOverTime): boolean => {\n    return monitorOverTime.monitors.some(monitor => monitor.owner !== null);\n  }\n\n  private isQueueThread = (monitorOverTime: MonitorOverTime): boolean => {\n    for (const monitor of monitorOverTime.monitors) {\n      // if the lock has an owner, it's not a queue thread\n      if (monitor.owner !== null) {\n        return false;\n      }\n\n      // if the stack trace is too long, it's not a queue thread\n      for (const thread of monitor.waiting) {\n        if (thread.stackTrace.length > 12) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","import React from 'react';\nimport ReactGA, { OutboundLink } from 'react-ga';\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { clearCurrentThreadDump } from '../../common/threadDumpsStorageService';\nimport './Navigation.css';\n\n// tslint:disable:max-line-length\nexport const ISSUE_TRACKER_LINK: string = 'https://github.com/drauf/watson/issues';\nexport const SOURCE_CODE_LINK: string = 'https://github.com/drauf/watson';\n// tslint:enable:max-line-length\n\ntype Props = RouteComponentProps<any> & {\n  open: boolean;\n};\n\nclass Navigation extends React.PureComponent<Props> {\n\n  public render() {\n    const key: string = this.props.match.params.key as string;\n\n    return (\n      <nav className={this.props.open ? 'open' : ''}>\n        <h1 id={this.props.open ? 'brand-visible' : 'brand-hidden'}>\n          Watson\n        </h1>\n\n        <ul>\n          <NavLink to={`/${key}/summary/`}><li>Summary</li></NavLink>\n        </ul>\n        <ul>\n          <NavLink to={`/${key}/cpu-consumers/`}><li>CPU Consumers</li></NavLink>\n          <NavLink to={`/${key}/similar-stacks/`}><li>Similar Stack Traces</li></NavLink>\n          <NavLink to={`/${key}/stuck-threads/`}><li>Stuck Threads Suspects</li></NavLink>\n          <NavLink to={`/${key}/threads-overview/`}><li>Threads Overview</li></NavLink>\n          <NavLink to={`/${key}/monitors/`}><li>Monitors</li></NavLink>\n        </ul>\n\n        <div id=\"nav-content-bottom\">\n          <ul>\n            <li onClick={this.onClear}>Load another thread dump</li>\n          </ul>\n\n          <ul>\n            <OutboundLink eventLabel=\"Issue tracker\" to={ISSUE_TRACKER_LINK} target=\"_blank\">\n              <li>Issue tracker</li>\n            </OutboundLink>\n            <OutboundLink eventLabel=\"Source code\" to={SOURCE_CODE_LINK} target=\"_blank\">\n              <li>Source code</li>\n            </OutboundLink>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n\n  private onClear = () => {\n    ReactGA.event({\n      action: 'Cleared thread dumps',\n      category: 'Navigation',\n    });\n\n    clearCurrentThreadDump();\n    this.props.history.push('/');\n  }\n}\n\nexport default withRouter(Navigation);\n","import React from 'react';\nimport './NavToggle.css';\n\ntype Props = {\n  open: boolean;\n  onClick: () => void;\n};\n\nconst NavToggle: React.SFC<Props> = ({ open, onClick }) => (\n  <div className={open ? 'nav-toggle open' : 'nav-toggle'} onClick={onClick}>\n    <div id=\"nav-arrow\" />\n  </div>\n);\n\nexport default NavToggle;\n","import React from 'react';\nimport { WithThreadDumpsProps } from '../common/withThreadDumps';\n\nconst NotFoundError: React.SFC<WithThreadDumpsProps> = () => (\n  <h4 id=\"centered\">Oops, you've found a dead link!</h4>\n);\n\nexport default NotFoundError;\n","import Thread from '../types/Thread';\n\n// tslint:disable:max-line-length\nexport default function isIdleThread(thread: Thread): boolean {\n  return thread.stackTrace.length < 17\n    || (thread.name.includes('rufus-scheduler')\n      && thread.stackTrace[7] === 'org.jruby.ext.thread.Queue$INVOKER$i$pop.call(Queue$INVOKER$i$pop.gen)'\n      || thread.stackTrace[3] === 'org.jruby.RubyKernel$INVOKER$s$0$1$sleep.call(RubyKernel$INVOKER$s$0$1$sleep.gen)')\n    || (thread.name.includes('rubinius-actor')\n      && thread.stackTrace[5] === 'org.jruby.ext.rubinius.RubiniusChannel$INVOKER$i$0$0$receive.call(RubiniusChannel$INVOKER$i$0$0$receive.gen)');\n}\n","import React from 'react';\n\ntype Props = {\n  stackTrace: string[];\n  linesToConsider: number;\n};\n\nconst StackTrace: React.SFC<Props> = ({ stackTrace, linesToConsider }) => {\n  const stack = linesToConsider > 0 ? stackTrace.slice(0, linesToConsider) : stackTrace;\n\n  return (\n    <ol className=\"stacktrace\">\n      {stack.map((line, index) => (\n        <li key={index}>{line}</li>))}\n    </ol>\n  );\n};\n\nexport default StackTrace;\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n  showLockOwner: boolean;\n};\n\nexport default class ThreadSummary extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n    showLockOwner: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n    const lockOwner = thread.lockWaitingFor ? thread.lockWaitingFor.owner : null;\n    const locksHeld = this.getLocksHeldString(thread);\n\n    return (\n      <li>\n        <a onClick={this.toggleDetails}>\"{thread.name}\"</a>\n        {` ${Thread.getFormattedTime(thread)}`}\n        {this.waitingForRender(thread, lockOwner)}\n        {thread.locksHeld.length > 0 && `, holding [${locksHeld}]`}\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n        {this.state.showLockOwner && lockOwner &&\n          <ThreadDetailsWindow thread={lockOwner} onUnload={this.handleUnload} />}\n      </li>\n    );\n  }\n\n  private toggleDetails = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private toggleLockOwner = () => {\n    this.setState(prevState => ({ showLockOwner: !prevState.showLockOwner }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false, showLockOwner: false });\n  }\n\n  private waitingForRender(thread: Thread, lockOwner: Thread | null) {\n    const lockWaitingFor = thread.lockWaitingFor ? thread.lockWaitingFor.id : null;\n\n    if (!lockWaitingFor) {\n      return null;\n    }\n\n    if (lockOwner) {\n      console.error(thread);\n      return (\n        <>\n          , awaiting notification on <a onClick={this.toggleLockOwner}>[{lockWaitingFor}]</a>\n        </>\n      );\n    }\n    return `, awaiting notification on [${lockWaitingFor}] without an owner`;\n  }\n\n  private getLocksHeldString = (thread: Thread): string | null => {\n    if (thread.locksHeld.length === 0) {\n      return null;\n    }\n    return thread.locksHeld.map(lock => lock.id).reduce(this.locksReducer);\n  }\n\n  private locksReducer(accumulator: string, lockId: string, index: number): string {\n    return (index === 0) ? lockId : `${accumulator}, ${lockId}`;\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport StackTrace from './StackTrace';\nimport ThreadSummary from './ThreadSummary';\n\ntype Props = {\n  threadGroup: Thread[];\n  linesToConsider: number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nexport default class GroupDetails extends React.PureComponent<Props, State> {\n\n  private static THREADS_TO_SHOW_WHEN_COLLAPSED = 20;\n\n  public state: State = {\n    expanded: false,\n  };\n\n  public render() {\n    const stackTrace = this.getStackTrace(this.props.threadGroup);\n    const sortedByName = this.props.threadGroup.sort((t1, t2) => t1.name.localeCompare(t2.name));\n    const collapsable = sortedByName.length - GroupDetails.THREADS_TO_SHOW_WHEN_COLLAPSED;\n    const threads = this.state.expanded\n      ? sortedByName\n      : sortedByName.slice(0, GroupDetails.THREADS_TO_SHOW_WHEN_COLLAPSED);\n\n    return (\n      <>\n        <ul>\n          {threads.map((thread, index) => <ThreadSummary key={index} thread={thread} />)}\n\n          {collapsable > 0 &&\n            <li><a onClick={this.toggleExpand}>\n              {this.state.expanded\n                ? `Collapse threads list (hide ${collapsable} thread(s))`\n                : `Expand threads list (${collapsable} more thread(s) to show)`}\n            </a></li>}\n        </ul>\n        <StackTrace stackTrace={stackTrace} linesToConsider={this.props.linesToConsider} />\n      </>\n    );\n  }\n\n  private toggleExpand = () => {\n    this.setState(prevState => ({ expanded: !prevState.expanded }));\n  }\n\n  private getStackTrace = (threads: Thread[]): string[] => {\n    for (const thread of threads) {\n      if (thread) {\n        return thread.stackTrace;\n      }\n    }\n    return [];\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport GroupDetails from './GroupDetails';\n\ntype Props = {\n  threadGroup: Thread[];\n  linesToConsider: number;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class SimilarStacksGroup extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: true,\n  };\n\n  public render() {\n    return (\n      <>\n        <h6 className=\"clickable\" onClick={this.toggleGroup}>\n          <span className={this.state.showDetails ? 'chevron' : 'chevron rotate'} />\n          {this.props.threadGroup.length} thread(s) with this stack:\n        </h6>\n\n        {this.state.showDetails &&\n          <GroupDetails\n            threadGroup={this.props.threadGroup}\n            linesToConsider={this.props.linesToConsider} />}\n      </>\n    );\n  }\n\n  private toggleGroup = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n}\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  linesToConsider: number;\n  minimalGroupSize: number;\n  withoutIdle: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onIntegerChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst SimilarStacksSettings: React.SFC<Props> =\n  ({ linesToConsider, minimalGroupSize, withoutIdle, onFilterChange, onIntegerChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n      </div>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"linesToConsider\"\n          value={linesToConsider}\n          onChange={onIntegerChange}\n        />\n        <b>Stack trace lines to compare</b>\n      </label>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"minimalGroupSize\"\n          value={minimalGroupSize}\n          onChange={onIntegerChange}\n        />\n        <b>Minimal group size to show</b>\n      </label>\n    </div>\n  );\n\nexport default SimilarStacksSettings;\n","import React from 'react';\nimport isIdleThread from '../../common/isIdleThread';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport SimilarStacksGroup from './SimilarStacksGroup';\nimport './SimilarStacksPage.css';\nimport SimilarStacksSettings from './SimilarStacksSettings';\n\ntype State = {\n  linesToConsider: number;\n  minimalGroupSize: number;\n  withoutIdle: boolean;\n};\n\nexport default class SimilarStacksPage extends PageWithSettings<State> {\n\n  public state: State = {\n    linesToConsider: 40,\n    minimalGroupSize: 2,\n    withoutIdle: true,\n  };\n\n  protected PAGE_NAME = 'Similar Stacks';\n\n  public render() {\n    const threadGroups = this.groupByStackTrace(this.props.threadDumps, this.state.linesToConsider)\n      .filter(group => group.length >= this.state.minimalGroupSize);\n\n    return (\n      <div id=\"page\">\n        <SimilarStacksSettings\n          linesToConsider={this.state.linesToConsider}\n          minimalGroupSize={this.state.minimalGroupSize}\n          withoutIdle={this.state.withoutIdle}\n          onFilterChange={this.handleFilterChange}\n          onIntegerChange={this.handleIntegerChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: SimilarStacksPage.NO_THREAD_DUMPS }} />\n          : threadGroups.length === 0\n            ? <h4>{SimilarStacksPage.N0_THREADS_MATCHING}</h4>\n            : threadGroups.map((group, index) => (\n              <SimilarStacksGroup key={index}\n                threadGroup={group}\n                linesToConsider={this.state.linesToConsider} />))}\n      </div>\n    );\n  }\n\n  private groupByStackTrace(threadDumps: ThreadDump[], linesToConsider: number) {\n    const grouped: Map<string, Thread[]> = new Map();\n\n    threadDumps.forEach((threadDump) => {\n      threadDump.threads.forEach((thread) => {\n        const stackTrace = this.getStackTrace(thread, linesToConsider);\n\n        if (!stackTrace) {\n          return;\n        }\n\n        let similarStacks = grouped.get(stackTrace);\n        if (!similarStacks) {\n          similarStacks = [];\n        }\n        similarStacks.push(thread);\n\n        grouped.set(stackTrace, similarStacks);\n      });\n    });\n\n    return Array.from(grouped.values()).sort((t1, t2) => t2.length - t1.length);\n  }\n\n  private getStackTrace(thread: Thread, linesToConsider: number): string | null {\n    if (this.state.withoutIdle && isIdleThread(thread)) {\n      return null;\n    }\n\n    if (linesToConsider < 1) {\n      return thread.stackTrace.toString();\n    }\n\n    return thread.stackTrace.slice(0, linesToConsider).toString();\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  maxDifferingLines: number;\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class ThreadDetails extends React.PureComponent<Props, State> {\n  public state: State = {\n    showDetails: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n    const stack = thread.stackTrace.slice(0, Math.max(this.props.maxDifferingLines, 10));\n\n    return (\n      <>\n        <b>{Thread.getFormattedTime(thread)}</b>\n\n        <ul className=\"stacktrace\">\n          {stack.map((line, index) => (\n            <li key={index}>{line}</li>))}\n          <li><a onClick={this.handleClick}>See thread details</a></li>\n        </ul>\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetails from './ThreadDetails';\n\ntype Props = {\n  maxDifferingLines: number;\n  threadGroup: Thread[];\n};\n\nconst GroupDetails: React.SFC<Props> = ({ maxDifferingLines, threadGroup }) => {\n  return (\n    <>\n      {threadGroup.map((thread, index) =>\n        <ThreadDetails\n          key={index}\n          thread={thread}\n          maxDifferingLines={maxDifferingLines}\n        />)}\n    </>\n  );\n};\n\nexport default GroupDetails;\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport GroupDetails from './GroupDetails';\n\ntype Props = {\n  threadGroup: Thread[];\n  maxDifferingLines: number;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class StuckThreadsGroup extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: true,\n  };\n\n  public render() {\n    if (this.props.threadGroup.length === 0) {\n      return null;\n    }\n\n    const thread = this.props.threadGroup[0];\n    return (\n      <>\n        <h6 className=\"clickable\" onClick={this.toggleGroup}>\n          <span className={this.state.showDetails ? 'chevron' : 'chevron rotate'} />\n          {this.props.threadGroup.length} similar stack(s) for \"{thread.name}\"\n        </h6>\n\n        {this.state.showDetails &&\n          <GroupDetails\n            threadGroup={this.props.threadGroup}\n            maxDifferingLines={this.props.maxDifferingLines} />}\n      </>\n    );\n  }\n\n  private toggleGroup = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n}\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  maxDifferingLines: number;\n  minClusterSize: number;\n  withoutIdle: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onIntegerChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst StuckThreadsSettings: React.SFC<Props> =\n  ({ maxDifferingLines, minClusterSize, withoutIdle, onFilterChange, onIntegerChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n      </div>\n\n      <label>\n        <input\n          type=\"number\"\n          min=\"2\"\n          name=\"minClusterSize\"\n          value={minClusterSize}\n          onChange={onIntegerChange}\n        />\n        <b>Minimal similar stacks to consider a thread stuck</b>\n      </label>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"maxDifferingLines\"\n          value={maxDifferingLines}\n          onChange={onIntegerChange}\n        />\n        <b>Maximum differing lines between dumps</b>\n      </label>\n    </div>\n  );\n\nexport default StuckThreadsSettings;\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport isIdleThread from '../../common/isIdleThread';\nimport { WithThreadDumpsProps } from '../../common/withThreadDumps';\nimport Thread from '../../types/Thread';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport StuckThreadsGroup from './StuckThreadsGroup';\nimport StuckThreadsSettings from './StuckThreadsSettings';\n\ntype State = {\n  maxDifferingLines: number;\n  minClusterSize: number;\n  withoutIdle: boolean;\n};\n\nexport default class StuckThreadsPage extends PageWithSettings<State> {\n  protected PAGE_NAME = 'Stuck Threads';\n\n  constructor(props: WithThreadDumpsProps) {\n    super(props);\n\n    this.state = {\n      maxDifferingLines: 5,\n      minClusterSize: this.props.threadDumps.length,\n      withoutIdle: true,\n    };\n  }\n\n  public render() {\n    const threadOverTime = getThreadsOverTime(this.props.threadDumps);\n    const filtered = this.filterThreads(threadOverTime);\n    const clusters = this.buildClusters(filtered);\n\n    return (\n      <div id=\"page\">\n        <StuckThreadsSettings\n          maxDifferingLines={this.state.maxDifferingLines}\n          minClusterSize={this.state.minClusterSize}\n          withoutIdle={this.state.withoutIdle}\n          onFilterChange={this.handleFilterChange}\n          onIntegerChange={this.handleIntegerChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: StuckThreadsPage.NO_THREAD_DUMPS }} />\n          : clusters.length === 0\n            ? <h4>{StuckThreadsPage.N0_THREADS_MATCHING}</h4>\n            : clusters.map((group, index) => (\n              <StuckThreadsGroup key={index}\n                threadGroup={group}\n                maxDifferingLines={this.state.maxDifferingLines} />))}\n      </div>\n    );\n  }\n\n  private filterThreads = (threadDumps: Array<Map<number, Thread>>): Thread[][] => {\n    return threadDumps\n      .map(threadDump => this.filterThread(threadDump))\n      .filter(dump => dump.length > 0);\n  }\n\n  private filterThread = (threadOverTime: Map<number, Thread>): Thread[] => {\n    const filtered = [];\n\n    for (const thread of threadOverTime) {\n      if (this.state.withoutIdle && isIdleThread(thread[1])) {\n        continue;\n      }\n\n      filtered.push(thread[1]);\n    }\n\n    return filtered;\n  }\n\n  private buildClusters = (threadDumps: Thread[][]): Thread[][] => {\n    const clusters: Thread[][] = [];\n\n    for (const threadOverTime of threadDumps) {\n      this.getClustersFromThread(threadOverTime)\n        .filter(c => c.length >= this.state.minClusterSize)\n        .forEach(c => clusters.push(c));\n    }\n\n    return clusters.sort((c1, c2) => c2.length - c1.length);\n  }\n\n  private getClustersFromThread = (threadOverTime: Thread[]): Thread[][] => {\n    const clusters = [];\n\n    let currentCluster = [threadOverTime[0]];\n    for (let i = 1; i < threadOverTime.length; i++) {\n      const previous = threadOverTime[i - 1];\n      const current = threadOverTime[i];\n\n      if (this.areThreadsSimilarEnough(previous, current)) {\n        currentCluster.push(current);\n      } else {\n        clusters.push(currentCluster);\n        currentCluster = [current];\n      }\n    }\n\n    clusters.push(currentCluster);\n    return clusters;\n  }\n\n  private areThreadsSimilarEnough = (t1: Thread, t2: Thread): boolean => {\n    const stack1 = t1.stackTrace;\n    const stack2 = t2.stackTrace;\n\n    if (Math.abs(stack1.length - stack2.length) > this.state.maxDifferingLines) {\n      return false;\n    }\n\n    const limit = Math.max(stack1.length, stack2.length);\n    for (let i = limit; i >= 0; i--) {\n      if (stack1[i] !== stack2[i]) {\n        return (i <= this.state.maxDifferingLines);\n      }\n    }\n\n    return true;\n  }\n}\n","import React from 'react';\r\nimport {\r\n  CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis,\r\n} from 'recharts';\r\nimport ThreadDump from '../../types/ThreadDump';\r\n\r\ntype Props = {\r\n  threadDumps: ThreadDump[];\r\n};\r\n\r\nconst LoadAveragesChart: React.SFC<Props> = ({ threadDumps }) => {\r\n  const data: object[] = [];\r\n  threadDumps.map((threadDump) => {\r\n    if (threadDump.loadAverages) {\r\n      data.push({\r\n        fifteenMinutes: threadDump.loadAverages.fifteenMinutes,\r\n        fiveMinutes: threadDump.loadAverages.fiveMinutes,\r\n        name: ThreadDump.getFormattedTime(threadDump),\r\n        oneMinute: threadDump.loadAverages.oneMinute,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3>Load averages</h3>\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <LineChart data={data}>\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" />\r\n          <CartesianGrid stroke=\"#EBECF0\" strokeDasharray=\"5 5\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line name=\"One minute\" dataKey=\"oneMinute\" stroke=\"#36B37E\" />\r\n          <Line name=\"Five minutes\" dataKey=\"fiveMinutes\" stroke=\"#FFAB00\" />\r\n          <Line name=\"Fifteen minutes\" dataKey=\"fifteenMinutes\" stroke=\"#6554C0\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadAveragesChart;\r\n","import { TooltipFormatter } from 'recharts';\n\n// perform a \"best effort\" conversion to GBs\nconst labelFormatter: TooltipFormatter\n  = (value: string | number | Array<string | number>): React.ReactNode => {\n    return convert(value as number);\n  };\n\nconst convert = (value: number): string => {\n  if (value > 1000000) {\n    return `${round(value / 1000000)} GB`;\n  }\n  return `${round(value / 1000)} MB`;\n};\n\nconst round = (value: number): string => {\n  return value.toFixed(2);\n};\n\nexport default labelFormatter;\n","import React from 'react';\nimport {\n  Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip,\n} from 'recharts';\nimport MemoryUsage from '../../types/MemoryUsage';\nimport ThreadDump from '../../types/ThreadDump';\nimport labelFormatter from './LabelFormatter';\n\nconst COLORS = ['#00B8D9', '#36B37E'];\n\ntype Props = {\n  threadDumps: ThreadDump[];\n};\n\nconst MemoryUsageChart: React.SFC<Props> = ({ threadDumps }) => {\n  const memoryUsages: MemoryUsage[] = threadDumps\n    .map(threadDump => threadDump.memoryUsage)\n    .filter(memoryUsage => !!memoryUsage);\n\n  const freeMemoryAvg = memoryUsages.reduce((a, b) => a + b.memoryFree, 0) / memoryUsages.length;\n  const usedMemoryAvg = memoryUsages.reduce((a, b) => a + b.memoryUsed, 0) / memoryUsages.length;\n\n  const data: object[] = [\n    { name: 'Used memory', value: usedMemoryAvg },\n    { name: 'Free memory', value: freeMemoryAvg },\n  ];\n\n  return (\n    <div>\n      <h3>Memory usage</h3>\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={data} dataKey=\"value\" nameKey=\"name\">\n            {\n              data.map((_, index) => <Cell key={index} fill={COLORS[index]} />)\n            }\n          </Pie>\n          <Tooltip formatter={labelFormatter} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default MemoryUsageChart;\n","import React from 'react';\r\nimport {\r\n  CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis,\r\n} from 'recharts';\r\nimport ThreadDump from '../../types/ThreadDump';\r\n\r\ntype Props = {\r\n  threadDumps: ThreadDump[];\r\n};\r\n\r\nconst RunningProcessesChart: React.SFC<Props> = ({ threadDumps }) => {\r\n  const data: object[] = [];\r\n  threadDumps.map((threadDump) => {\r\n    if (threadDump.loadAverages) {\r\n      data.push({\r\n        name: ThreadDump.getFormattedTime(threadDump),\r\n        runningProcesses: threadDump.runningProcesses,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3>Running processes</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <LineChart data={data}>\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" />\r\n          <CartesianGrid stroke=\"#EBECF0\" strokeDasharray=\"5 5\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line\r\n            name=\"Running processes\"\r\n            dataKey=\"runningProcesses\"\r\n            stroke=\"#36B37E\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunningProcessesChart;\r\n","import React from 'react';\nimport {\n  Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip,\n} from 'recharts';\nimport MemoryUsage from '../../types/MemoryUsage';\nimport ThreadDump from '../../types/ThreadDump';\nimport labelFormatter from './LabelFormatter';\n\nconst COLORS = ['#6554C0', '#FF5630'];\n\ntype Props = {\n  threadDumps: ThreadDump[];\n};\n\nconst SwapUsageChart: React.SFC<Props> = ({ threadDumps }) => {\n  const memoryUsages: MemoryUsage[] = threadDumps\n    .map(threadDump => threadDump.memoryUsage)\n    .filter(memoryUsage => !!memoryUsage);\n\n  const freeSwapAvg = memoryUsages.reduce((a, b) => a + b.swapFree, 0) / memoryUsages.length;\n  const usedSwapAvg = memoryUsages.reduce((a, b) => a + b.swapUsed, 0) / memoryUsages.length;\n\n  const data: object[] = [\n    { name: 'Free swap', value: freeSwapAvg },\n    { name: 'Used swap', value: usedSwapAvg },\n  ];\n\n  return (\n    <div>\n      <h3>Swap usage</h3>\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={data} dataKey=\"value\" nameKey=\"name\">\n            {\n              data.map((_, index) => <Cell key={index} fill={COLORS[index]} />)\n            }\n          </Pie>\n          <Tooltip formatter={labelFormatter} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default SwapUsageChart;\n","import React from 'react';\r\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\r\nimport LoadAveragesChart from './LoadAveragesChart';\r\nimport MemoryUsageChart from './MemoryUsageChart';\r\nimport RunningProcessesChart from './RunningProcessesChart';\r\nimport './SummaryPage.css';\r\nimport SwapUsageChart from './SwapUsageChart';\r\n\r\nexport default class SummaryPage extends PageWithSettings<any> {\r\n  public render = () => (\r\n    <div id=\"wide-page\">\r\n      {!this.props.threadDumps.some(dump => !!dump.loadAverages)\r\n        ? <h4 dangerouslySetInnerHTML={{ __html: SummaryPage.NO_CPU_INFOS }} />\r\n        : <>\r\n          <div id=\"memory-usages\">\r\n            <MemoryUsageChart threadDumps={this.props.threadDumps} />\r\n            <SwapUsageChart threadDumps={this.props.threadDumps} />\r\n          </div>\r\n          <LoadAveragesChart threadDumps={this.props.threadDumps} />\r\n          <RunningProcessesChart threadDumps={this.props.threadDumps} />\r\n        </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Thread from '../../types/Thread';\n\ntype Props = {\n  isFilteredByStack: boolean;\n  threadsNumber: number;\n  threadDumps: Array<Map<number, Thread>>;\n};\n\nconst ThreadsOverviewFilteringSummary: React.SFC<Props>\n  = ({ isFilteredByStack, threadsNumber, threadDumps }) => {\n\n    if (isFilteredByStack) {\n      const matching = threadDumps.reduce(matchingInGroupCounter, 0);\n      const total = threadDumps.reduce(nonEmptyCounter, 0);\n      const percentage = (matching / total * 100).toFixed(1);\n\n      return (\n        <p id=\"matching-summary\">\n          {matching} out of {total} ({percentage}%) visible threads matching the stack trace filters\n        </p>\n      );\n    }\n\n    if (threadsNumber !== threadDumps.length) {\n      const matching = threadDumps.length;\n      const percentage = (matching / threadsNumber * 100).toFixed(1);\n\n      return (\n        <p id=\"matching-summary\">\n          {matching} out of {threadsNumber} ({percentage}%) threads matching the thread name filters\n        </p>\n      );\n    }\n\n    return <p id=\"matching-summary\" />;\n  };\n\nconst matchingInGroupCounter = (sum: number, currentGroup: Map<number, Thread>): number => {\n  return sum + Array.from(currentGroup.values()).reduce(matchingCounter, 0);\n};\nconst matchingCounter = (sum: number, currentThread: Thread): number => {\n  return sum + (currentThread.matchingFilter ? 1 : 0);\n};\n\nconst nonEmptyCounter = (sum: number, currentGroup: Map<number, Thread>): number => {\n  return sum + Array.from(currentGroup.values()).length;\n};\n\nexport default ThreadsOverviewFilteringSummary;\n","import React from 'react';\n\nconst ThreadsOverviewLegend: React.SFC = () => (\n  <table id=\"thread-overview-legend\">\n    <tbody>\n      <tr>\n        <td className=\"runnable\">runnable</td>\n        <td className=\"blocked\">blocked</td>\n        <td className=\"waiting\">waiting</td>\n        <td className=\"timed-waiting\">timed waiting</td>\n        <td className=\"unknown\">unknown</td>\n        <td />\n        <td className=\"matching\">matching filter</td>\n      </tr>\n    </tbody>\n  </table>\n);\n\nexport default ThreadsOverviewLegend;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  nonJvm: boolean;\n  tomcat: boolean;\n  nonTomcat: boolean;\n  database: boolean;\n  lucene: boolean;\n  nameFilter: string;\n  stackFilter: string;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onRegExpChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst ThreadsOverviewSettings: React.SFC<Props> = ({ nonJvm, tomcat, nonTomcat,\n  database, lucene, nameFilter, stackFilter, onFilterChange, onRegExpChange }) => (\n    <div id=\"threads-overview-settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"nonJvm\" displayName=\"Non-JVM\"\n          checked={nonJvm} onChange={onFilterChange} />\n\n        <Filter name=\"tomcat\" displayName=\"Tomcat\"\n          checked={tomcat} onChange={onFilterChange} />\n\n        <Filter name=\"nonTomcat\" displayName=\"Non-Tomcat\"\n          checked={nonTomcat} onChange={onFilterChange} />\n\n        <Filter name=\"database\" displayName=\"Database\"\n          checked={database} onChange={onFilterChange} />\n\n        <Filter name=\"lucene\" displayName=\"Lucene\"\n          checked={lucene} onChange={onFilterChange} />\n      </div>\n\n      <div id=\"regexp-filters\">\n        <label>\n          <input type=\"text\" name=\"nameFilter\" value={nameFilter} onChange={onRegExpChange}\n          />\n          <b>Thread name RegExp</b>\n        </label>\n\n        <label>\n          <input type=\"text\" name=\"stackFilter\" value={stackFilter} onChange={onRegExpChange}\n          />\n          <b>Stack trace RegExp</b>\n        </label>\n      </div>\n    </div>\n  );\n\nexport default ThreadsOverviewSettings;\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadStatus from '../../types/ThreadStatus';\r\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\r\n\r\ntype Props = {\r\n  thread?: Thread;\r\n  isFiltered: boolean;\r\n  isMatchingFilter: boolean;\r\n};\r\n\r\ntype State = {\r\n  showDetails: boolean;\r\n};\r\n\r\nexport default class ThreadOverviewItem extends React.PureComponent<Props, State> {\r\n\r\n  public state: State = {\r\n    showDetails: false,\r\n  };\r\n\r\n  public render() {\r\n    const thread = this.props.thread;\r\n\r\n    if (!thread) {\r\n      return <td className=\"empty\" />;\r\n    }\r\n\r\n    const className = (this.props.isFiltered)\r\n      ? this.props.isMatchingFilter ? 'matching' : ''\r\n      : thread.status ? thread.status.toString() : ThreadStatus.UNKNOWN.toString();\r\n\r\n    return (\r\n      <>\r\n        <td className={className} onClick={this.toggleDetails}>\r\n          {thread.stackTrace[0]}\r\n          <span>{thread.stackTrace[0]}</span>\r\n        </td>\r\n\r\n        {this.state.showDetails &&\r\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\r\n      </>\r\n    );\r\n  }\r\n\r\n  private toggleDetails = () => {\r\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\r\n  }\r\n\r\n  private handleUnload = () => {\r\n    this.setState({ showDetails: false });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadOverviewItem from './ThreadOverviewItem';\r\n\r\ntype Props = {\r\n  total: number;\r\n  threads: Map<number, Thread>;\r\n  isFiltered: boolean;\r\n};\r\n\r\nconst ThreadOverviewRow: React.SFC<Props> = ({ total, threads, isFiltered }) => {\r\n  const threadsPadded: Array<Thread | undefined> = [];\r\n  for (let i = 0; i < total; i++) {\r\n    threadsPadded[i] = threads.get(i);\r\n  }\r\n\r\n  const firstThread = threadsPadded.find(thread => thread !== undefined);\r\n  const threadName = firstThread ? firstThread.name : '';\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"name\">\r\n        {threadName}\r\n        <span>{threadName}</span>\r\n      </td>\r\n      {threadsPadded.map((thread, i) => (\r\n        <ThreadOverviewItem key={i}\r\n          thread={thread}\r\n          isFiltered={isFiltered}\r\n          isMatchingFilter={thread ? thread.matchingFilter : false}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ThreadOverviewRow;\r\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadOverviewRow from './ThreadOverviewRow';\r\n\r\ntype Props = {\r\n  dates: Array<string | null>;\r\n  isFilteredByStack: boolean;\r\n  threadDumps: Array<Map<number, Thread>>;\r\n};\r\n\r\nconst ThreadsOverview: React.SFC<Props> = ({ dates, isFilteredByStack, threadDumps }) => (\r\n  <div id=\"threads-overview-table-wrapper\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th />\r\n          {dates.map((date, index) => (\r\n            <th key={index}>\r\n              {date}\r\n              <span>{date}</span>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {threadDumps.map((threads, index) => (\r\n          <ThreadOverviewRow key={index}\r\n            isFiltered={isFilteredByStack}\r\n            total={dates.length}\r\n            threads={threads}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nexport default ThreadsOverview;\r\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport ThreadsOverviewFilteringSummary from './ThreadsOverviewFilteringSummary';\nimport ThreadsOverviewLegend from './ThreadsOverviewLegend';\nimport './ThreadsOverviewPage.css';\nimport ThreadsOverviewSettings from './ThreadsOverviewSettings';\nimport ThreadsOverviewTable from './ThreadsOverviewTable';\n\ntype State = {\n  nonJvm: boolean;\n  tomcat: boolean;\n  nonTomcat: boolean;\n  database: boolean;\n  lucene: boolean;\n  nameFilter: string;\n  stackFilter: string;\n};\n\nexport default class ThreadsOverviewPage extends PageWithSettings<State> {\n\n  // tslint:disable:object-literal-sort-keys\n  public state = {\n    nonJvm: true,\n    tomcat: false,\n    nonTomcat: false,\n    database: false,\n    lucene: false,\n    nameFilter: '',\n    stackFilter: '',\n  };\n  // tslint:enable:object-literal-sort-keys\n\n  protected PAGE_NAME = 'Threads Overview';\n\n  // tslint:disable:max-line-length\n  private jvmRegex = /^Attach Listener|^C[12] CompilerThread|^G1 Concurrent |^G1 Main|^Gang worker#|^GC Daemon|^Service Thread|^Signal Dispatcher|^String Deduplication Thread|^Surrogate Locker Thread|^VM Periodic|^VM Thread/;\n  private tomcatRegex = /^http(s\\-jsse)?\\-[a-z]io\\-[0-9]+\\-exec\\-[0-9]+/;\n  private databaseRegex = /^oracle\\.jdbc\\.driver\\.|^org\\.postgresql\\.|^com\\.microsoft\\.sqlserver\\.|^com\\.mysql\\.jdbc\\./;\n  private luceneRegex = /^org\\.apache\\.lucene\\./;\n  // tslint:enable:max-line-length\n\n  public render() {\n    const threadOverTime = getThreadsOverTime(this.props.threadDumps);\n    const filteredDumps = this.filterThreads(threadOverTime);\n    const dates = this.props.threadDumps.map(dump => ThreadDump.getFormattedTime(dump));\n    const isFilteredByStack = this.isFilteredByStack();\n\n    return (\n      <div id=\"wide-page\">\n        <ThreadsOverviewSettings\n          nonJvm={this.state.nonJvm}\n          tomcat={this.state.tomcat}\n          nonTomcat={this.state.nonTomcat}\n          database={this.state.database}\n          lucene={this.state.lucene}\n          nameFilter={this.state.nameFilter}\n          stackFilter={this.state.stackFilter}\n          onFilterChange={this.handleFilterChange}\n          onRegExpChange={this.handleRegExpChange}\n        />\n\n        <ThreadsOverviewFilteringSummary\n          isFilteredByStack={isFilteredByStack}\n          threadsNumber={threadOverTime.length}\n          threadDumps={filteredDumps}\n        />\n\n        <ThreadsOverviewLegend />\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: ThreadsOverviewPage.NO_THREAD_DUMPS }} />\n          : <ThreadsOverviewTable\n            dates={dates}\n            isFilteredByStack={isFilteredByStack}\n            threadDumps={filteredDumps}\n          />\n        }\n      </div>\n    );\n  }\n\n  private isFilteredByStack = (): boolean => {\n    return this.state.stackFilter.length > 0\n      || this.state.lucene\n      || this.state.database;\n  }\n\n  private filterThreads = (threadDumps: Array<Map<number, Thread>>) => {\n    let filtered = threadDumps;\n    filtered = this.filterByName(filtered, this.state.nameFilter);\n    this.markMatchingStackFilter(filtered, this.state.stackFilter);\n    return filtered;\n  }\n\n  private filterByName = (threadDumps: Array<Map<number, Thread>>, nameFilter: string) => {\n    let userProvided: RegExp;\n    if (nameFilter) {\n      try {\n        userProvided = new RegExp(nameFilter, 'i');\n      } catch {\n        // ignore when user provides invalid RegExp\n      }\n    }\n\n    return threadDumps\n      .filter(threads => this.state.nonJvm ? !this.matchesName(threads, this.jvmRegex) : true)\n      .filter(threads => this.state.tomcat ? this.matchesName(threads, this.tomcatRegex) : true)\n      .filter(threads => this.state.nonTomcat ? !this.matchesName(threads, this.tomcatRegex) : true)\n      .filter(threads => userProvided ? this.matchesName(threads, userProvided) : true);\n  }\n\n  private matchesName(threads: Map<number, Thread>, regex: RegExp): boolean {\n    for (const thread of threads) {\n      if (regex.test(thread[1].name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private markMatchingStackFilter = (threadDumps: Array<Map<number, Thread>>, filter: string) => {\n    this.clearAllMatches(threadDumps);\n\n    const filters = this.getStackTraceFilters(filter);\n    if (filters.length === 0) {\n      return;\n    }\n\n    threadDumps.forEach((threads) => {\n      threads.forEach(thread => this.markIfMatchesAllFilters(thread, filters));\n    });\n  }\n\n  private clearAllMatches = (threadDumps: Array<Map<number, Thread>>) => {\n    threadDumps.forEach((threads) => {\n      threads.forEach((thread) => {\n        thread.matchingFilter = false;\n      });\n    });\n  }\n\n  private getStackTraceFilters = (userProvidedFilter: string): RegExp[] => {\n    const filters: RegExp[] = [];\n\n    if (userProvidedFilter) {\n      try {\n        const userProvided = new RegExp(userProvidedFilter, 'i');\n        filters.push(userProvided);\n      } catch {\n        // ignore when user provides invalid RegExp\n      }\n    }\n\n    if (this.state.lucene) {\n      filters.push(this.luceneRegex);\n    }\n    if (this.state.database) {\n      filters.push(this.databaseRegex);\n    }\n\n    return filters;\n  }\n\n  private markIfMatchesAllFilters = (thread: Thread, filters: RegExp[]) => {\n    for (const filter of filters) {\n      if (!this.matchesStackTraceFilter(thread, filter)) {\n        return;\n      }\n    }\n    thread.matchingFilter = true;\n  }\n\n  private matchesStackTraceFilter = (thread: Thread, filter: RegExp) => {\n    for (const line of thread.stackTrace) {\n      if (filter.test(line)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import React from 'react';\nimport ReactGA from 'react-ga';\nimport { Route, Switch } from 'react-router-dom';\nimport { withThreadDumps as page } from '../common/withThreadDumps';\nimport './Container.css';\nimport CpuConsumersPage from './CpuConsumers/CpuConsumersPage';\nimport MonitorsPage from './Monitors/MonitorsPage';\nimport Navigation from './Navigation/Navigation';\nimport NavToggle from './Navigation/NavToggle';\nimport NotFoundError from './NotFoundError';\nimport SimilarStacksPage from './SimilarStacks/SimilarStacksPage';\nimport StuckThreadsPage from './StuckThreads/StuckThreadsPage';\nimport SummaryPage from './Summary/SummaryPage';\nimport ThreadsOverviewPage from './ThreadsOverview/ThreadsOverviewPage';\n\ntype State = {\n  navigationOpen: boolean;\n};\n\nclass Container extends React.PureComponent<any, State> {\n\n  public state: State = {\n    navigationOpen: true,\n  };\n\n  public render() {\n    return (\n      <div id=\"container\">\n        <Navigation open={this.state.navigationOpen} />\n\n        <NavToggle open={this.state.navigationOpen} onClick={this.toggleNavigation} />\n\n        <div id=\"content\">\n          <Switch>\n            <Route exact path=\"/:key/summary/\" component={page(SummaryPage)} />\n            <Route exact path=\"/:key/cpu-consumers/\" component={page(CpuConsumersPage)} />\n            <Route exact path=\"/:key/similar-stacks/\" component={page(SimilarStacksPage)} />\n            <Route exact path=\"/:key/stuck-threads/\" component={page(StuckThreadsPage)} />\n            <Route exact path=\"/:key/threads-overview/\" component={page(ThreadsOverviewPage)} />\n            <Route exact path=\"/:key/monitors/\" component={page(MonitorsPage)} />\n            <Route component={page(NotFoundError)} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n\n  private toggleNavigation = () => {\n    this.setState((prevState) => {\n      const isOpen = !prevState.navigationOpen;\n\n      ReactGA.event({\n        action: isOpen ? 'Navigation toggled open' : 'Navigation toggled close',\n        category: 'Navigation',\n      });\n\n      return { navigationOpen: isOpen };\n    });\n  }\n}\n\nexport default Container;\n","import LoadAverages from './LoadAverage';\nimport MemoryUsage from './MemoryUsage';\nimport ThreadCpuUsage from './ThreadCpuUsage';\n\nexport default class CpuUsage {\n  public runningProcesses!: number;\n  public loadAverages!: LoadAverages | null;\n  public memoryUsage!: MemoryUsage;\n  public threadCpuUsages!: ThreadCpuUsage[];\n  private epoch: number | null;\n\n  constructor(timestamp: string) {\n    // timestamp is in the format of hh:mm:ss, e.g. 09:50:49\n    const hours = parseInt(timestamp.substring(0, 2), 10);\n    const minutes = parseInt(timestamp.substring(3, 5), 10);\n    const seconds = parseInt(timestamp.substring(6), 10);\n\n    this.epoch = hours * 3600000 + minutes * 60000 + seconds * 1000;\n  }\n\n  public getEpoch = () => {\n    return this.epoch;\n  }\n}\n","export default class LoadAverages {\n  public oneMinute!: number;\n  public fiveMinutes!: number;\n  public fifteenMinutes!: number;\n}\n","export default class MemoryUsage {\n  public memoryTotal!: number;\n  public memoryUsed!: number;\n  public memoryFree!: number;\n  public swapTotal!: number;\n  public swapUsed!: number;\n  public swapFree!: number;\n}\n","export default class ThreadCpuUsage {\n  public id!: number;\n  public cpuUsage!: number;\n  public runningFor!: string;\n}\n","export function matchOne(pattern: RegExp, str?: string): string {\n  const execArray: RegExpExecArray | null = pattern.exec(str || '');\n  return execArray ? execArray[1] : '';\n}\n\nexport function matchMultipleGroups(pattern: RegExp, str?: string): string[] {\n  const execArray: RegExpExecArray | null = pattern.exec(str || '');\n  return execArray != null ? execArray.slice(1) : [];\n}\n\n// any RegExp passed here needs to have the 'g' flag, otherwise it'll cause an infinite loop!\nexport function matchMultipleTimes(pattern: RegExp, str?: string): string[] {\n  const matches: string[] = [];\n\n  let execArray: RegExpExecArray | null = pattern.exec(str || '');\n  while (execArray != null) {\n    matches.push(execArray[1]);\n    execArray = pattern.exec(str || '');\n  }\n\n  return matches;\n}\n","import CpuUsage from '../types/CpuUsage';\nimport LoadAverages from '../types/LoadAverage';\nimport MemoryUsage from '../types/MemoryUsage';\nimport ThreadCpuUsage from '../types/ThreadCpuUsage';\nimport { matchMultipleGroups, matchMultipleTimes, matchOne } from './RegExpUtils';\n\nexport const CPU_USAGE_TIMESTAMP_PATTERN: RegExp = /^top - ([0-9]{2}:[0-9]{2}:[0-9]{2})/;\nconst LOAD_AVERAGES_PATTERN: RegExp = / load average: ([0-9\\.]+), ([0-9\\.]+), ([0-9\\.]+)/;\nconst RUNNING_PROCESSES_PATTERN: RegExp = /([0-9\\.]+) running/;\nconst TOTAL_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k?[ +]total/;\nconst USED_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k? used/;\nconst FREE_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k? free/;\nconst COLUMN_MATCHER: RegExp = /([^\\s]+) +/g;\n\nexport type ParseCpuUsageCallback = (cpuUsage: CpuUsage) => void;\n\nexport default class CpuUsageParser {\n\n  public static parseCpuUsage(lines: string[], callback: ParseCpuUsageCallback) {\n    const cpuUsage: CpuUsage = new CpuUsage(matchOne(CPU_USAGE_TIMESTAMP_PATTERN, lines[0]));\n\n    // top - 10:25:00 up 3 days, 13:14,  1 user,  load average: 90.75, 97.79, 86.84\n    cpuUsage.loadAverages = CpuUsageParser.parseLoadAverages(lines.shift());\n\n    // Tasks: 466 total,   4 running, 462 sleeping,   0 stopped,   0 zombie\n    cpuUsage.runningProcesses = CpuUsageParser.parseRunningProcesses(lines.shift());\n\n    // Cpu(s): 11.4%us,  0.5%sy,  0.0%ni, 87.9%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st\n    lines.shift(); // ignoring as it's not a useful data for us\n\n    // Mem:  65846052k total, 57542808k used,  8303244k free,  1200960k buffers\n    // Swap:  2097148k total,        0k used,  2097148k free, 23876776k cached\n    cpuUsage.memoryUsage = CpuUsageParser.parseMemoryUsage(lines.shift(), lines.shift());\n\n    //\n    // PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n    // 13038 wrtjava   20   0 53.0g  26g 1.2g S 48.6 41.6  15:04.56 java\n    // 18393 wrtjava   20   0 53.0g  26g 1.2g S  9.7 41.6   4:08.78 java\n    // 19084 wrtjava   20   0 53.0g  26g 1.2g S  9.7 41.6   3:07.71 java\n    //  ... until <EOT>\n    cpuUsage.threadCpuUsages = CpuUsageParser.parseThreadCpuUsages(lines);\n\n    callback(cpuUsage);\n  }\n\n  private static parseLoadAverages(line?: string): LoadAverages | null {\n    const matches: string[] = matchMultipleGroups(LOAD_AVERAGES_PATTERN, line);\n\n    if (matches.length !== 3) {\n      console.error(`Unable to parse load averages from line: ${line}`);\n      return null;\n    }\n\n    const loadAverages = new LoadAverages();\n    loadAverages.oneMinute = parseFloat(matches[0]);\n    loadAverages.fiveMinutes = parseFloat(matches[1]);\n    loadAverages.fifteenMinutes = parseFloat(matches[2]);\n    return loadAverages;\n  }\n\n  private static parseRunningProcesses(line?: string): number {\n    return parseInt(matchOne(RUNNING_PROCESSES_PATTERN, line), 10);\n  }\n\n  private static parseMemoryUsage(line1?: string, line2?: string): MemoryUsage {\n    const memoryUsage: MemoryUsage = new MemoryUsage();\n\n    memoryUsage.memoryTotal = parseInt(matchOne(TOTAL_MEMORY_PATTERN, line1), 10);\n    memoryUsage.memoryUsed = parseInt(matchOne(USED_MEMORY_PATTERN, line1), 10);\n    memoryUsage.memoryFree = parseInt(matchOne(FREE_MEMORY_PATTERN, line1), 10);\n\n    memoryUsage.swapTotal = parseInt(matchOne(TOTAL_MEMORY_PATTERN, line2), 10);\n    memoryUsage.swapUsed = parseInt(matchOne(USED_MEMORY_PATTERN, line2), 10);\n    memoryUsage.swapFree = parseInt(matchOne(FREE_MEMORY_PATTERN, line2), 10);\n\n    return memoryUsage;\n  }\n\n  private static parseThreadCpuUsages(lines: string[]): ThreadCpuUsage[] {\n    const threadCpuUsages: ThreadCpuUsage[] = [];\n\n    for (let i = 2; i < lines.length; i++) {\n      const line: string = lines[i];\n      if (!line) continue;\n\n      const columns: string[] = matchMultipleTimes(COLUMN_MATCHER, line);\n      if (columns.length < 11) {\n        console.error(`Unable to parse thread cpu usage info from line: ${line}`);\n        continue;\n      }\n\n      const threadCpuUsage: ThreadCpuUsage = new ThreadCpuUsage();\n      threadCpuUsage.id = parseInt(columns[0], 10);\n      threadCpuUsage.cpuUsage = parseFloat(columns[8]);\n      threadCpuUsage.runningFor = columns[10];\n      threadCpuUsages.push(threadCpuUsage);\n    }\n\n    return threadCpuUsages;\n  }\n}\n","import Thread from './Thread';\n\nexport default class Lock {\n  public id!: string;\n  public className!: string;\n  public owner: Thread | null = null;\n  public waiting: Thread[] = [];\n}\n","import Lock from '../types/Lock';\nimport Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\nimport ThreadStatus from '../types/ThreadStatus';\nimport { matchMultipleGroups, matchOne } from './RegExpUtils';\n\nconst THREAD_HEADER_PREFIX: string = '\"';\n\n// tslint:disable:max-line-length\nexport const THREAD_DUMP_DATE_PATTERN: RegExp = /^([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})\\r?$/;\nconst NAME_PATTERN: RegExp = /^\\\"(.*)\\\" /;\nconst NID_PATTERN: RegExp = / nid=([0-9a-fx,]+)/;\nconst TID_PATTERN: RegExp = / tid=([0-9a-fx,]+)/;\nconst FRAME_PATTERN: RegExp = /^\\s+at (.*)/;\nconst THREAD_STATE_PATTERN: RegExp = /^\\s*java.lang.Thread.State: (.*)/;\nconst SYNCHRONIZATION_STATUS_PATTERN: RegExp = /^\\s+- (.*?) +<([x0-9a-f]+)> \\(a (.*)\\)/;\nconst LOCKED_OWNABLE_SYNCHRONIZERS_PATTERN: RegExp = /^\\s+Locked ownable synchronizers:/;\nconst NONE_HELD_PATTERN: RegExp = /^\\s+- None/;\nconst HELD_LOCK_PATTERN: RegExp = /^\\s+- <([x0-9a-f]+)> \\(a (.*)\\)/;\nconst JNI_REFERENCES_PATTERN: RegExp = /^\\s?JNI global references: (\\d+)/;\n// tslint:enable:max-line-length\n\nexport type ParseThreadDumpCallback = (threadDump: ThreadDump) => void;\n\nexport default class ThreadDumpParser {\n\n  public static parseThreadDump(lines: string[], callback: ParseThreadDumpCallback) {\n    const threadDump = new ThreadDump(matchOne(THREAD_DUMP_DATE_PATTERN, lines.shift() as string));\n    lines.forEach(line => ThreadDumpParser.parseLine(line, threadDump));\n    ThreadDumpParser.identifyAnonymousSynchronizers(threadDump.threads);\n\n    callback(threadDump);\n  }\n\n  private static currentThread: Thread;\n\n  private static parseLine(line: string, threadDump: ThreadDump): void {\n    if (line.startsWith(THREAD_HEADER_PREFIX)) {\n      ThreadDumpParser.parseThreadHeader(line, threadDump);\n    } else if (line) {\n      ThreadDumpParser.parseStackLine(line, threadDump);\n    }\n  }\n\n  private static parseThreadHeader(header: string, threadDump: ThreadDump): void {\n    const name = matchOne(NAME_PATTERN, header).trim();\n    // Depending on the way thread dumps were made, they can either have NID or TID\n    // We prefer NID, as it allows linking thread dumps with cpu_usage files\n    const nid = parseInt(matchOne(NID_PATTERN, header), 16);\n    const tid = parseInt(matchOne(TID_PATTERN, header), 16);\n    const id = nid !== 0 ? nid : tid;\n\n    ThreadDumpParser.currentThread = new Thread(id, name, threadDump.getEpoch());\n    threadDump.threads.push(ThreadDumpParser.currentThread);\n  }\n\n  private static parseStackLine(line: string, threadDump: ThreadDump): void {\n    if (!ThreadDumpParser.currentThread) {\n      return;\n    }\n\n    const frame: string = matchOne(FRAME_PATTERN, line);\n    if (frame) {\n      ThreadDumpParser.currentThread.stackTrace.push(frame);\n      return;\n    }\n\n    const threadState: string = matchOne(THREAD_STATE_PATTERN, line);\n    if (threadState) {\n      ThreadDumpParser.currentThread.status = ThreadDumpParser.stringToThreadStatus(threadState);\n      return;\n    }\n\n    const synchronizationStatus = matchMultipleGroups(SYNCHRONIZATION_STATUS_PATTERN, line);\n    if (synchronizationStatus && synchronizationStatus.length === 3) {\n      const state: string = synchronizationStatus[0];\n      const lockId: string = synchronizationStatus[1];\n      const className: string = synchronizationStatus[2];\n\n      switch (state) {\n        case 'waiting on':\n        case 'parking to wait for':\n        case 'waiting to lock':\n          let lock: Lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n          lock.waiting.push(ThreadDumpParser.currentThread);\n          ThreadDumpParser.currentThread.lockWaitingFor = lock;\n          return;\n\n        case 'locked':\n          if (ThreadDumpParser.currentThread.lockWaitingFor\n            && ThreadDumpParser.currentThread.lockWaitingFor.id === lockId) {\n            // lock is released while waiting for the notification\n            return;\n          }\n          lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n          lock.owner = ThreadDumpParser.currentThread;\n          ThreadDumpParser.currentThread.locksHeld.push(lock);\n          ThreadDumpParser.currentThread.classicalLocksHeld.push(lock);\n          return;\n\n        case 'eliminated':\n          // redundant lock that has been removed in the bytecode - we don't care about those\n          return;\n\n        default:\n          console.warn(`Unknown synchronziation status: ${line}`);\n          return;\n      }\n    }\n\n    const lockHeld: string[] = matchMultipleGroups(HELD_LOCK_PATTERN, line);\n    if (lockHeld && lockHeld.length === 2) {\n      const lockId: string = lockHeld[0];\n      const className: string = lockHeld[1];\n\n      const lock: Lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n      lock.owner = ThreadDumpParser.currentThread;\n      ThreadDumpParser.currentThread.locksHeld.push(lock);\n      return;\n    }\n\n    // ignore those lines, as they provide no useful data\n    if (matchOne(LOCKED_OWNABLE_SYNCHRONIZERS_PATTERN, line)\n      || matchOne(NONE_HELD_PATTERN, line)\n      || matchOne(JNI_REFERENCES_PATTERN, line)) {\n      return;\n    }\n\n    console.warn(`Unable to parse line: ${line}`);\n  }\n\n  private static identifyAnonymousSynchronizers(threads: Thread[]): void {\n    // sometimes threads wait for notification, but the thread dump doesn't say on which object\n    // this function guesses it's the last hit classical lock\n    const validStatuses = [ThreadStatus.BLOCKED, ThreadStatus.TIMED_WAITING, ThreadStatus.WAITING];\n\n    threads\n      .filter(thread => !thread.lockWaitingFor)\n      .filter(thread => thread.status !== undefined && validStatuses.includes(thread.status))\n      .forEach((thread) => {\n        const lock: Lock = thread.classicalLocksHeld[0];\n        if (!lock) {\n          // this can happen if thread is TIMED_WAITING due to Thread.sleep()\n          return;\n        }\n        lock.owner = null;\n        lock.waiting.push(thread);\n\n        thread.lockWaitingFor = lock;\n        thread.locksHeld.splice(thread.locksHeld.indexOf(lock), 1);\n        thread.classicalLocksHeld.splice(thread.classicalLocksHeld.indexOf(lock), 1);\n      });\n  }\n\n  private static stringToThreadStatus(status: string): ThreadStatus {\n    const key = status as keyof typeof ThreadStatus;\n    const threadStatus = ThreadStatus[key];\n    if (threadStatus) {\n      return threadStatus;\n    }\n\n    if (status.startsWith('BLOCKED')) {\n      return ThreadStatus.BLOCKED;\n    }\n    if (status.startsWith('WAITING')) {\n      return ThreadStatus.WAITING;\n    }\n    if (status.startsWith('TIMED_WAITING')) {\n      return ThreadStatus.TIMED_WAITING;\n    }\n\n    return ThreadStatus.UNKNOWN;\n  }\n\n  private static getOrCreateLock(locks: Lock[], id: string, className: string): Lock {\n    for (const existingLock of locks) {\n      if (existingLock.id === id) {\n        return existingLock;\n      }\n    }\n\n    const newLock: Lock = new Lock();\n    newLock.id = id;\n    newLock.className = className;\n\n    locks.push(newLock);\n    return newLock;\n  }\n}\n","import ReactGA from 'react-ga';\nimport CpuUsage from '../types/CpuUsage';\nimport Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\nimport CpuUsageParser, { CPU_USAGE_TIMESTAMP_PATTERN } from './CpuUsageParser';\nimport { matchOne } from './RegExpUtils';\nimport ThreadDumpParser, { THREAD_DUMP_DATE_PATTERN } from './ThreadDumpParser';\n\nconst MAX_TIME_DIFFERENCE_ALLOWED: number = 10000;\n\nexport default class Parser {\n  private cpuUsages: CpuUsage[] = [];\n  private threadDumps: ThreadDump[] = [];\n\n  private filesToParse: number = 0;\n  private parsingStarted: number = Date.now();\n  private onFilesParsed: (threadDumps: ThreadDump[]) => void;\n\n  constructor(onFilesParsed: (threadDumps: ThreadDump[]) => void) {\n    this.onFilesParsed = onFilesParsed;\n  }\n\n  public parseFiles = (uploaded: File[]) => {\n    this.parsingStarted = Date.now();\n    this.cpuUsages = [];\n    this.threadDumps = [];\n    this.filesToParse = 0;\n\n    this.parse(uploaded);\n  }\n\n  private parse(files: File[]) {\n    // if only one file was uploaded, assume that it's a set of dumps\n    if (files.length === 1 && !files[0].name.includes('cpu')) {\n      this.parseSingleFile(files[0]);\n    } else {\n      this.parseMultipleFiles(files);\n    }\n  }\n\n  private parseSingleFile(file: File) {\n    const reader = new FileReader();\n    reader.onload = () => {\n      const lines: string[] = (reader.result as string).split('\\n');\n\n      let line = lines.shift();\n      let currentDump: string[] = [];\n      while (line !== undefined) {\n        // check if it's the beginning of another thread dump\n        if (matchOne(THREAD_DUMP_DATE_PATTERN, line)) {\n          this.filesToParse++;\n          ThreadDumpParser.parseThreadDump(currentDump.slice(), this.onParsedThreadDump);\n          currentDump = [line];\n        } else {\n          currentDump.push(line);\n        }\n\n        line = lines.shift();\n      }\n\n      ThreadDumpParser.parseThreadDump(currentDump, this.onParsedThreadDump);\n    };\n    this.filesToParse++;\n    reader.readAsText(file);\n  }\n\n  private parseMultipleFiles(files: File[]) {\n    this.filesToParse = this.filesToParse + files.length;\n\n    for (const file of files) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const lines: string[] = (reader.result as string).split('\\n');\n        const firstLine = lines[0];\n\n        if (!firstLine) {\n          return;\n        }\n\n        if (matchOne(CPU_USAGE_TIMESTAMP_PATTERN, firstLine)) {\n          CpuUsageParser.parseCpuUsage(lines, this.onParsedCpuUsage);\n        } else if (matchOne(THREAD_DUMP_DATE_PATTERN, firstLine)) {\n          ThreadDumpParser.parseThreadDump(lines, this.onParsedThreadDump);\n        } else {\n          this.filesToParse = this.filesToParse - 1;\n        }\n      };\n\n      reader.readAsText(file);\n    }\n  }\n\n  private onParsedCpuUsage = (cpuUsage: CpuUsage) => {\n    this.cpuUsages.push(cpuUsage);\n    this.filesToParse = this.filesToParse - 1;\n    this.checkCompletion();\n  }\n\n  private onParsedThreadDump = (threadDump: ThreadDump) => {\n    if (threadDump.threads.length > 0) {\n      this.threadDumps.push(threadDump);\n    }\n    this.filesToParse = this.filesToParse - 1;\n    this.checkCompletion();\n  }\n\n  private checkCompletion() {\n    if (!this.filesToParse) {\n      this.fireAnalytics();\n      this.groupCpuUsagesWithThreadDumps();\n      this.sortThreadDumps();\n      this.onFilesParsed(this.threadDumps);\n    }\n  }\n\n  private fireAnalytics() {\n    ReactGA.timing({\n      category: 'Parsing',\n      value: Date.now() - this.parsingStarted,\n      variable: 'parsed-all',\n    });\n    ReactGA.event({\n      action: 'Loaded CPU usages',\n      category: 'Parsing',\n      value: this.cpuUsages.length,\n    });\n    ReactGA.event({\n      action: 'Loaded thread dumps',\n      category: 'Parsing',\n      value: this.threadDumps.length,\n    });\n  }\n\n  private groupCpuUsagesWithThreadDumps() {\n    this.cpuUsages\n      .filter(cpuUsage => cpuUsage.getEpoch())\n      .forEach((cpuUsage) => {\n        const threadDump: ThreadDump = this.findCorrespondingThreadDump(cpuUsage);\n        this.groupCpuUsageWithThreadDump(threadDump, cpuUsage);\n      });\n  }\n\n  private sortThreadDumps() {\n    this.threadDumps.sort((t1, t2) => {\n      if (t1.getEpoch() === t2.getEpoch()) {\n        return 0;\n      }\n      if (!t1.getEpoch()) {\n        return -1;\n      }\n      if (!t2.getEpoch()) {\n        return 1;\n      }\n      return (t1.getEpoch() as number) - (t2.getEpoch() as number);\n    });\n  }\n\n  private findCorrespondingThreadDump(cpuUsage: CpuUsage): ThreadDump {\n    const AN_HOUR = 60 * 60 * 1000;\n    const cpuUsageEpoch = cpuUsage.getEpoch();\n    let closest: ThreadDump | null = null;\n    let smallestDiff: number = MAX_TIME_DIFFERENCE_ALLOWED;\n\n    this.threadDumps\n      .filter(threadDump => threadDump.getEpoch())\n      .forEach((threadDump) => {\n        const dumpEpoch = threadDump.getEpoch();\n\n        if (!dumpEpoch || !cpuUsageEpoch) {\n          return;\n        }\n\n        const diff = Math.abs((dumpEpoch % AN_HOUR) - (cpuUsageEpoch % AN_HOUR));\n\n        if (diff < smallestDiff) {\n          smallestDiff = diff;\n          closest = threadDump;\n        }\n      });\n\n    if (closest == null) {\n      closest = new ThreadDump(null);\n      this.threadDumps.push(closest);\n    }\n\n    return closest;\n  }\n\n  private groupCpuUsageWithThreadDump(threadDump: ThreadDump, cpuUsage: CpuUsage): void {\n    threadDump.loadAverages = cpuUsage.loadAverages;\n    threadDump.runningProcesses = cpuUsage.runningProcesses;\n    threadDump.memoryUsage = cpuUsage.memoryUsage;\n\n    cpuUsage.threadCpuUsages.forEach((cpu) => {\n      const thread = this.findThreadWithId(threadDump, cpu.id);\n\n      if (thread) {\n        thread.cpuUsage = cpu.cpuUsage;\n        thread.runningFor = cpu.runningFor;\n      }\n    });\n  }\n\n  private findThreadWithId(threadDump: ThreadDump, id: number): Thread | null {\n    for (const thread of threadDump.threads) {\n      if (thread.id === id) {\n        return thread;\n      }\n    }\n    return null;\n  }\n}\n","import React from 'react';\r\nimport { OutboundLink } from 'react-ga';\r\nimport { ISSUE_TRACKER_LINK, SOURCE_CODE_LINK } from '../Navigation/Navigation';\r\n\r\n// tslint:disable:max-line-length\r\nconst header = 'For the full experience, you should gather thread dumps along with <i>top</i> outputs.';\r\nconst GATHER_DATA_LINK = 'https://github.com/drauf/watson/blob/master/README.md#gathering-thread-dumps';\r\nconst disclaimer = 'Watson works fully offline. No files will leave your machine.';\r\n// tslint:enable:max-line-length\r\n\r\nconst stopPropagation = (event: React.MouseEvent) => {\r\n  // prevent opening the dropzone popup when clicking on the navigation links\r\n  event.stopPropagation();\r\n};\r\n\r\nconst DropzoneGuide: React.SFC = () => (\r\n  <div id=\"dropzone-guide\" onClick={stopPropagation}>\r\n    <h6 dangerouslySetInnerHTML={{ __html: header }} />\r\n    <span>\r\n      See: <OutboundLink eventLabel=\"Gathering data\" to={GATHER_DATA_LINK} target=\"_blank\">\r\n        How to gather data\r\n        </OutboundLink>\r\n    </span>\r\n\r\n    <p dangerouslySetInnerHTML={{ __html: disclaimer }} />\r\n\r\n    <ul id=\"dropzone-links\">\r\n      <li>\r\n        <OutboundLink eventLabel=\"Issue tracker\" to={ISSUE_TRACKER_LINK} target=\"_blank\">\r\n          Issue tracker\r\n        </OutboundLink>\r\n      </li>\r\n      <li>\r\n        <OutboundLink eventLabel=\"Source code\" to={SOURCE_CODE_LINK} target=\"_blank\">\r\n          Source code\r\n        </OutboundLink>\r\n      </li>\r\n    </ul>\r\n  </div>\r\n);\r\n\r\nexport default DropzoneGuide;\r\n","import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { setThreadDumps } from '../../common/threadDumpsStorageService';\nimport Parser from '../../parser/Parser';\nimport ThreadDump from '../../types/ThreadDump';\nimport DropzoneGuide from './DropzoneGuide';\nimport './FullPageDropzone.css';\n\nclass FullPageDropzone extends React.PureComponent<RouteComponentProps> {\n  public render = () => (\n    <Dropzone multiple={true} onDrop={this.onDrop}>\n      {({ getRootProps, getInputProps, isDragActive }) => (\n        <div id=\"dropzone\" {...getRootProps()}>\n          <input {...getInputProps()} />\n          {\n            isDragActive ?\n              <h4>Drop files here...</h4> :\n              <h4>Drop the catalog here, or click to select files to load.</h4>\n          }\n          <DropzoneGuide />\n        </div>\n      )}\n    </Dropzone>\n  )\n\n  private onDrop = (files: File[]): void => {\n    const parser = new Parser(this.onParsed);\n    parser.parseFiles(files);\n  }\n\n  private onParsed = (threadDumps: ThreadDump[]): void => {\n    const key = setThreadDumps(threadDumps);\n    if (threadDumps.some(dump => !!dump.loadAverages)) {\n      this.props.history.push(`/${key}/summary/`);\n    } else {\n      this.props.history.push(`/${key}/similar-stacks/`);\n    }\n  }\n}\n\nexport default withRouter(FullPageDropzone);\n","import React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport './App.css';\nimport Container from './components/Container';\nimport FullPageDropzone from './components/FullPageDropzone/FullPageDropzone';\n\nconst App: React.SFC<RouteComponentProps> = () => (\n  <Switch>\n    <Route exact path=\"/\" component={FullPageDropzone} />\n    <Route path=\"/:key\" component={Container} />\n  </Switch>\n);\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport ReactGA from 'react-ga';\r\nimport { HashRouter as Router, Route } from 'react-router-dom';\r\nimport App from './App';\r\nimport { clearOldThreadDumps } from './common/threadDumpsStorageService';\r\nimport { withTracker } from './common/withTracker';\r\nimport './index.css';\r\n\r\nReactGA.initialize('UA-134928161-1', {\r\n  gaOptions: {\r\n    siteSpeedSampleRate: 100,\r\n  },\r\n});\r\n\r\nclearOldThreadDumps();\r\n\r\nReactDOM.render(\r\n  <Router basename={process.env.PUBLIC_URL}>\r\n    <Route component={withTracker(App, {})} />\r\n  </Router>,\r\n  document.getElementById('root'),\r\n);\r\n","import React, { useEffect } from 'react';\nimport ReactGA, { FieldsObject } from 'react-ga';\nimport { RouteComponentProps } from 'react-router-dom';\n\nexport const withTracker = <P extends RouteComponentProps>(\n  WrappedComponent: React.ComponentType<P>,\n  options: FieldsObject = {},\n) => {\n  const trackPage = (page: string) => {\n    ReactGA.set({ page, ...options });\n    ReactGA.pageview(page);\n  };\n\n  return (props: P) => {\n    useEffect(() => { trackPage(props.location.pathname); }, [props.location.pathname]);\n\n    return <WrappedComponent {...props} />;\n  };\n};\n"],"sourceRoot":""}