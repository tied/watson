{"version":3,"sources":["common/threadDumpsStorageService.tsx","common/withThreadDumps.tsx","common/getThreadsOverTime.tsx","components/PageWithSettings/PageWithSettings.tsx","types/ThreadStatus.tsx","components/CpuConsumers/CpuConsumer.tsx","types/Thread.tsx","components/ThreadDetails/WindowPortal.tsx","components/ThreadDetails/ThreadDetailsWindow.tsx","components/CpuConsumers/CpuConsumersPage.tsx","components/CpuConsumers/CpuConsumerSingleUsage.tsx","components/CpuConsumers/CpuConsumerItem.tsx","components/CpuConsumers/CpuConsumersList.tsx","components/CpuConsumers/CpuConsumersSettings.tsx","types/ThreadDump.tsx","components/Monitors/Monitor.tsx","components/Monitors/MonitorOverTime.tsx","components/Monitors/MonitorOwner.tsx","components/Monitors/WaitingListItem.tsx","components/Monitors/WaitingList.tsx","components/Monitors/MonitorItem.tsx","components/Monitors/MonitorOverTimeItem.tsx","components/Filter/Filter.tsx","components/Monitors/MonitorsSettings.tsx","components/Monitors/MonitorsPage.tsx","components/Navigation/OutboundLink.tsx","components/Navigation/Navigation.tsx","components/Navigation/NavToggle.tsx","components/NotFoundError.tsx","common/isIdleThread.tsx","components/SimilarStacks/StackTrace.tsx","components/SimilarStacks/ThreadSummary.tsx","components/SimilarStacks/GroupDetails.tsx","components/SimilarStacks/SimilarStacksGroup.tsx","components/SimilarStacks/SimilarStacksSettings.tsx","components/SimilarStacks/SimilarStacksPage.tsx","components/StuckThreads/ThreadDetails.tsx","components/StuckThreads/GroupDetails.tsx","components/StuckThreads/StuckThreadsGroup.tsx","components/StuckThreads/StuckThreadsSettings.tsx","components/StuckThreads/StuckThreadsPage.tsx","components/Summary/LoadAveragesChart.tsx","components/Summary/LabelFormatter.tsx","components/Summary/MemoryUsageChart.tsx","components/Summary/RunningProcessesChart.tsx","components/Summary/SwapUsageChart.tsx","components/Summary/SummaryPage.tsx","components/ThreadsOverview/ThreadsOverviewFilteringSummary.tsx","components/ThreadsOverview/ThreadsOverviewLegend.tsx","components/ThreadsOverview/ThreadsOverviewSettings.tsx","components/ThreadsOverview/ThreadOverviewItem.tsx","components/ThreadsOverview/ThreadOverviewRow.tsx","components/ThreadsOverview/ThreadsOverviewTable.tsx","components/ThreadsOverview/ThreadsOverviewPage.tsx","components/Container.tsx","types/CpuUsage.tsx","types/LoadAverage.tsx","types/MemoryUsage.tsx","types/ThreadCpuUsage.tsx","parser/RegExpUtils.tsx","parser/CpuUsageParser.tsx","types/Lock.tsx","parser/ThreadDumpParser.tsx","parser/Parser.tsx","components/FullPageDropzone/DropzoneGuide.tsx","components/FullPageDropzone/FullPageDropzone.tsx","App.tsx","index.tsx"],"names":["currentThreadDumps","lastUsedStorage","localforage","createInstance","name","threadDumpsStorage","getThreadDumpsAsync","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","key","wrap","_context","prev","next","undefined","abrupt","getFromStorage","stop","_x","apply","this","arguments","setThreadDumps","parsedDumps","stringified","stringify","SparkMD5","hash","setItem","clearCurrentThreadDump","_callee2","fromStorage","_context2","getItem","sent","Date","valueOf","parse","withThreadDumps","WrappedComponent","_React$Component","WithThreadDumps","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","promisePending","threadDumps","scrollToTop","contentDiv","document","getElementById","scrollTop","match","params","then","length","history","push","setState","inherits","createClass","value","react_default","createElement","id","assign","React","Component","getThreadsOverTime","threadsOverTime","Map","forEach","threadDump","dumpNumber","threads","thread","threadOccurences","get","set","Array","from","values","sort","t1","t2","getThreadName","localeCompare","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","slicedToArray","err","return","PageWithSettings","PAGE_NAME","handleFilterChange","event","target","isChecked","checked","newState","defineProperty","handleIntegerChange","parseInt","handleRegExpChange","PureComponent","NO_CPU_INFOS","NO_CPU_AND_THREADS_PAIR","NO_THREAD_DUMPS","N0_THREADS_MATCHING","N0_MONITORS_MATCHING","ThreadStatus","CpuConsumer","calculatedValue","Thread","epoch","status","cpuUsage","runningFor","lockWaitingFor","locksHeld","classicalLocksHeld","stackTrace","matchingFilter","getFormattedTime","toUTCString","substr","WindowPortal","externalWindow","container","windowFeatures","closeAllExternalWindows","windows","external","closed","close","className","sourceDoc","targetDoc","styleSheets","sheet","styleSheet","cssRules","newStyleEl","cssRule","appendChild","createTextNode","cssText","head","href","newLinkEl","rel","window","onunload","open","title","windowTitle","body","copyStyles","onUnload","_this2","filter","ext","ReactDOM","createPortal","children","CpuConsumersMode","renderName","renderStatus","toLocaleUpperCase","RUNNABLE","Fragment","toFixed","renderLocksHeld","map","lock","join","renderLockWaitingFor","owner","renderStackTrace","readOnly","ThreadDetailsWindow","WindowPortal_WindowPortal","CpuConsumerSingleUsage","showDetails","handleClick","prevState","handleUnload","concat","padding","repeat","onClick","components_ThreadDetails_ThreadDetailsWindow","formatConsumerHeader","threadName","CpuConsumerItem","dumpsNumber","consumer","i","index","CpuConsumerSingleUsage_CpuConsumerSingleUsage","CpuConsumersList","limit","consumers","slice","CpuConsumers_CpuConsumerItem","CpuConsumersSettings","mode","onModeChange","onLimitChange","Mean","type","onChange","Median","Max","min","max","CpuConsumersPage","handleModeChange","calculateCpuUsages","CpuConsumers_CpuConsumersSettings","some","dump","loadAverages","CpuConsumers_CpuConsumersList","dangerouslySetInnerHTML","__html","calculationMode","calculateUsageFor","b","threadsMap","usage","reduce","reduceSum","calculateMedian","reduceMax","sum","currentThread","maxValue","lowMiddle","Math","floor","highMiddle","ceil","ThreadDump","runningProcesses","memoryUsage","locks","getEpoch","date","hours","substring","minutes","seconds","fromEpoch","Monitor","time","javaClass","waiting","MonitorOverTime","waitingSum","monitors","MonitorOwner","showOwner","stopPropagation","monitor","WaitingListItem","WaitingList","expanded","toggleExpand","collapsable","THREADS_TO_SHOW_WHEN_COLLAPSED","WaitingListItem_WaitingListItem","MonitorItem","lastIndexOf","MonitorOwner_MonitorOwner","WaitingList_WaitingList","MonitorOverTimeItem","collapse","toggleCollapse","item","Monitors_MonitorItem","Filter","displayName","MonitorsSettings","withOwner","withoutIdle","withoutOwner","onFilterChange","components_Filter_Filter","MonitorsPage","getMonitorsOverTime","monitorsOverTime","monitorOverTime","m1","m2","filterMonitors","filtered","isQueueThread","hasAnyOwner","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","Monitors_MonitorsSettings","MonitorOverTimeItem_MonitorOverTimeItem","OutboundLink","to","Navigation","onClear","react_router_dom","Navigation_OutboundLink","withRouter","NavToggle","NotFoundError","isIdleThread","includes","StackTrace","linesToConsider","stack","line","ThreadSummary","showLockOwner","toggleDetails","toggleLockOwner","getLocksHeldString","locksReducer","lockOwner","waitingForRender","console","error","accumulator","lockId","GroupDetails","getStackTrace","threadGroup","sortedByName","ThreadSummary_ThreadSummary","SimilarStacks_StackTrace","SimilarStacksGroup","toggleGroup","GroupDetails_GroupDetails","SimilarStacksSettings","minimalGroupSize","onIntegerChange","SimilarStacksPage","threadGroups","groupByStackTrace","group","SimilarStacks_SimilarStacksSettings","SimilarStacksGroup_SimilarStacksGroup","_this3","grouped","similarStacks","toString","ThreadDetails","maxDifferingLines","showStackTrace","shouldShowStackTrace","current","currentStack","nextStack","array","ThreadDetails_ThreadDetails","StuckThreadsGroup","StuckThreads_GroupDetails","StuckThreadsSettings","minClusterSize","StuckThreadsPage","filterThreads","filterThread","threadOverTime","buildClusters","clusters","getClustersFromThread","c","c1","c2","currentCluster","previous","areThreadsSimilarEnough","stack1","stack2","abs","StuckThreads_StuckThreadsSettings","StuckThreadsGroup_StuckThreadsGroup","LoadAveragesChart","data","fifteenMinutes","fiveMinutes","oneMinute","es6","width","height","dataKey","stroke","strokeDasharray","convert","round","labelFormatter","COLORS","MemoryUsageChart","memoryUsages","freeMemoryAvg","memoryFree","memoryUsed","nameKey","_","fill","formatter","RunningProcessesChart","SwapUsageChart","swapFree","swapUsed","SummaryPage","render","Summary_MemoryUsageChart","Summary_SwapUsageChart","Summary_LoadAveragesChart","Summary_RunningProcessesChart","matchingInGroupCounter","currentGroup","matchingCounter","nonEmptyCounter","ThreadsOverviewFilteringSummary","isFilteredByStack","threadsNumber","matching","total","percentage","ThreadsOverviewLegend","ThreadsOverviewSettings","nonJvm","tomcat","nonTomcat","database","lucene","nameFilter","stackFilter","onRegExpChange","ThreadOverviewItem","isFiltered","isMatchingFilter","UNKNOWN","ThreadOverviewRow","threadsPadded","firstThread","find","ThreadOverviewItem_ThreadOverviewItem","ThreadsOverview","dates","ThreadsOverview_ThreadOverviewRow","ThreadsOverviewPage","jvmRegex","tomcatRegex","databaseRegex","luceneRegex","filterByName","markMatchingStackFilter","userProvided","RegExp","_unused","matchesName","clearAllMatches","filters","getStackTraceFilters","markIfMatchesAllFilters","userProvidedFilter","_unused2","matchesStackTraceFilter","test","filteredDumps","ThreadsOverview_ThreadsOverviewSettings","ThreadsOverview_ThreadsOverviewFilteringSummary","ThreadsOverview_ThreadsOverviewLegend","ThreadsOverviewTable","regex","_iteratorNormalCompletion3","_didIteratorError3","_iteratorError3","_step3","_iterator3","Container","navigationOpen","toggleNavigation","components_Navigation_Navigation","components_Navigation_NavToggle","react_router","exact","path","component","page","CpuUsage","timestamp","threadCpuUsages","LoadAverages","MemoryUsage","memoryTotal","swapTotal","ThreadCpuUsage","matchOne","pattern","str","execArray","exec","matchMultipleGroups","matchMultipleTimes","matches","CPU_USAGE_TIMESTAMP_PATTERN","LOAD_AVERAGES_PATTERN","RUNNING_PROCESSES_PATTERN","TOTAL_MEMORY_PATTERN","USED_MEMORY_PATTERN","FREE_MEMORY_PATTERN","COLUMN_MATCHER","CpuUsageParser","lines","callback","parseLoadAverages","shift","parseRunningProcesses","parseMemoryUsage","parseThreadCpuUsages","parseFloat","line1","line2","columns","threadCpuUsage","Lock","THREAD_DUMP_DATE_PATTERN","NAME_PATTERN","NID_PATTERN","TID_PATTERN","FRAME_PATTERN","THREAD_STATE_PATTERN","SYNCHRONIZATION_STATUS_PATTERN","HELD_LOCK_PATTERN","ThreadDumpParser","parseLine","identifyAnonymousSynchronizers","startsWith","parseThreadHeader","parseStackLine","header","trim","nid","tid","frame","threadState","stringToThreadStatus","synchronizationStatus","getOrCreateLock","warn","lockHeld","validStatuses","BLOCKED","TIMED_WAITING","WAITING","splice","indexOf","threadStatus","existingLock","newLock","Parser","onFilesParsed","cpuUsages","filesToParse","parseFiles","uploaded","parseCpuUsage","onParsedCpuUsage","parseThreadDump","onParsedThreadDump","files","_loop","file","reader","FileReader","onload","result","split","firstLine","splitThreadDumps","fileParsed","readAsText","currentDump","groupCpuUsagesWithThreadDumps","sortThreadDumps","findCorrespondingThreadDump","groupCpuUsageWithThreadDump","cpuUsageEpoch","closest","smallestDiff","dumpEpoch","diff","_this4","cpu","findThreadWithId","DropzoneGuide","FullPageDropzone","es","multiple","onDrop","getRootProps","getInputProps","isDragActive","FullPageDropzone_DropzoneGuide","onParsed","App","sevenDaysAgo","setDate","getDate","iterate","removeItem","clearOldThreadDumps"],"mappings":"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","file":"static/js/main.9627d610.chunk.js","sourcesContent":["import { parse, stringify } from 'flatted';\nimport localforage from 'localforage';\nimport SparkMD5 from 'spark-md5';\nimport ThreadDump from '../types/ThreadDump';\n\nlet currentThreadDumps: ThreadDump[];\nconst lastUsedStorage = localforage.createInstance({ name: 'lastUsed' });\nconst threadDumpsStorage = localforage.createInstance({ name: 'threadDumps' });\n\n// Given a key, returns a promise that resolves to the stored thread dumps.\nexport const getThreadDumpsAsync = async (key: string): Promise<ThreadDump[]> => {\n  if (currentThreadDumps === undefined) {\n    return getFromStorage(key);\n  }\n\n  return currentThreadDumps;\n};\n\n// Stores thread dumps in persistent storage for subsequent page loads.\n// Returns a key that can be used to retrieve the thread dumps.\nexport const setThreadDumps = (parsedDumps: ThreadDump[]): string => {\n  currentThreadDumps = parsedDumps;\n  const stringified = stringify(currentThreadDumps);\n  const key = SparkMD5.hash(stringified);\n  threadDumpsStorage.setItem(key, stringified);\n  return key;\n};\n\n// Clears currently held thread dump.\n// Does not modify data storage.\nexport const clearCurrentThreadDump = (): void => {\n  currentThreadDumps = [];\n};\n\n// Clears all persisted thread dumps not used in the last 7 days.\nexport const clearOldThreadDumps = (): void => {\n  const sevenDaysAgo = new Date().setDate(new Date().getDate() - 7);\n\n  lastUsedStorage.iterate((date: number, key) => {\n    if (date < sevenDaysAgo) {\n      threadDumpsStorage.removeItem(key);\n      lastUsedStorage.removeItem(key);\n    }\n  });\n};\n\nasync function getFromStorage(key: string) {\n  const fromStorage = await threadDumpsStorage.getItem<string>(key);\n\n  // update the \"Last used\" date if the key exists\n  if (fromStorage) {\n    lastUsedStorage.setItem(key, new Date().valueOf());\n  }\n\n  currentThreadDumps = fromStorage ? parse(fromStorage) : [];\n  return currentThreadDumps;\n}\n","import React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport ThreadDump from '../types/ThreadDump';\nimport { getThreadDumpsAsync } from './threadDumpsStorageService';\n\nexport type WithThreadDumpsProps = RouteComponentProps<any> & {\n  threadDumps: ThreadDump[];\n};\n\ntype State = {\n  promisePending: boolean;\n  threadDumps: ThreadDump[];\n};\n\nexport const withThreadDumps =\n  <P extends WithThreadDumpsProps>(WrappedComponent: React.ComponentType<P>) => {\n    class WithThreadDumps extends React.Component<P, State> {\n      public state: State = {\n        promisePending: true,\n        threadDumps: [],\n      };\n\n      constructor(props: P) {\n        super(props);\n\n        const key: string = props.match.params.key;\n        const threadDumpsPromise = getThreadDumpsAsync(key);\n\n        threadDumpsPromise\n          .then((threadDumps) => {\n            if (threadDumps.length === 0) {\n              props.history.push('/');\n            }\n            return threadDumps;\n          })\n          .then((threadDumps) => {\n            this.setState({ threadDumps, promisePending: false });\n          });\n      }\n\n      public componentDidMount() {\n        this.scrollToTop();\n      }\n\n      public render() {\n        if (this.state.promisePending) {\n          return <h4 id=\"centered\">Loading data from cache...</h4>;\n        }\n\n        return <WrappedComponent threadDumps={this.state.threadDumps} {...this.props} />;\n      }\n\n      private scrollToTop = () => {\n        const contentDiv = document.getElementById('content');\n        if (contentDiv) {\n          contentDiv.scrollTop = 0;\n        }\n      }\n    }\n\n    return WithThreadDumps;\n  };\n","import Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\n\nexport default function getThreadsOverTime(threadDumps: ThreadDump[]): Array<Map<number, Thread>> {\n  const threadsOverTime = new Map<number, Map<number, Thread>>();\n\n  threadDumps.forEach((threadDump, dumpNumber) => {\n    threadDump.threads.forEach((thread) => {\n      let threadOccurences = threadsOverTime.get(thread.id);\n      if (!threadOccurences) {\n        threadOccurences = new Map<number, Thread>();\n      }\n\n      threadOccurences.set(dumpNumber, thread);\n      threadsOverTime.set(thread.id, threadOccurences);\n    });\n  });\n\n  return Array.from(threadsOverTime.values())\n    .sort((t1, t2) => getThreadName(t1).localeCompare(getThreadName(t2)));\n}\n\nconst getThreadName = (threads: Map<number, Thread>): string => {\n  for (const [, thread] of threads) {\n    if (thread) {\n      return thread.name;\n    }\n  }\n  return '';\n};\n","import React, { ComponentState } from 'react';\nimport { WithThreadDumpsProps } from '../../common/withThreadDumps';\n\nexport default class PageWithSettings<S> extends React.PureComponent<WithThreadDumpsProps, S> {\n  // tslint:disable:max-line-length\n  protected static NO_CPU_INFOS = 'You need to load the <i>cpu_info</i> files to see this data.';\n  protected static NO_CPU_AND_THREADS_PAIR = 'You need to load matching <i>cpu_info</i> and <i>jira_threads</i> files to see this data.';\n  protected static NO_THREAD_DUMPS = 'You need to load the <i>thread_dump</i> files to see this data.';\n\n  protected static N0_THREADS_MATCHING = 'No threads match the selected criteria.';\n  protected static N0_MONITORS_MATCHING = 'No monitors match the selected criteria.';\n  // tslint:enable:max-line-length\n\n  protected PAGE_NAME = 'Unknown Page';\n\n  public render(): JSX.Element | null {\n    return null;\n  }\n\n  protected handleFilterChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const isChecked: boolean = event.target.checked;\n    const newState: ComponentState = { [name]: isChecked };\n    this.setState(newState);\n  }\n\n  protected handleIntegerChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const value: number = parseInt(event.target.value ? event.target.value : '0', 10);\n    const newState: ComponentState = { [name]: value > 0 ? value : 0 };\n    this.setState(newState);\n  }\n\n  protected handleRegExpChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n    const name: string = event.target.name;\n    const value: string = event.target.value;\n    const newState: ComponentState = { [name]: value };\n    this.setState(newState);\n  }\n}\n","enum ThreadStatus {\n  RUNNABLE = 'runnable',\n  BLOCKED = 'blocked',\n  WAITING = 'waiting',\n  TIMED_WAITING = 'timed-waiting',\n  UNKNOWN = 'unknown',\n}\n\nexport default ThreadStatus;\n","import Thread from '../../types/Thread';\n\nexport default class CpuConsumer {\n  public calculatedValue: number;\n  public threadOccurences: Map<number, Thread>;\n\n  constructor(calculatedValue: number, threadOccurences: Map<number, Thread>) {\n    this.calculatedValue = calculatedValue;\n    this.threadOccurences = threadOccurences;\n  }\n}\n","import Lock from './Lock';\nimport ThreadStatus from './ThreadStatus';\n\nexport default class Thread {\n  public static getFormattedTime = (thread: Thread): string => {\n    return thread.epoch\n      ? new Date(thread.epoch).toUTCString().substr(17, 8)\n      : '';\n  }\n\n  public id: number;\n  public name: string;\n  public status: ThreadStatus | undefined;\n  public cpuUsage: number = 0.0;\n  public runningFor!: string;\n  public lockWaitingFor: Lock | null = null;\n  public locksHeld: Lock[] = [];\n  public classicalLocksHeld: Lock[] = [];\n  public stackTrace: string[] = [];\n  public matchingFilter: boolean = false;\n  private epoch: number | null;\n\n  constructor(id: number, name: string, epoch: number | null) {\n    this.id = id;\n    this.name = name;\n    this.epoch = epoch;\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\ntype Props = {\n  windowTitle: string;\n  className: string;\n  onUnload: () => void;\n};\n\nexport default class WindowPortal extends React.PureComponent<Props> {\n  private static windows: Array<Window | null> = [];\n  private externalWindow: Window | null;\n  private container: HTMLElement;\n\n  private windowFeatures =\n    'width=960,height=530,titlebar=0,menubar=0,location=0,toolbar=0,status=0';\n\n  constructor(props: Props) {\n    super(props);\n\n    this.externalWindow = null;\n    this.container = document.createElement('div');\n    if (this.props.className) {\n      this.container.className = this.props.className;\n    }\n  }\n\n  public copyStyles(sourceDoc: Document, targetDoc: Document) {\n    Array.from(sourceDoc.styleSheets).forEach((sheet) => {\n      const styleSheet = sheet as CSSStyleSheet;\n\n      if (styleSheet.cssRules) { // for <style> elements\n        const newStyleEl = sourceDoc.createElement('style');\n\n        Array.from(styleSheet.cssRules).forEach((cssRule) => {\n          newStyleEl.appendChild(sourceDoc.createTextNode(cssRule.cssText));\n        });\n\n        targetDoc.head.appendChild(newStyleEl);\n      } else if (styleSheet.href) { // for <link> elements\n        const newLinkEl = sourceDoc.createElement('link');\n\n        newLinkEl.rel = 'stylesheet';\n        newLinkEl.href = styleSheet.href;\n        targetDoc.head.appendChild(newLinkEl);\n      }\n    });\n  }\n\n  public componentDidMount() {\n    window.onunload = this.closeAllExternalWindows;\n\n    this.externalWindow = window.open('', '', this.windowFeatures);\n    if (this.externalWindow) {\n      WindowPortal.windows.push(this.externalWindow);\n      this.externalWindow.document.title = this.props.windowTitle;\n      this.externalWindow.document.body.appendChild(this.container);\n      this.copyStyles(document, this.externalWindow.document);\n      this.externalWindow.onunload = this.props.onUnload;\n    }\n  }\n\n  public componentWillUnmount() {\n    if (this.externalWindow && !this.externalWindow.closed) {\n      this.externalWindow.close();\n    }\n    WindowPortal.windows = WindowPortal.windows.filter(ext => ext !== this.externalWindow);\n  }\n\n  public render() {\n    return ReactDOM.createPortal(this.props.children, this.container);\n  }\n\n  private closeAllExternalWindows = () => {\n    for (const external of WindowPortal.windows) {\n      if (external && !external.closed) {\n        external.close();\n      }\n    }\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadStatus from '../../types/ThreadStatus';\nimport './ThreadDetailsWindow.css';\nimport WindowPortal from './WindowPortal';\n\ntype Props = {\n  thread: Thread;\n  onUnload: () => void;\n};\n\nconst ThreadDetailsWindow: React.SFC<Props> = ({ thread, onUnload }) => (\n  <WindowPortal windowTitle={thread.name} className=\"thread-details\" onUnload={onUnload}>\n    {renderName(thread)}\n    {renderStatus(thread)}\n    {renderLockWaitingFor(thread)}\n    {renderLocksHeld(thread)}\n    {renderStackTrace(thread)}\n  </WindowPortal>\n);\n\nconst renderName = (thread: Thread) => {\n  return (\n    <h3>{Thread.getFormattedTime(thread)} <i>{thread.name}</i></h3>\n  );\n};\n\nconst renderStatus = (thread: Thread) => {\n  if (thread.status === undefined) {\n    return null;\n  }\n\n  return (\n    <span>\n      <b>\n        {thread.status.toLocaleUpperCase()}\n        {thread.status === ThreadStatus.RUNNABLE &&\n          <> ({thread.cpuUsage.toFixed(1)}% CPU usage)</>}\n      </b>\n      , running for: {thread.runningFor}\n    </span>\n  );\n};\n\nconst renderLocksHeld = (thread: Thread) => {\n  return (\n    thread.locksHeld.length > 0 &&\n    <span><b>Locks held:</b> [{thread.locksHeld.map(lock => lock.id).join(', ')}]</span>\n  );\n};\n\nconst renderLockWaitingFor = (thread: Thread) => {\n  return (\n    thread.lockWaitingFor &&\n    <span>\n      <b>Waiting for notification on lock:</b> [{thread.lockWaitingFor.id}]\n        {thread.lockWaitingFor.owner\n        ? <> owned by <i>{thread.lockWaitingFor.owner.name}</i></>\n        : <> without an owner</>}\n    </span>\n  );\n};\n\nconst renderStackTrace = (thread: Thread) => {\n  return (\n    <textarea\n      wrap=\"off\"\n      readOnly={true}\n      className=\"mono stacktrace-window\"\n      value={thread.stackTrace.join('\\n')} />\n  );\n};\n\nexport default ThreadDetailsWindow;\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport Thread from '../../types/Thread';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumersList from './CpuConsumersList';\nimport './CpuConsumersPage.css';\nimport CpuConsumersSettings from './CpuConsumersSettings';\n\nexport enum CpuConsumersMode {\n  Mean,\n  Median,\n  Max,\n}\n\ntype State = {\n  mode: CpuConsumersMode;\n  limit: number;\n};\n\nexport default class CpuConsumersPage extends PageWithSettings<State> {\n\n  public state: State = {\n    limit: 100,\n    mode: CpuConsumersMode.Mean,\n  };\n\n  protected PAGE_NAME = 'CPU Consumers';\n\n  public render() {\n    const consumers = this.calculateCpuUsages(this.state.mode);\n\n    return (\n      <div id=\"page\">\n        <CpuConsumersSettings\n          mode={this.state.mode}\n          limit={this.state.limit}\n          onModeChange={this.handleModeChange}\n          onLimitChange={this.handleIntegerChange}\n        />\n\n        {!this.props.threadDumps.some(dump => !!dump.loadAverages && dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: CpuConsumersPage.NO_CPU_AND_THREADS_PAIR }} />\n          : <CpuConsumersList\n            limit={this.state.limit}\n            dumpsNumber={this.props.threadDumps.length}\n            consumers={consumers}\n          />\n        }\n      </div>\n    );\n  }\n\n  private handleModeChange = (mode: number): React.ChangeEventHandler<HTMLInputElement> => () => {\n    this.setState({ mode: mode as CpuConsumersMode });\n  }\n\n  private calculateCpuUsages(calculationMode: CpuConsumersMode): CpuConsumer[] {\n    const consumers: CpuConsumer[] = [];\n    const threadsOverTime = getThreadsOverTime(this.props.threadDumps);\n\n    for (const threads of threadsOverTime) {\n      consumers.push(this.calculateUsageFor(threads, calculationMode));\n    }\n    consumers.sort((a, b) => b.calculatedValue - a.calculatedValue);\n\n    return consumers;\n  }\n\n  private calculateUsageFor(threadsMap: Map<number, Thread>, calculationMode: CpuConsumersMode) {\n    const threads = Array.from(threadsMap.values());\n\n    let usage: number = 0;\n    switch (calculationMode) {\n      case CpuConsumersMode.Mean:\n        usage = threads.reduce(this.reduceSum, 0) / this.props.threadDumps.length;\n        break;\n      case CpuConsumersMode.Median:\n        usage = this.calculateMedian(threads);\n        break;\n      case CpuConsumersMode.Max:\n        usage = threads.reduce(this.reduceMax, 0);\n        break;\n    }\n\n    return new CpuConsumer(usage, threadsMap);\n  }\n\n  private reduceSum(sum: number, currentThread: Thread): number {\n    return sum + currentThread.cpuUsage;\n  }\n\n  private reduceMax(maxValue: number, currentThread: Thread): number {\n    return (currentThread.cpuUsage > maxValue) ? currentThread.cpuUsage : maxValue;\n  }\n\n  private calculateMedian(threads: Thread[]): number {\n    const values = threads.slice();\n    values.sort((a, b) => a.cpuUsage - b.cpuUsage);\n    const lowMiddle = Math.floor((values.length - 1) / 2);\n    const highMiddle = Math.ceil((values.length - 1) / 2);\n    return (values[lowMiddle].cpuUsage + values[highMiddle].cpuUsage) / 2;\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread | undefined;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class CpuConsumerSingleUsage extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n  };\n\n  public handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  public handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n\n  public render() {\n    const thread = this.props.thread;\n\n    if (!thread) {\n      return <>     -- </>;\n    }\n\n    const cpuUsage = `${thread.cpuUsage.toFixed(1)}%`;\n    const padding = ' '.repeat(8 - cpuUsage.length);\n    const className = thread.cpuUsage > 78\n      ? 'vhigh'\n      : thread.cpuUsage > 42\n        ? 'high'\n        : thread.cpuUsage > 21\n          ? 'mid'\n          : thread.cpuUsage > 10\n            ? 'low'\n            : 'vlow';\n\n    return (\n      <>\n        {padding}\n        <a className={className} onClick={this.handleClick}>{cpuUsage}</a>\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumerSingleUsage from './CpuConsumerSingleUsage';\n\ntype Props = {\n  dumpsNumber: number;\n  consumer: CpuConsumer;\n};\n\nconst CpuConsumerItem: React.SFC<Props> = ({ dumpsNumber, consumer }) => {\n  const threads: Array<Thread | undefined> = [];\n\n  for (let i = 0; i < dumpsNumber; i++) {\n    threads.push(consumer.threadOccurences.get(i));\n  }\n\n  return (\n    <li>\n      <h6>\n        {formatConsumerHeader(consumer.calculatedValue, consumer.threadOccurences.values())}\n      </h6>\n      <span className=\"mono\">\n        {threads.map((thread, index) => <CpuConsumerSingleUsage thread={thread} key={index} />)}\n      </span>\n    </li>\n  );\n};\n\nconst formatConsumerHeader = (value: number, threads: IterableIterator<Thread>): string => {\n  let threadName: string = '';\n\n  for (const thread of threads) {\n    if (thread) {\n      threadName = thread.name;\n    }\n  }\n\n  return (\n    `${value.toFixed(2)}% - \"${threadName}\"`\n  );\n};\n\nexport default CpuConsumerItem;\n","import React from 'react';\nimport CpuConsumer from './CpuConsumer';\nimport CpuConsumerItem from './CpuConsumerItem';\n\ntype Props = {\n  limit: number;\n  dumpsNumber: number;\n  consumers: CpuConsumer[];\n};\n\nconst CpuConsumersList: React.SFC<Props> = ({ limit, dumpsNumber, consumers }) => (\n  <ul id=\"consumers-list\">\n    {consumers.slice(0, limit).map((consumer, index) => (\n      <CpuConsumerItem key={index} dumpsNumber={dumpsNumber} consumer={consumer} />\n    ))}\n  </ul>\n);\n\nexport default CpuConsumersList;\n","import React from 'react';\nimport { CpuConsumersMode } from './CpuConsumersPage';\n\ntype Props = {\n  mode: CpuConsumersMode;\n  limit: number;\n  onModeChange: (mode: number) => React.ChangeEventHandler<HTMLInputElement>;\n  onLimitChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst CpuConsumersSettings: React.SFC<Props> = ({ mode, limit, onModeChange, onLimitChange }) => (\n  <div id=\"settings\">\n    <div className=\"filters\">\n      <b>CPU usage calculation:</b>\n\n      <label className={mode === CpuConsumersMode.Mean ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Mean}\n          onChange={onModeChange(CpuConsumersMode.Mean)}\n        />\n        Mean\n        </label>\n\n      <label className={mode === CpuConsumersMode.Median ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Median}\n          onChange={onModeChange(CpuConsumersMode.Median)}\n        />\n        Median\n        </label>\n\n      <label className={mode === CpuConsumersMode.Max ? 'checked' : ''}>\n        <input\n          type=\"checkbox\"\n          checked={mode === CpuConsumersMode.Max}\n          onChange={onModeChange(CpuConsumersMode.Max)}\n        />\n        Max\n        </label>\n    </div>\n\n    <div id=\"cpu-consumers-limit\">\n      <label>\n        <input type=\"number\" name=\"limit\" min=\"0\" max=\"10000\"\n          value={limit}\n          onChange={onLimitChange}\n        />\n        <b>Threads to show</b>\n      </label>\n    </div>\n  </div>\n);\n\nexport default CpuConsumersSettings;\n","import LoadAverages from './LoadAverage';\r\nimport Lock from './Lock';\r\nimport MemoryUsage from './MemoryUsage';\r\nimport Thread from './Thread';\r\n\r\nexport default class ThreadDump {\r\n  public static getFormattedTime = (threadDump: ThreadDump): string => {\r\n    return threadDump.epoch\r\n      ? new Date(threadDump.epoch).toUTCString().substr(17, 8)\r\n      : 'unknown time';\r\n  }\r\n\r\n  public static from = (date: string | null): ThreadDump => {\r\n    if (!date) {\r\n      return new ThreadDump();\r\n    }\r\n\r\n    // we can't use new Date(date).valueOf() due to Safari not understanding the date format\r\n    const hours = parseInt(date.substring(11, 13), 10);\r\n    const minutes = parseInt(date.substring(14, 16), 10);\r\n    const seconds = parseInt(date.substring(17), 10);\r\n    return ThreadDump.fromEpoch(hours * 3600000 + minutes * 60000 + seconds * 1000);\r\n  }\r\n\r\n  public static fromEpoch = (epoch: number | null): ThreadDump => {\r\n    const threadDump = new ThreadDump();\r\n    threadDump.epoch = epoch;\r\n    return threadDump;\r\n  }\r\n\r\n  public loadAverages!: LoadAverages | null;\r\n  public runningProcesses!: number;\r\n  public memoryUsage!: MemoryUsage;\r\n  public threads: Thread[] = [];\r\n  public locks: Lock[] = [];\r\n  private epoch: number | null = null;\r\n\r\n  private constructor() {\r\n  }\r\n\r\n  public getEpoch = () => {\r\n    return this.epoch;\r\n  }\r\n}\r\n","import Lock from '../../types/Lock';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\n\nexport default class Monitor {\n  public time: string;\n  public javaClass: string;\n  public owner: Thread | null;\n  public waiting: Thread[];\n\n  public constructor(threadDump: ThreadDump, lock: Lock) {\n    this.time = ThreadDump.getFormattedTime(threadDump);\n    this.javaClass = lock.className;\n    this.owner = lock.owner;\n    this.waiting = lock.waiting;\n  }\n}\n","import Monitor from './Monitor';\n\nexport default class MonitorOverTime {\n  public id: string;\n  public waitingSum: number = 0;\n  public monitors: Monitor[] = [];\n\n  public constructor(id: string) {\n    this.id = id;\n  }\n}\n","import React from 'react';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\nimport Monitor from './Monitor';\n\ntype Props = {\n  monitor: Monitor;\n};\n\ntype State = {\n  showOwner: boolean;\n};\n\nexport default class MonitorOwner extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showOwner: false,\n  };\n\n  public render() {\n    const monitor = this.props.monitor;\n\n    if (!monitor.owner) {\n      return null;\n    }\n\n    return (\n      <>\n        <b>Held by:</b>\n        <br />\n        <a className=\"expandable-details\" onClick={this.handleClick}>{monitor.owner.name}</a>\n        <br />\n\n        {this.state.showOwner &&\n          <ThreadDetailsWindow thread={monitor.owner} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = (event: React.MouseEvent) => {\n    event.stopPropagation();\n    this.setState(prevState => ({ showOwner: !prevState.showOwner }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showOwner: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class WaitingListItem extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n\n    return (\n      <>\n        <a onClick={this.handleClick}>{thread.name}</a>\n        <br />\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport WaitingListItem from './WaitingListItem';\n\ntype Props = {\n  waiting: Thread[],\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nexport default class WaitingList extends React.PureComponent<Props, State> {\n\n  private static THREADS_TO_SHOW_WHEN_COLLAPSED = 20;\n\n  public state: State = {\n    expanded: false,\n  };\n\n  public render() {\n    if (this.props.waiting.length === 0) {\n      return null;\n    }\n\n    const collapsable = this.props.waiting.length - WaitingList.THREADS_TO_SHOW_WHEN_COLLAPSED;\n    const threads = this.state.expanded\n      ? this.props.waiting\n      : this.props.waiting.slice(0, WaitingList.THREADS_TO_SHOW_WHEN_COLLAPSED);\n\n    return (\n      <>\n        <b>{this.props.waiting.length} thread(s) waiting for notification on lock:</b>\n        <br />\n\n        {threads.map((thread, index) => <WaitingListItem thread={thread} key={index} />)}\n\n        {collapsable > 0 &&\n          <a onClick={this.toggleExpand}>\n            {this.state.expanded\n              ? `Collapse threads list (hide ${collapsable} thread(s))`\n              : `Expand threads list (${collapsable} more thread(s) to show)`}\n          </a>}\n      </>\n    );\n  }\n\n  private toggleExpand = () => {\n    this.setState(prevState => ({ expanded: !prevState.expanded }));\n  }\n}\n","import React from 'react';\nimport Monitor from './Monitor';\nimport MonitorOwner from './MonitorOwner';\nimport WaitingList from './WaitingList';\n\ntype Props = {\n  monitor: Monitor;\n};\n\nconst MonitorItem: React.SFC<Props> = ({ monitor }) => {\n  const javaClass = monitor.javaClass\n    ? monitor.javaClass.substring(monitor.javaClass.lastIndexOf('.') + 1)\n    : 'unknown class';\n\n  return (\n    <div className=\"monitors-container\">\n      <div className=\"left\">\n        <b>{monitor.time}</b>\n        <br />\n        {javaClass}\n      </div>\n      <div>\n        <MonitorOwner monitor={monitor} />\n        <WaitingList waiting={monitor.waiting} />\n      </div>\n    </div>\n  );\n};\n\nexport default MonitorItem;\n","import React from 'react';\nimport MonitorItem from './MonitorItem';\nimport MonitorOverTime from './MonitorOverTime';\n\ntype Props = {\n  monitor: MonitorOverTime;\n};\n\ntype State = {\n  collapse: boolean;\n};\n\nexport default class MonitorOverTimeItem extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    collapse: false,\n  };\n\n  public render() {\n    const monitor = this.props.monitor;\n\n    return (\n      <>\n        <h5 className=\"clickable\" onClick={this.toggleCollapse}>\n          <span className={this.state.collapse ? 'chevron rotate' : 'chevron'} />\n          {monitor.waitingSum} thread(s) waiting for &lt;{monitor.id}&gt;\n        </h5>\n\n        {!this.state.collapse &&\n          monitor.monitors.map((item, index) => <MonitorItem key={index} monitor={item} />)}\n      </>\n    );\n  }\n\n  private toggleCollapse = () => {\n    this.setState(prevState => ({ collapse: !prevState.collapse }));\n  }\n}\n","import React from 'react';\nimport './Filter.css';\n\ntype Props = {\n  name: string;\n  displayName: string;\n  checked: boolean;\n  onChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst Filter: React.SFC<Props> = ({ name, displayName, checked, onChange }) => (\n  <label className={checked ? 'checked' : ''}>\n    <input\n      type=\"checkbox\"\n      name={name}\n      checked={checked}\n      onChange={onChange}\n    />\n    {displayName}\n  </label>\n);\n\nexport default Filter;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  withOwner: boolean;\n  withoutIdle: boolean;\n  withoutOwner: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst MonitorsSettings: React.SFC<Props> =\n  ({ withOwner, withoutIdle, withoutOwner, onFilterChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n\n        <Filter name=\"withOwner\" displayName=\"With Owner\"\n          checked={withOwner} onChange={onFilterChange} />\n\n        <Filter name=\"withoutOwner\" displayName=\"Without Owner\"\n          checked={withoutOwner} onChange={onFilterChange} />\n      </div>\n    </div>\n  );\n\nexport default MonitorsSettings;\n","import React from 'react';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport Monitor from './Monitor';\nimport MonitorOverTime from './MonitorOverTime';\nimport MonitorOverTimeItem from './MonitorOverTimeItem';\nimport './MonitorsPage.css';\nimport MonitorsSettings from './MonitorsSettings';\n\ntype State = {\n  withOwner: boolean;\n  withoutIdle: boolean;\n  withoutOwner: boolean;\n};\n\nexport default class MonitorsPage extends PageWithSettings<State> {\n\n  public state: State = {\n    withOwner: false,\n    withoutIdle: true,\n    withoutOwner: false,\n  };\n\n  protected PAGE_NAME = 'Monitors';\n\n  public render() {\n    const monitors = this.getMonitorsOverTime(this.props.threadDumps);\n    const filtered = this.filterMonitors(monitors);\n\n    return (\n      <div id=\"page\">\n        <MonitorsSettings\n          withOwner={this.state.withOwner}\n          withoutIdle={this.state.withoutIdle}\n          withoutOwner={this.state.withoutOwner}\n          onFilterChange={this.handleFilterChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: MonitorsPage.NO_THREAD_DUMPS }} />\n          : filtered.length === 0\n            ? <h4>{MonitorsPage.N0_MONITORS_MATCHING}</h4>\n            : filtered.map(monitor => <MonitorOverTimeItem key={monitor.id} monitor={monitor} />)}\n      </div>\n    );\n  }\n\n  private getMonitorsOverTime = (threadDumps: ThreadDump[]): MonitorOverTime[] => {\n    const monitorsOverTime: Map<string, MonitorOverTime> = new Map();\n\n    threadDumps.forEach((threadDump) => {\n      threadDump.locks.forEach((lock) => {\n        const monitor = new Monitor(threadDump, lock);\n\n        let monitorOverTime = monitorsOverTime.get(lock.id);\n        if (!monitorOverTime) {\n          monitorOverTime = new MonitorOverTime(lock.id);\n          monitorsOverTime.set(lock.id, monitorOverTime);\n        }\n\n        monitorOverTime.monitors.push(monitor);\n        monitorOverTime.waitingSum += monitor.waiting.length;\n      });\n    });\n\n    return Array\n      .from(monitorsOverTime.values())\n      .sort((m1, m2) => m2.waitingSum - m1.waitingSum);\n  }\n\n  private filterMonitors = (monitors: MonitorOverTime[]) => {\n    let filtered = monitors.filter(monitor => monitor.waitingSum > 0);\n\n    if (this.state.withoutIdle) {\n      filtered = filtered.filter(monitor => !this.isQueueThread(monitor));\n    }\n    if (this.state.withOwner) {\n      filtered = filtered.filter(monitor => this.hasAnyOwner(monitor));\n    }\n    if (this.state.withoutOwner) {\n      filtered = filtered.filter(monitor => !this.hasAnyOwner(monitor));\n    }\n\n    return filtered;\n  }\n\n  private hasAnyOwner = (monitorOverTime: MonitorOverTime): boolean => {\n    return monitorOverTime.monitors.some(monitor => monitor.owner !== null);\n  }\n\n  private isQueueThread = (monitorOverTime: MonitorOverTime): boolean => {\n    for (const monitor of monitorOverTime.monitors) {\n      // if the lock has an owner, it's not a queue thread\n      if (monitor.owner !== null) {\n        return false;\n      }\n\n      // if the stack trace is too long, it's not a queue thread\n      for (const thread of monitor.waiting) {\n        if (thread.stackTrace.length > 12) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n}\n","import React, { ReactNode } from 'react';\n\ntype Props = {\n  to: string;\n  children: ReactNode;\n};\n\nconst OutboundLink: React.SFC<Props> = ({ to, children }) => (\n  <a href={to} target=\"_blank\" rel=\"noopener noreferrer\">\n    {children}\n  </a>\n);\n\nexport default OutboundLink;\n","import React from 'react';\nimport { NavLink, RouteComponentProps, withRouter } from 'react-router-dom';\nimport { clearCurrentThreadDump } from '../../common/threadDumpsStorageService';\nimport './Navigation.css';\nimport OutboundLink from './OutboundLink';\n\n// tslint:disable:max-line-length\nexport const ISSUE_TRACKER_LINK: string = 'https://github.com/drauf/watson/issues';\nexport const SOURCE_CODE_LINK: string = 'https://github.com/drauf/watson';\n// tslint:enable:max-line-length\n\ntype Props = RouteComponentProps<any> & {\n  open: boolean;\n};\n\nclass Navigation extends React.PureComponent<Props> {\n\n  public render() {\n    const key: string = this.props.match.params.key as string;\n\n    return (\n      <nav className={this.props.open ? 'open' : ''}>\n        <h1 id={this.props.open ? 'brand-visible' : 'brand-hidden'}>\n          Watson\n        </h1>\n\n        <ul>\n          <NavLink to={`/${key}/summary/`}><li>Summary</li></NavLink>\n        </ul>\n        <ul>\n          <NavLink to={`/${key}/cpu-consumers/`}><li>CPU Consumers</li></NavLink>\n          <NavLink to={`/${key}/similar-stacks/`}><li>Similar Stack Traces</li></NavLink>\n          <NavLink to={`/${key}/stuck-threads/`}><li>Stuck Threads Suspects</li></NavLink>\n          <NavLink to={`/${key}/threads-overview/`}><li>Threads Overview</li></NavLink>\n          <NavLink to={`/${key}/monitors/`}><li>Monitors</li></NavLink>\n        </ul>\n\n        <div id=\"nav-content-bottom\">\n          <ul>\n            <a onClick={this.onClear}><li>Load another thread dump</li></a>\n          </ul>\n\n          <ul>\n            <OutboundLink to={ISSUE_TRACKER_LINK}>\n              <li>Issue tracker</li>\n            </OutboundLink>\n            <OutboundLink to={SOURCE_CODE_LINK}>\n              <li>Source code</li>\n            </OutboundLink>\n          </ul>\n        </div>\n      </nav>\n    );\n  }\n\n  private onClear = () => {\n    clearCurrentThreadDump();\n    this.props.history.push('/');\n  }\n}\n\nexport default withRouter(Navigation);\n","import React from 'react';\nimport './NavToggle.css';\n\ntype Props = {\n  open: boolean;\n  onClick: () => void;\n};\n\nconst NavToggle: React.SFC<Props> = ({ open, onClick }) => (\n  <div className={open ? 'nav-toggle open' : 'nav-toggle'} onClick={onClick}>\n    <div id=\"nav-arrow\" />\n  </div>\n);\n\nexport default NavToggle;\n","import React from 'react';\nimport { WithThreadDumpsProps } from '../common/withThreadDumps';\n\nconst NotFoundError: React.SFC<WithThreadDumpsProps> = () => (\n  <h4 id=\"centered\">Oops, you've found a dead link!</h4>\n);\n\nexport default NotFoundError;\n","import Thread from '../types/Thread';\n\n// tslint:disable:max-line-length\nexport default function isIdleThread(thread: Thread): boolean {\n  return thread.stackTrace.length < 17\n    || (thread.name.includes('rufus-scheduler')\n      && thread.stackTrace[7] === 'org.jruby.ext.thread.Queue$INVOKER$i$pop.call(Queue$INVOKER$i$pop.gen)'\n      || thread.stackTrace[3] === 'org.jruby.RubyKernel$INVOKER$s$0$1$sleep.call(RubyKernel$INVOKER$s$0$1$sleep.gen)')\n    || (thread.name.includes('rubinius-actor')\n      && thread.stackTrace[5] === 'org.jruby.ext.rubinius.RubiniusChannel$INVOKER$i$0$0$receive.call(RubiniusChannel$INVOKER$i$0$0$receive.gen)');\n}\n","import React from 'react';\n\ntype Props = {\n  stackTrace: string[];\n  linesToConsider: number;\n};\n\nconst StackTrace: React.SFC<Props> = ({ stackTrace, linesToConsider }) => {\n  const stack = linesToConsider > 0 ? stackTrace.slice(0, linesToConsider) : stackTrace;\n\n  return (\n    <ol className=\"stacktrace\">\n      {stack.map((line, index) => (\n        <li key={index}>{line}</li>))}\n    </ol>\n  );\n};\n\nexport default StackTrace;\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n  showLockOwner: boolean;\n};\n\nexport default class ThreadSummary extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: false,\n    showLockOwner: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n    const lockOwner = thread.lockWaitingFor ? thread.lockWaitingFor.owner : null;\n    const locksHeld = this.getLocksHeldString(thread);\n\n    return (\n      <li>\n        <a onClick={this.toggleDetails}>\"{thread.name}\"</a>\n        {` ${Thread.getFormattedTime(thread)}`}\n        {this.waitingForRender(thread, lockOwner)}\n        {thread.locksHeld.length > 0 && `, holding [${locksHeld}]`}\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n        {this.state.showLockOwner && lockOwner &&\n          <ThreadDetailsWindow thread={lockOwner} onUnload={this.handleUnload} />}\n      </li>\n    );\n  }\n\n  private toggleDetails = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private toggleLockOwner = () => {\n    this.setState(prevState => ({ showLockOwner: !prevState.showLockOwner }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false, showLockOwner: false });\n  }\n\n  private waitingForRender(thread: Thread, lockOwner: Thread | null) {\n    const lockWaitingFor = thread.lockWaitingFor ? thread.lockWaitingFor.id : null;\n\n    if (!lockWaitingFor) {\n      return null;\n    }\n\n    if (lockOwner) {\n      console.error(thread);\n      return (\n        <>\n          , awaiting notification on <a onClick={this.toggleLockOwner}>[{lockWaitingFor}]</a>\n        </>\n      );\n    }\n    return `, awaiting notification on [${lockWaitingFor}] without an owner`;\n  }\n\n  private getLocksHeldString = (thread: Thread): string | null => {\n    if (thread.locksHeld.length === 0) {\n      return null;\n    }\n    return thread.locksHeld.map(lock => lock.id).reduce(this.locksReducer);\n  }\n\n  private locksReducer(accumulator: string, lockId: string, index: number): string {\n    return (index === 0) ? lockId : `${accumulator}, ${lockId}`;\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport StackTrace from './StackTrace';\nimport ThreadSummary from './ThreadSummary';\n\ntype Props = {\n  threadGroup: Thread[];\n  linesToConsider: number;\n};\n\ntype State = {\n  expanded: boolean;\n};\n\nexport default class GroupDetails extends React.PureComponent<Props, State> {\n\n  private static THREADS_TO_SHOW_WHEN_COLLAPSED = 20;\n\n  public state: State = {\n    expanded: false,\n  };\n\n  public render() {\n    const stackTrace = this.getStackTrace(this.props.threadGroup);\n    const sortedByName = this.props.threadGroup.sort((t1, t2) => t1.name.localeCompare(t2.name));\n    const collapsable = sortedByName.length - GroupDetails.THREADS_TO_SHOW_WHEN_COLLAPSED;\n    const threads = this.state.expanded\n      ? sortedByName\n      : sortedByName.slice(0, GroupDetails.THREADS_TO_SHOW_WHEN_COLLAPSED);\n\n    return (\n      <>\n        <ul>\n          {threads.map((thread, index) => <ThreadSummary key={index} thread={thread} />)}\n\n          {collapsable > 0 &&\n            <li><a onClick={this.toggleExpand}>\n              {this.state.expanded\n                ? `Collapse threads list (hide ${collapsable} thread(s))`\n                : `Expand threads list (${collapsable} more thread(s) to show)`}\n            </a></li>}\n        </ul>\n        <StackTrace stackTrace={stackTrace} linesToConsider={this.props.linesToConsider} />\n      </>\n    );\n  }\n\n  private toggleExpand = () => {\n    this.setState(prevState => ({ expanded: !prevState.expanded }));\n  }\n\n  private getStackTrace = (threads: Thread[]): string[] => {\n    for (const thread of threads) {\n      if (thread) {\n        return thread.stackTrace;\n      }\n    }\n    return [];\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport GroupDetails from './GroupDetails';\n\ntype Props = {\n  threadGroup: Thread[];\n  linesToConsider: number;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class SimilarStacksGroup extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: true,\n  };\n\n  public render() {\n    return (\n      <>\n        <h5 className=\"clickable\" onClick={this.toggleGroup}>\n          <span className={this.state.showDetails ? 'chevron' : 'chevron rotate'} />\n          {this.props.threadGroup.length} thread(s) with this stack:\n        </h5>\n\n        {this.state.showDetails &&\n          <GroupDetails\n            threadGroup={this.props.threadGroup}\n            linesToConsider={this.props.linesToConsider} />}\n      </>\n    );\n  }\n\n  private toggleGroup = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n}\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  linesToConsider: number;\n  minimalGroupSize: number;\n  withoutIdle: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onIntegerChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst SimilarStacksSettings: React.SFC<Props> =\n  ({ linesToConsider, minimalGroupSize, withoutIdle, onFilterChange, onIntegerChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n      </div>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"linesToConsider\"\n          value={linesToConsider}\n          onChange={onIntegerChange}\n        />\n        <b>Stack trace lines to compare</b>\n      </label>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"minimalGroupSize\"\n          value={minimalGroupSize}\n          onChange={onIntegerChange}\n        />\n        <b>Minimal group size to show</b>\n      </label>\n    </div>\n  );\n\nexport default SimilarStacksSettings;\n","import React from 'react';\nimport isIdleThread from '../../common/isIdleThread';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport SimilarStacksGroup from './SimilarStacksGroup';\nimport './SimilarStacksPage.css';\nimport SimilarStacksSettings from './SimilarStacksSettings';\n\ntype State = {\n  linesToConsider: number;\n  minimalGroupSize: number;\n  withoutIdle: boolean;\n};\n\nexport default class SimilarStacksPage extends PageWithSettings<State> {\n\n  public state: State = {\n    linesToConsider: 40,\n    minimalGroupSize: 2,\n    withoutIdle: true,\n  };\n\n  protected PAGE_NAME = 'Similar Stacks';\n\n  public render() {\n    const threadGroups = this.groupByStackTrace(this.props.threadDumps, this.state.linesToConsider)\n      .filter(group => group.length >= this.state.minimalGroupSize);\n\n    return (\n      <div id=\"page\">\n        <SimilarStacksSettings\n          linesToConsider={this.state.linesToConsider}\n          minimalGroupSize={this.state.minimalGroupSize}\n          withoutIdle={this.state.withoutIdle}\n          onFilterChange={this.handleFilterChange}\n          onIntegerChange={this.handleIntegerChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: SimilarStacksPage.NO_THREAD_DUMPS }} />\n          : threadGroups.length === 0\n            ? <h4>{SimilarStacksPage.N0_THREADS_MATCHING}</h4>\n            : threadGroups.map((group, index) => (\n              <SimilarStacksGroup key={index}\n                threadGroup={group}\n                linesToConsider={this.state.linesToConsider} />))}\n      </div>\n    );\n  }\n\n  private groupByStackTrace(threadDumps: ThreadDump[], linesToConsider: number) {\n    const grouped: Map<string, Thread[]> = new Map();\n\n    threadDumps.forEach((threadDump) => {\n      threadDump.threads.forEach((thread) => {\n        const stackTrace = this.getStackTrace(thread, linesToConsider);\n\n        if (!stackTrace) {\n          return;\n        }\n\n        let similarStacks = grouped.get(stackTrace);\n        if (!similarStacks) {\n          similarStacks = [];\n        }\n        similarStacks.push(thread);\n\n        grouped.set(stackTrace, similarStacks);\n      });\n    });\n\n    return Array.from(grouped.values()).sort((t1, t2) => t2.length - t1.length);\n  }\n\n  private getStackTrace(thread: Thread, linesToConsider: number): string | null {\n    if (this.state.withoutIdle && isIdleThread(thread)) {\n      return null;\n    }\n\n    if (linesToConsider < 1) {\n      return thread.stackTrace.toString();\n    }\n\n    return thread.stackTrace.slice(0, linesToConsider).toString();\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\n\ntype Props = {\n  maxDifferingLines: number;\n  showStackTrace: boolean;\n  thread: Thread;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class ThreadDetails extends React.PureComponent<Props, State> {\n  public state: State = {\n    showDetails: false,\n  };\n\n  public render() {\n    const thread = this.props.thread;\n    const stack = thread.stackTrace.slice(0, Math.max(this.props.maxDifferingLines, 10));\n\n    return (\n      <>\n        <h6>\n          <a onClick={this.handleClick} title=\"Open thread details in a new window\">\n            {Thread.getFormattedTime(thread)}\n          </a>\n        </h6>\n\n        {this.props.showStackTrace &&\n          <ol className=\"stacktrace\">\n            {stack.map((line, index) => (\n              <li key={index}>{line}</li>))}\n          </ol>}\n\n        {this.state.showDetails &&\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\n      </>\n    );\n  }\n\n  private handleClick = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n\n  private handleUnload = () => {\n    this.setState({ showDetails: false });\n  }\n}\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport ThreadDetails from './ThreadDetails';\n\ntype Props = {\n  maxDifferingLines: number;\n  threadGroup: Thread[];\n};\n\nconst GroupDetails: React.SFC<Props> = ({ maxDifferingLines, threadGroup }) => {\n  return (\n    <>\n      {threadGroup.map((thread, index, array) =>\n        <ThreadDetails\n          key={index}\n          thread={thread}\n          showStackTrace={shouldShowStackTrace(thread, array[index + 1], maxDifferingLines)}\n          maxDifferingLines={maxDifferingLines}\n        />)}\n    </>\n  );\n};\n\n// Only show the stack trace if it's the last one or the next one is different than current\nconst shouldShowStackTrace =\n  (current: Thread, next: Thread | undefined, maxDifferingLines: number): boolean => {\n    if (!next) {\n      return true;\n    }\n\n    const currentStack = current.stackTrace;\n    const nextStack = next.stackTrace;\n    const limit = Math.min(maxDifferingLines, currentStack.length);\n\n    for (let i = 0; i < limit; i++) {\n      if (currentStack[i] !== nextStack[i]) {\n        return true;\n      }\n    }\n    return false;\n  };\n\nexport default GroupDetails;\n","import React from 'react';\nimport Thread from '../../types/Thread';\nimport GroupDetails from './GroupDetails';\n\ntype Props = {\n  threadGroup: Thread[];\n  maxDifferingLines: number;\n};\n\ntype State = {\n  showDetails: boolean;\n};\n\nexport default class StuckThreadsGroup extends React.PureComponent<Props, State> {\n\n  public state: State = {\n    showDetails: true,\n  };\n\n  public render() {\n    if (this.props.threadGroup.length === 0) {\n      return null;\n    }\n\n    const thread = this.props.threadGroup[0];\n    return (\n      <>\n        <h5 className=\"clickable\" onClick={this.toggleGroup}>\n          <span className={this.state.showDetails ? 'chevron' : 'chevron rotate'} />\n          {this.props.threadGroup.length} similar stack(s) for \"{thread.name}\"\n        </h5>\n\n        {this.state.showDetails &&\n          <GroupDetails\n            threadGroup={this.props.threadGroup}\n            maxDifferingLines={this.props.maxDifferingLines} />}\n      </>\n    );\n  }\n\n  private toggleGroup = () => {\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\n  }\n}\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  maxDifferingLines: number;\n  minClusterSize: number;\n  withoutIdle: boolean;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onIntegerChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst StuckThreadsSettings: React.SFC<Props> =\n  ({ maxDifferingLines, minClusterSize, withoutIdle, onFilterChange, onIntegerChange }) => (\n    <div id=\"settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"withoutIdle\" displayName=\"Without Idle\"\n          checked={withoutIdle} onChange={onFilterChange} />\n      </div>\n\n      <label>\n        <input\n          type=\"number\"\n          min=\"2\"\n          name=\"minClusterSize\"\n          value={minClusterSize}\n          onChange={onIntegerChange}\n        />\n        <b>Minimal similar stacks to consider a thread stuck</b>\n      </label>\n\n      <label>\n        <input\n          type=\"number\"\n          name=\"maxDifferingLines\"\n          value={maxDifferingLines}\n          onChange={onIntegerChange}\n        />\n        <b>Maximum differing lines between dumps</b>\n      </label>\n    </div>\n  );\n\nexport default StuckThreadsSettings;\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport isIdleThread from '../../common/isIdleThread';\nimport { WithThreadDumpsProps } from '../../common/withThreadDumps';\nimport Thread from '../../types/Thread';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport StuckThreadsGroup from './StuckThreadsGroup';\nimport StuckThreadsSettings from './StuckThreadsSettings';\n\ntype State = {\n  maxDifferingLines: number;\n  minClusterSize: number;\n  withoutIdle: boolean;\n};\n\nexport default class StuckThreadsPage extends PageWithSettings<State> {\n  protected PAGE_NAME = 'Stuck Threads';\n\n  constructor(props: WithThreadDumpsProps) {\n    super(props);\n\n    this.state = {\n      maxDifferingLines: 5,\n      minClusterSize: this.props.threadDumps.length,\n      withoutIdle: true,\n    };\n  }\n\n  public render() {\n    const threadOverTime = getThreadsOverTime(this.props.threadDumps);\n    const filtered = this.filterThreads(threadOverTime);\n    const clusters = this.buildClusters(filtered);\n\n    return (\n      <div id=\"page\">\n        <StuckThreadsSettings\n          maxDifferingLines={this.state.maxDifferingLines}\n          minClusterSize={this.state.minClusterSize}\n          withoutIdle={this.state.withoutIdle}\n          onFilterChange={this.handleFilterChange}\n          onIntegerChange={this.handleIntegerChange} />\n\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: StuckThreadsPage.NO_THREAD_DUMPS }} />\n          : clusters.length === 0\n            ? <h4>{StuckThreadsPage.N0_THREADS_MATCHING}</h4>\n            : clusters.map((group, index) => (\n              <StuckThreadsGroup key={index}\n                threadGroup={group}\n                maxDifferingLines={this.state.maxDifferingLines} />))}\n      </div>\n    );\n  }\n\n  private filterThreads = (threadDumps: Array<Map<number, Thread>>): Thread[][] => {\n    return threadDumps\n      .map(threadDump => this.filterThread(threadDump))\n      .filter(dump => dump.length > 0);\n  }\n\n  private filterThread = (threadOverTime: Map<number, Thread>): Thread[] => {\n    const filtered = [];\n\n    for (const thread of threadOverTime) {\n      if (this.state.withoutIdle && isIdleThread(thread[1])) {\n        continue;\n      }\n\n      filtered.push(thread[1]);\n    }\n\n    return filtered;\n  }\n\n  private buildClusters = (threadDumps: Thread[][]): Thread[][] => {\n    const clusters: Thread[][] = [];\n\n    for (const threadOverTime of threadDumps) {\n      this.getClustersFromThread(threadOverTime)\n        .filter(c => c.length >= this.state.minClusterSize)\n        .forEach(c => clusters.push(c));\n    }\n\n    return clusters.sort((c1, c2) => c2.length - c1.length);\n  }\n\n  private getClustersFromThread = (threadOverTime: Thread[]): Thread[][] => {\n    const clusters = [];\n\n    let currentCluster = [threadOverTime[0]];\n    for (let i = 1; i < threadOverTime.length; i++) {\n      const previous = threadOverTime[i - 1];\n      const current = threadOverTime[i];\n\n      if (this.areThreadsSimilarEnough(previous, current)) {\n        currentCluster.push(current);\n      } else {\n        clusters.push(currentCluster);\n        currentCluster = [current];\n      }\n    }\n\n    clusters.push(currentCluster);\n    return clusters;\n  }\n\n  private areThreadsSimilarEnough = (t1: Thread, t2: Thread): boolean => {\n    const stack1 = t1.stackTrace;\n    const stack2 = t2.stackTrace;\n\n    if (Math.abs(stack1.length - stack2.length) > this.state.maxDifferingLines) {\n      return false;\n    }\n\n    const limit = Math.max(stack1.length, stack2.length);\n    for (let i = limit; i >= 0; i--) {\n      if (stack1[i] !== stack2[i]) {\n        return (i <= this.state.maxDifferingLines);\n      }\n    }\n\n    return true;\n  }\n}\n","import React from 'react';\r\nimport {\r\n  CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis,\r\n} from 'recharts';\r\nimport ThreadDump from '../../types/ThreadDump';\r\n\r\ntype Props = {\r\n  threadDumps: ThreadDump[];\r\n};\r\n\r\nconst LoadAveragesChart: React.SFC<Props> = ({ threadDumps }) => {\r\n  const data: object[] = [];\r\n  threadDumps.map((threadDump) => {\r\n    if (threadDump.loadAverages) {\r\n      data.push({\r\n        fifteenMinutes: threadDump.loadAverages.fifteenMinutes,\r\n        fiveMinutes: threadDump.loadAverages.fiveMinutes,\r\n        name: ThreadDump.getFormattedTime(threadDump),\r\n        oneMinute: threadDump.loadAverages.oneMinute,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3>Load averages</h3>\r\n      <ResponsiveContainer width=\"100%\" height={350}>\r\n        <LineChart data={data}>\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" />\r\n          <CartesianGrid stroke=\"#DFE1E5\" strokeDasharray=\"5 5\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line name=\"One minute\" dataKey=\"oneMinute\" stroke=\"#36B37E\" />\r\n          <Line name=\"Five minutes\" dataKey=\"fiveMinutes\" stroke=\"#FFAB00\" />\r\n          <Line name=\"Fifteen minutes\" dataKey=\"fifteenMinutes\" stroke=\"#6554C0\" />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoadAveragesChart;\r\n","import { TooltipFormatter } from 'recharts';\n\n// perform a \"best effort\" conversion to GBs\nconst labelFormatter: TooltipFormatter\n  = (value: string | number | Array<string | number>): React.ReactNode => {\n    return convert(value as number);\n  };\n\nconst convert = (value: number): string => {\n  if (value > 1000000) {\n    return `${round(value / 1000000)} GB`;\n  }\n  return `${round(value / 1000)} MB`;\n};\n\nconst round = (value: number): string => {\n  return value.toFixed(2);\n};\n\nexport default labelFormatter;\n","import React from 'react';\nimport {\n  Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip,\n} from 'recharts';\nimport MemoryUsage from '../../types/MemoryUsage';\nimport ThreadDump from '../../types/ThreadDump';\nimport labelFormatter from './LabelFormatter';\n\nconst COLORS = ['#00B8D9', '#36B37E'];\n\ntype Props = {\n  threadDumps: ThreadDump[];\n};\n\nconst MemoryUsageChart: React.SFC<Props> = ({ threadDumps }) => {\n  const memoryUsages: MemoryUsage[] = threadDumps\n    .map(threadDump => threadDump.memoryUsage)\n    .filter(memoryUsage => !!memoryUsage);\n\n  const freeMemoryAvg = memoryUsages.reduce((a, b) => a + b.memoryFree, 0) / memoryUsages.length;\n  const usedMemoryAvg = memoryUsages.reduce((a, b) => a + b.memoryUsed, 0) / memoryUsages.length;\n\n  const data: object[] = [\n    { name: 'Used memory', value: usedMemoryAvg },\n    { name: 'Free memory', value: freeMemoryAvg },\n  ];\n\n  return (\n    <div>\n      <h3>Memory usage</h3>\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={data} dataKey=\"value\" nameKey=\"name\">\n            {\n              data.map((_, index) => <Cell key={index} fill={COLORS[index]} />)\n            }\n          </Pie>\n          <Tooltip formatter={labelFormatter} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default MemoryUsageChart;\n","import React from 'react';\r\nimport {\r\n  CartesianGrid, Legend, Line, LineChart, ResponsiveContainer, Tooltip, XAxis, YAxis,\r\n} from 'recharts';\r\nimport ThreadDump from '../../types/ThreadDump';\r\n\r\ntype Props = {\r\n  threadDumps: ThreadDump[];\r\n};\r\n\r\nconst RunningProcessesChart: React.SFC<Props> = ({ threadDumps }) => {\r\n  const data: object[] = [];\r\n  threadDumps.map((threadDump) => {\r\n    if (threadDump.loadAverages) {\r\n      data.push({\r\n        name: ThreadDump.getFormattedTime(threadDump),\r\n        runningProcesses: threadDump.runningProcesses,\r\n      });\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className=\"chart\">\r\n      <h3>Running processes</h3>\r\n      <ResponsiveContainer width=\"100%\" height={250}>\r\n        <LineChart data={data}>\r\n          <XAxis dataKey=\"name\" />\r\n          <YAxis type=\"number\" />\r\n          <CartesianGrid stroke=\"#DFE1E5\" strokeDasharray=\"5 5\" />\r\n          <Tooltip />\r\n          <Legend />\r\n          <Line\r\n            name=\"Running processes\"\r\n            dataKey=\"runningProcesses\"\r\n            stroke=\"#36B37E\"\r\n          />\r\n        </LineChart>\r\n      </ResponsiveContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RunningProcessesChart;\r\n","import React from 'react';\nimport {\n  Cell, Legend, Pie, PieChart, ResponsiveContainer, Tooltip,\n} from 'recharts';\nimport MemoryUsage from '../../types/MemoryUsage';\nimport ThreadDump from '../../types/ThreadDump';\nimport labelFormatter from './LabelFormatter';\n\nconst COLORS = ['#6554C0', '#FF5630'];\n\ntype Props = {\n  threadDumps: ThreadDump[];\n};\n\nconst SwapUsageChart: React.SFC<Props> = ({ threadDumps }) => {\n  const memoryUsages: MemoryUsage[] = threadDumps\n    .map(threadDump => threadDump.memoryUsage)\n    .filter(memoryUsage => !!memoryUsage);\n\n  const freeSwapAvg = memoryUsages.reduce((a, b) => a + b.swapFree, 0) / memoryUsages.length;\n  const usedSwapAvg = memoryUsages.reduce((a, b) => a + b.swapUsed, 0) / memoryUsages.length;\n\n  const data: object[] = [\n    { name: 'Free swap', value: freeSwapAvg },\n    { name: 'Used swap', value: usedSwapAvg },\n  ];\n\n  return (\n    <div>\n      <h3>Swap usage</h3>\n      <ResponsiveContainer width=\"100%\" height={250}>\n        <PieChart>\n          <Pie data={data} dataKey=\"value\" nameKey=\"name\">\n            {\n              data.map((_, index) => <Cell key={index} fill={COLORS[index]} />)\n            }\n          </Pie>\n          <Tooltip formatter={labelFormatter} />\n          <Legend />\n        </PieChart>\n      </ResponsiveContainer>\n    </div>\n  );\n};\n\nexport default SwapUsageChart;\n","import React from 'react';\r\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\r\nimport LoadAveragesChart from './LoadAveragesChart';\r\nimport MemoryUsageChart from './MemoryUsageChart';\r\nimport RunningProcessesChart from './RunningProcessesChart';\r\nimport './SummaryPage.css';\r\nimport SwapUsageChart from './SwapUsageChart';\r\n\r\nexport default class SummaryPage extends PageWithSettings<any> {\r\n  public render = () => (\r\n    <div id=\"wide-page\">\r\n      {!this.props.threadDumps.some(dump => !!dump.loadAverages)\r\n        ? <h4 dangerouslySetInnerHTML={{ __html: SummaryPage.NO_CPU_INFOS }} />\r\n        : <>\r\n          <div id=\"memory-usages\">\r\n            <MemoryUsageChart threadDumps={this.props.threadDumps} />\r\n            <SwapUsageChart threadDumps={this.props.threadDumps} />\r\n          </div>\r\n          <LoadAveragesChart threadDumps={this.props.threadDumps} />\r\n          <RunningProcessesChart threadDumps={this.props.threadDumps} />\r\n        </>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react';\nimport Thread from '../../types/Thread';\n\ntype Props = {\n  isFilteredByStack: boolean;\n  threadsNumber: number;\n  threadDumps: Array<Map<number, Thread>>;\n};\n\nconst ThreadsOverviewFilteringSummary: React.SFC<Props>\n  = ({ isFilteredByStack, threadsNumber, threadDumps }) => {\n\n    if (isFilteredByStack) {\n      const matching = threadDumps.reduce(matchingInGroupCounter, 0);\n      const total = threadDumps.reduce(nonEmptyCounter, 0);\n      const percentage = (matching / total * 100).toFixed(1);\n\n      return (\n        <p id=\"matching-summary\">\n          {matching} out of {total} ({percentage}%) visible threads matching the stack trace filters\n        </p>\n      );\n    }\n\n    if (threadsNumber !== threadDumps.length) {\n      const matching = threadDumps.length;\n      const percentage = (matching / threadsNumber * 100).toFixed(1);\n\n      return (\n        <p id=\"matching-summary\">\n          {matching} out of {threadsNumber} ({percentage}%) threads matching the thread name filters\n        </p>\n      );\n    }\n\n    return <p id=\"matching-summary\" />;\n  };\n\nconst matchingInGroupCounter = (sum: number, currentGroup: Map<number, Thread>): number => {\n  return sum + Array.from(currentGroup.values()).reduce(matchingCounter, 0);\n};\nconst matchingCounter = (sum: number, currentThread: Thread): number => {\n  return sum + (currentThread.matchingFilter ? 1 : 0);\n};\n\nconst nonEmptyCounter = (sum: number, currentGroup: Map<number, Thread>): number => {\n  return sum + Array.from(currentGroup.values()).length;\n};\n\nexport default ThreadsOverviewFilteringSummary;\n","import React from 'react';\n\nconst ThreadsOverviewLegend: React.SFC = () => (\n  <table id=\"thread-overview-legend\">\n    <tbody>\n      <tr>\n        <td className=\"runnable\">runnable</td>\n        <td className=\"blocked\">blocked</td>\n        <td className=\"waiting\">waiting</td>\n        <td className=\"timed-waiting\">timed waiting</td>\n        <td className=\"unknown\">unknown</td>\n        <td />\n        <td className=\"matching\">matching filter</td>\n      </tr>\n    </tbody>\n  </table>\n);\n\nexport default ThreadsOverviewLegend;\n","import React from 'react';\nimport Filter from '../Filter/Filter';\n\ntype Props = {\n  nonJvm: boolean;\n  tomcat: boolean;\n  nonTomcat: boolean;\n  database: boolean;\n  lucene: boolean;\n  nameFilter: string;\n  stackFilter: string;\n  onFilterChange: React.ChangeEventHandler<HTMLInputElement>;\n  onRegExpChange: React.ChangeEventHandler<HTMLInputElement>;\n};\n\nconst ThreadsOverviewSettings: React.SFC<Props> = ({ nonJvm, tomcat, nonTomcat,\n  database, lucene, nameFilter, stackFilter, onFilterChange, onRegExpChange }) => (\n    <div id=\"threads-overview-settings\">\n      <div className=\"filters\">\n        <b>Filters:</b>\n\n        <Filter name=\"nonJvm\" displayName=\"Non-JVM\"\n          checked={nonJvm} onChange={onFilterChange} />\n\n        <Filter name=\"tomcat\" displayName=\"Tomcat\"\n          checked={tomcat} onChange={onFilterChange} />\n\n        <Filter name=\"nonTomcat\" displayName=\"Non-Tomcat\"\n          checked={nonTomcat} onChange={onFilterChange} />\n\n        <Filter name=\"database\" displayName=\"Database\"\n          checked={database} onChange={onFilterChange} />\n\n        <Filter name=\"lucene\" displayName=\"Lucene\"\n          checked={lucene} onChange={onFilterChange} />\n      </div>\n\n      <div id=\"regexp-filters\">\n        <label>\n          <input type=\"text\" name=\"nameFilter\" value={nameFilter} onChange={onRegExpChange}\n          />\n          <b>Thread name RegExp</b>\n        </label>\n\n        <label>\n          <input type=\"text\" name=\"stackFilter\" value={stackFilter} onChange={onRegExpChange}\n          />\n          <b>Stack trace RegExp</b>\n        </label>\n      </div>\n    </div>\n  );\n\nexport default ThreadsOverviewSettings;\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadStatus from '../../types/ThreadStatus';\r\nimport ThreadDetailsWindow from '../ThreadDetails/ThreadDetailsWindow';\r\n\r\ntype Props = {\r\n  thread?: Thread;\r\n  isFiltered: boolean;\r\n  isMatchingFilter: boolean;\r\n};\r\n\r\ntype State = {\r\n  showDetails: boolean;\r\n};\r\n\r\nexport default class ThreadOverviewItem extends React.PureComponent<Props, State> {\r\n\r\n  public state: State = {\r\n    showDetails: false,\r\n  };\r\n\r\n  public render() {\r\n    const thread = this.props.thread;\r\n\r\n    if (!thread) {\r\n      return <td className=\"empty\" />;\r\n    }\r\n\r\n    const className = (this.props.isFiltered)\r\n      ? this.props.isMatchingFilter ? 'matching' : ''\r\n      : thread.status ? thread.status.toString() : ThreadStatus.UNKNOWN.toString();\r\n\r\n    return (\r\n      <>\r\n        <td className={className} onClick={this.toggleDetails}>\r\n          {thread.stackTrace[0]}\r\n          <span>{thread.stackTrace[0]}</span>\r\n        </td>\r\n\r\n        {this.state.showDetails &&\r\n          <ThreadDetailsWindow thread={thread} onUnload={this.handleUnload} />}\r\n      </>\r\n    );\r\n  }\r\n\r\n  private toggleDetails = () => {\r\n    this.setState(prevState => ({ showDetails: !prevState.showDetails }));\r\n  }\r\n\r\n  private handleUnload = () => {\r\n    this.setState({ showDetails: false });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadOverviewItem from './ThreadOverviewItem';\r\n\r\ntype Props = {\r\n  total: number;\r\n  threads: Map<number, Thread>;\r\n  isFiltered: boolean;\r\n};\r\n\r\nconst ThreadOverviewRow: React.SFC<Props> = ({ total, threads, isFiltered }) => {\r\n  const threadsPadded: Array<Thread | undefined> = [];\r\n  for (let i = 0; i < total; i++) {\r\n    threadsPadded[i] = threads.get(i);\r\n  }\r\n\r\n  const firstThread = threadsPadded.find(thread => thread !== undefined);\r\n  const threadName = firstThread ? firstThread.name : '';\r\n\r\n  return (\r\n    <tr>\r\n      <td className=\"name\">\r\n        {threadName}\r\n        <span>{threadName}</span>\r\n      </td>\r\n      {threadsPadded.map((thread, i) => (\r\n        <ThreadOverviewItem key={i}\r\n          thread={thread}\r\n          isFiltered={isFiltered}\r\n          isMatchingFilter={thread ? thread.matchingFilter : false}\r\n        />\r\n      ))}\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default ThreadOverviewRow;\r\n","import React from 'react';\r\nimport Thread from '../../types/Thread';\r\nimport ThreadOverviewRow from './ThreadOverviewRow';\r\n\r\ntype Props = {\r\n  dates: Array<string | null>;\r\n  isFilteredByStack: boolean;\r\n  threadDumps: Array<Map<number, Thread>>;\r\n};\r\n\r\nconst ThreadsOverview: React.SFC<Props> = ({ dates, isFilteredByStack, threadDumps }) => (\r\n  <div id=\"threads-overview-table-wrapper\">\r\n    <table>\r\n      <thead>\r\n        <tr>\r\n          <th />\r\n          {dates.map((date, index) => (\r\n            <th key={index}>\r\n              {date}\r\n              <span>{date}</span>\r\n            </th>\r\n          ))}\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        {threadDumps.map((threads, index) => (\r\n          <ThreadOverviewRow key={index}\r\n            isFiltered={isFilteredByStack}\r\n            total={dates.length}\r\n            threads={threads}\r\n          />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  </div>\r\n);\r\n\r\nexport default ThreadsOverview;\r\n","import React from 'react';\nimport getThreadsOverTime from '../../common/getThreadsOverTime';\nimport Thread from '../../types/Thread';\nimport ThreadDump from '../../types/ThreadDump';\nimport PageWithSettings from '../PageWithSettings/PageWithSettings';\nimport ThreadsOverviewFilteringSummary from './ThreadsOverviewFilteringSummary';\nimport ThreadsOverviewLegend from './ThreadsOverviewLegend';\nimport './ThreadsOverviewPage.css';\nimport ThreadsOverviewSettings from './ThreadsOverviewSettings';\nimport ThreadsOverviewTable from './ThreadsOverviewTable';\n\ntype State = {\n  nonJvm: boolean;\n  tomcat: boolean;\n  nonTomcat: boolean;\n  database: boolean;\n  lucene: boolean;\n  nameFilter: string;\n  stackFilter: string;\n};\n\nexport default class ThreadsOverviewPage extends PageWithSettings<State> {\n\n  // tslint:disable:object-literal-sort-keys\n  public state = {\n    nonJvm: true,\n    tomcat: false,\n    nonTomcat: false,\n    database: false,\n    lucene: false,\n    nameFilter: '',\n    stackFilter: '',\n  };\n  // tslint:enable:object-literal-sort-keys\n\n  protected PAGE_NAME = 'Threads Overview';\n\n  // tslint:disable:max-line-length\n  private jvmRegex = /^Attach Listener|^C[12] CompilerThread|^G1 Concurrent |^G1 Main|^Gang worker#|^GC Daemon|^Service Thread|^Signal Dispatcher|^String Deduplication Thread|^Surrogate Locker Thread|^VM Periodic|^VM Thread/;\n  private tomcatRegex = /^http(s\\-jsse)?\\-[a-z]io\\-[0-9]+\\-exec\\-[0-9]+/;\n  private databaseRegex = /^oracle\\.jdbc\\.driver\\.|^org\\.postgresql\\.|^com\\.microsoft\\.sqlserver\\.|^com\\.mysql\\.jdbc\\./;\n  private luceneRegex = /^org\\.apache\\.lucene\\./;\n  // tslint:enable:max-line-length\n\n  public render() {\n    const threadOverTime = getThreadsOverTime(this.props.threadDumps);\n    const filteredDumps = this.filterThreads(threadOverTime);\n    const dates = this.props.threadDumps.map(dump => ThreadDump.getFormattedTime(dump));\n    const isFilteredByStack = this.isFilteredByStack();\n\n    return (\n      <div id=\"wide-page\">\n        <ThreadsOverviewSettings\n          nonJvm={this.state.nonJvm}\n          tomcat={this.state.tomcat}\n          nonTomcat={this.state.nonTomcat}\n          database={this.state.database}\n          lucene={this.state.lucene}\n          nameFilter={this.state.nameFilter}\n          stackFilter={this.state.stackFilter}\n          onFilterChange={this.handleFilterChange}\n          onRegExpChange={this.handleRegExpChange}\n        />\n\n        <ThreadsOverviewFilteringSummary\n          isFilteredByStack={isFilteredByStack}\n          threadsNumber={threadOverTime.length}\n          threadDumps={filteredDumps}\n        />\n\n        <ThreadsOverviewLegend />\n        {!this.props.threadDumps.some(dump => dump.threads.length > 0)\n          ? <h4 dangerouslySetInnerHTML={{ __html: ThreadsOverviewPage.NO_THREAD_DUMPS }} />\n          : <ThreadsOverviewTable\n            dates={dates}\n            isFilteredByStack={isFilteredByStack}\n            threadDumps={filteredDumps}\n          />\n        }\n      </div>\n    );\n  }\n\n  private isFilteredByStack = (): boolean => {\n    return this.state.stackFilter.length > 0\n      || this.state.lucene\n      || this.state.database;\n  }\n\n  private filterThreads = (threadDumps: Array<Map<number, Thread>>) => {\n    let filtered = threadDumps;\n    filtered = this.filterByName(filtered, this.state.nameFilter);\n    this.markMatchingStackFilter(filtered, this.state.stackFilter);\n    return filtered;\n  }\n\n  private filterByName = (threadDumps: Array<Map<number, Thread>>, nameFilter: string) => {\n    let userProvided: RegExp;\n    if (nameFilter) {\n      try {\n        userProvided = new RegExp(nameFilter, 'i');\n      } catch {\n        // ignore when user provides invalid RegExp\n      }\n    }\n\n    return threadDumps\n      .filter(threads => this.state.nonJvm ? !this.matchesName(threads, this.jvmRegex) : true)\n      .filter(threads => this.state.tomcat ? this.matchesName(threads, this.tomcatRegex) : true)\n      .filter(threads => this.state.nonTomcat ? !this.matchesName(threads, this.tomcatRegex) : true)\n      .filter(threads => userProvided ? this.matchesName(threads, userProvided) : true);\n  }\n\n  private matchesName(threads: Map<number, Thread>, regex: RegExp): boolean {\n    for (const thread of threads) {\n      if (regex.test(thread[1].name)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  private markMatchingStackFilter = (threadDumps: Array<Map<number, Thread>>, filter: string) => {\n    this.clearAllMatches(threadDumps);\n\n    const filters = this.getStackTraceFilters(filter);\n    if (filters.length === 0) {\n      return;\n    }\n\n    threadDumps.forEach((threads) => {\n      threads.forEach(thread => this.markIfMatchesAllFilters(thread, filters));\n    });\n  }\n\n  private clearAllMatches = (threadDumps: Array<Map<number, Thread>>) => {\n    threadDumps.forEach((threads) => {\n      threads.forEach((thread) => {\n        thread.matchingFilter = false;\n      });\n    });\n  }\n\n  private getStackTraceFilters = (userProvidedFilter: string): RegExp[] => {\n    const filters: RegExp[] = [];\n\n    if (userProvidedFilter) {\n      try {\n        const userProvided = new RegExp(userProvidedFilter, 'i');\n        filters.push(userProvided);\n      } catch {\n        // ignore when user provides invalid RegExp\n      }\n    }\n\n    if (this.state.lucene) {\n      filters.push(this.luceneRegex);\n    }\n    if (this.state.database) {\n      filters.push(this.databaseRegex);\n    }\n\n    return filters;\n  }\n\n  private markIfMatchesAllFilters = (thread: Thread, filters: RegExp[]) => {\n    for (const filter of filters) {\n      if (!this.matchesStackTraceFilter(thread, filter)) {\n        return;\n      }\n    }\n    thread.matchingFilter = true;\n  }\n\n  private matchesStackTraceFilter = (thread: Thread, filter: RegExp) => {\n    for (const line of thread.stackTrace) {\n      if (filter.test(line)) {\n        return true;\n      }\n    }\n    return false;\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport { withThreadDumps as page } from '../common/withThreadDumps';\nimport './Container.css';\nimport CpuConsumersPage from './CpuConsumers/CpuConsumersPage';\nimport MonitorsPage from './Monitors/MonitorsPage';\nimport Navigation from './Navigation/Navigation';\nimport NavToggle from './Navigation/NavToggle';\nimport NotFoundError from './NotFoundError';\nimport SimilarStacksPage from './SimilarStacks/SimilarStacksPage';\nimport StuckThreadsPage from './StuckThreads/StuckThreadsPage';\nimport SummaryPage from './Summary/SummaryPage';\nimport ThreadsOverviewPage from './ThreadsOverview/ThreadsOverviewPage';\n\ntype State = {\n  navigationOpen: boolean;\n};\n\nclass Container extends React.PureComponent<any, State> {\n\n  public state: State = {\n    navigationOpen: true,\n  };\n\n  public render() {\n    return (\n      <div id=\"container\">\n        <Navigation open={this.state.navigationOpen} />\n\n        <NavToggle open={this.state.navigationOpen} onClick={this.toggleNavigation} />\n\n        <div id=\"content\">\n          <Switch>\n            <Route exact path=\"/:key/summary/\" component={page(SummaryPage)} />\n            <Route exact path=\"/:key/cpu-consumers/\" component={page(CpuConsumersPage)} />\n            <Route exact path=\"/:key/similar-stacks/\" component={page(SimilarStacksPage)} />\n            <Route exact path=\"/:key/stuck-threads/\" component={page(StuckThreadsPage)} />\n            <Route exact path=\"/:key/threads-overview/\" component={page(ThreadsOverviewPage)} />\n            <Route exact path=\"/:key/monitors/\" component={page(MonitorsPage)} />\n            <Route component={page(NotFoundError)} />\n          </Switch>\n        </div>\n      </div>\n    );\n  }\n\n  private toggleNavigation = () => {\n    this.setState(prevState => ({ navigationOpen: !prevState.navigationOpen }));\n  }\n}\n\nexport default Container;\n","import LoadAverages from './LoadAverage';\nimport MemoryUsage from './MemoryUsage';\nimport ThreadCpuUsage from './ThreadCpuUsage';\n\nexport default class CpuUsage {\n  public runningProcesses!: number;\n  public loadAverages!: LoadAverages | null;\n  public memoryUsage!: MemoryUsage;\n  public threadCpuUsages!: ThreadCpuUsage[];\n  private epoch: number | null;\n\n  constructor(timestamp: string) {\n    // timestamp is in the format of hh:mm:ss, e.g. 09:50:49\n    const hours = parseInt(timestamp.substring(0, 2), 10);\n    const minutes = parseInt(timestamp.substring(3, 5), 10);\n    const seconds = parseInt(timestamp.substring(6), 10);\n\n    this.epoch = hours * 3600000 + minutes * 60000 + seconds * 1000;\n  }\n\n  public getEpoch = () => {\n    return this.epoch;\n  }\n}\n","export default class LoadAverages {\n  public oneMinute!: number;\n  public fiveMinutes!: number;\n  public fifteenMinutes!: number;\n}\n","export default class MemoryUsage {\n  public memoryTotal!: number;\n  public memoryUsed!: number;\n  public memoryFree!: number;\n  public swapTotal!: number;\n  public swapUsed!: number;\n  public swapFree!: number;\n}\n","export default class ThreadCpuUsage {\n  public id!: number;\n  public cpuUsage!: number;\n  public runningFor!: string;\n}\n","export function matchOne(pattern: RegExp, str?: string): string {\n  const execArray: RegExpExecArray | null = pattern.exec(str || '');\n  return execArray ? execArray[1] : '';\n}\n\nexport function matchMultipleGroups(pattern: RegExp, str?: string): string[] {\n  const execArray: RegExpExecArray | null = pattern.exec(str || '');\n  return execArray != null ? execArray.slice(1) : [];\n}\n\n// any RegExp passed here needs to have the 'g' flag, otherwise it'll cause an infinite loop!\nexport function matchMultipleTimes(pattern: RegExp, str?: string): string[] {\n  const matches: string[] = [];\n\n  let execArray: RegExpExecArray | null = pattern.exec(str || '');\n  while (execArray != null) {\n    matches.push(execArray[1]);\n    execArray = pattern.exec(str || '');\n  }\n\n  return matches;\n}\n","import CpuUsage from '../types/CpuUsage';\nimport LoadAverages from '../types/LoadAverage';\nimport MemoryUsage from '../types/MemoryUsage';\nimport ThreadCpuUsage from '../types/ThreadCpuUsage';\nimport { matchMultipleGroups, matchMultipleTimes, matchOne } from './RegExpUtils';\n\nexport const CPU_USAGE_TIMESTAMP_PATTERN: RegExp = /^top - ([0-9]{2}:[0-9]{2}:[0-9]{2})/;\nconst LOAD_AVERAGES_PATTERN: RegExp = / load average: ([0-9\\.]+), ([0-9\\.]+), ([0-9\\.]+)/;\nconst RUNNING_PROCESSES_PATTERN: RegExp = /([0-9\\.]+) running/;\nconst TOTAL_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k?[ +]total/;\nconst USED_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k? used/;\nconst FREE_MEMORY_PATTERN: RegExp = /([0-9\\.]+)k? free/;\nconst COLUMN_MATCHER: RegExp = /([^\\s]+) +/g;\n\nexport type ParseCpuUsageCallback = (cpuUsage: CpuUsage) => void;\n\nexport default class CpuUsageParser {\n\n  public static parseCpuUsage(lines: string[], callback: ParseCpuUsageCallback) {\n    const cpuUsage: CpuUsage = new CpuUsage(matchOne(CPU_USAGE_TIMESTAMP_PATTERN, lines[0]));\n\n    // top - 10:25:00 up 3 days, 13:14,  1 user,  load average: 90.75, 97.79, 86.84\n    cpuUsage.loadAverages = CpuUsageParser.parseLoadAverages(lines.shift());\n\n    // Tasks: 466 total,   4 running, 462 sleeping,   0 stopped,   0 zombie\n    cpuUsage.runningProcesses = CpuUsageParser.parseRunningProcesses(lines.shift());\n\n    // Cpu(s): 11.4%us,  0.5%sy,  0.0%ni, 87.9%id,  0.0%wa,  0.0%hi,  0.1%si,  0.0%st\n    lines.shift(); // ignoring as it's not a useful data for us\n\n    // Mem:  65846052k total, 57542808k used,  8303244k free,  1200960k buffers\n    // Swap:  2097148k total,        0k used,  2097148k free, 23876776k cached\n    cpuUsage.memoryUsage = CpuUsageParser.parseMemoryUsage(lines.shift(), lines.shift());\n\n    //\n    // PID USER      PR  NI  VIRT  RES  SHR S %CPU %MEM    TIME+  COMMAND\n    // 13038 wrtjava   20   0 53.0g  26g 1.2g S 48.6 41.6  15:04.56 java\n    // 18393 wrtjava   20   0 53.0g  26g 1.2g S  9.7 41.6   4:08.78 java\n    // 19084 wrtjava   20   0 53.0g  26g 1.2g S  9.7 41.6   3:07.71 java\n    //  ... until <EOT>\n    cpuUsage.threadCpuUsages = CpuUsageParser.parseThreadCpuUsages(lines);\n\n    callback(cpuUsage);\n  }\n\n  private static parseLoadAverages(line?: string): LoadAverages | null {\n    const matches: string[] = matchMultipleGroups(LOAD_AVERAGES_PATTERN, line);\n\n    if (matches.length !== 3) {\n      console.error(`Unable to parse load averages from line: ${line}`);\n      return null;\n    }\n\n    const loadAverages = new LoadAverages();\n    loadAverages.oneMinute = parseFloat(matches[0]);\n    loadAverages.fiveMinutes = parseFloat(matches[1]);\n    loadAverages.fifteenMinutes = parseFloat(matches[2]);\n    return loadAverages;\n  }\n\n  private static parseRunningProcesses(line?: string): number {\n    return parseInt(matchOne(RUNNING_PROCESSES_PATTERN, line), 10);\n  }\n\n  private static parseMemoryUsage(line1?: string, line2?: string): MemoryUsage {\n    const memoryUsage: MemoryUsage = new MemoryUsage();\n\n    memoryUsage.memoryTotal = parseInt(matchOne(TOTAL_MEMORY_PATTERN, line1), 10);\n    memoryUsage.memoryUsed = parseInt(matchOne(USED_MEMORY_PATTERN, line1), 10);\n    memoryUsage.memoryFree = parseInt(matchOne(FREE_MEMORY_PATTERN, line1), 10);\n\n    memoryUsage.swapTotal = parseInt(matchOne(TOTAL_MEMORY_PATTERN, line2), 10);\n    memoryUsage.swapUsed = parseInt(matchOne(USED_MEMORY_PATTERN, line2), 10);\n    memoryUsage.swapFree = parseInt(matchOne(FREE_MEMORY_PATTERN, line2), 10);\n\n    return memoryUsage;\n  }\n\n  private static parseThreadCpuUsages(lines: string[]): ThreadCpuUsage[] {\n    const threadCpuUsages: ThreadCpuUsage[] = [];\n\n    for (let i = 2; i < lines.length; i++) {\n      const line: string = lines[i];\n      if (!line) continue;\n\n      const columns: string[] = matchMultipleTimes(COLUMN_MATCHER, line);\n      if (columns.length < 11) {\n        console.error(`Unable to parse thread cpu usage info from line: ${line}`);\n        continue;\n      }\n\n      const threadCpuUsage: ThreadCpuUsage = new ThreadCpuUsage();\n      threadCpuUsage.id = parseInt(columns[0], 10);\n      threadCpuUsage.cpuUsage = parseFloat(columns[8]);\n      threadCpuUsage.runningFor = columns[10];\n      threadCpuUsages.push(threadCpuUsage);\n    }\n\n    return threadCpuUsages;\n  }\n}\n","import Thread from './Thread';\n\nexport default class Lock {\n  public id!: string;\n  public className!: string;\n  public owner: Thread | null = null;\n  public waiting: Thread[] = [];\n}\n","import Lock from '../types/Lock';\nimport Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\nimport ThreadStatus from '../types/ThreadStatus';\nimport { matchMultipleGroups, matchOne } from './RegExpUtils';\n\nconst THREAD_HEADER_PREFIX: string = '\"';\n\n// tslint:disable:max-line-length\nexport const THREAD_DUMP_DATE_PATTERN: RegExp = /^([0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2})\\r?$/;\nconst NAME_PATTERN: RegExp = /^\\\"(.*)\\\" /;\nconst NID_PATTERN: RegExp = / nid=([0-9a-fx,]+)/;\nconst TID_PATTERN: RegExp = / tid=([0-9a-fx,]+)/;\nconst FRAME_PATTERN: RegExp = /^\\s+at (.*)/;\nconst THREAD_STATE_PATTERN: RegExp = /^\\s*java.lang.Thread.State: (.*)/;\nconst SYNCHRONIZATION_STATUS_PATTERN: RegExp = /^\\s+- (.*?) +<([x0-9a-f]+)> \\(a (.*)\\)/;\nconst HELD_LOCK_PATTERN: RegExp = /^\\s+- <([x0-9a-f]+)> \\(a (.*)\\)/;\n// tslint:enable:max-line-length\n\nexport type ParseThreadDumpCallback = (threadDump: ThreadDump) => void;\n\nexport default class ThreadDumpParser {\n\n  public static parseThreadDump(lines: string[], callback: ParseThreadDumpCallback) {\n    const threadDump = ThreadDump.from(matchOne(THREAD_DUMP_DATE_PATTERN, lines.shift() as string));\n    lines.forEach(line => ThreadDumpParser.parseLine(line, threadDump));\n    ThreadDumpParser.identifyAnonymousSynchronizers(threadDump.threads);\n\n    callback(threadDump);\n  }\n\n  private static currentThread: Thread;\n\n  private static parseLine(line: string, threadDump: ThreadDump): void {\n    if (line.startsWith(THREAD_HEADER_PREFIX)) {\n      ThreadDumpParser.parseThreadHeader(line, threadDump);\n    } else if (line) {\n      ThreadDumpParser.parseStackLine(line, threadDump);\n    }\n  }\n\n  private static parseThreadHeader(header: string, threadDump: ThreadDump): void {\n    const name = matchOne(NAME_PATTERN, header).trim();\n    // Depending on the way thread dumps were made, they can either have NID or TID\n    // We prefer NID, as it allows linking thread dumps with cpu_usage files\n    const nid = parseInt(matchOne(NID_PATTERN, header), 16);\n    const tid = parseInt(matchOne(TID_PATTERN, header), 16);\n    const id = nid !== 0 ? nid : tid;\n\n    ThreadDumpParser.currentThread = new Thread(id, name, threadDump.getEpoch());\n    threadDump.threads.push(ThreadDumpParser.currentThread);\n  }\n\n  private static parseStackLine(line: string, threadDump: ThreadDump): void {\n    if (!ThreadDumpParser.currentThread) {\n      return;\n    }\n\n    const frame: string = matchOne(FRAME_PATTERN, line);\n    if (frame) {\n      ThreadDumpParser.currentThread.stackTrace.push(frame);\n      return;\n    }\n\n    const threadState: string = matchOne(THREAD_STATE_PATTERN, line);\n    if (threadState) {\n      ThreadDumpParser.currentThread.status = ThreadDumpParser.stringToThreadStatus(threadState);\n      return;\n    }\n\n    const synchronizationStatus = matchMultipleGroups(SYNCHRONIZATION_STATUS_PATTERN, line);\n    if (synchronizationStatus && synchronizationStatus.length === 3) {\n      const state: string = synchronizationStatus[0];\n      const lockId: string = synchronizationStatus[1];\n      const className: string = synchronizationStatus[2];\n\n      switch (state) {\n        case 'waiting on':\n        case 'parking to wait for':\n        case 'waiting to lock':\n          let lock: Lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n          lock.waiting.push(ThreadDumpParser.currentThread);\n          ThreadDumpParser.currentThread.lockWaitingFor = lock;\n          return;\n\n        case 'locked':\n          if (ThreadDumpParser.currentThread.lockWaitingFor\n            && ThreadDumpParser.currentThread.lockWaitingFor.id === lockId) {\n            // lock is released while waiting for the notification\n            return;\n          }\n          lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n          lock.owner = ThreadDumpParser.currentThread;\n          ThreadDumpParser.currentThread.locksHeld.push(lock);\n          ThreadDumpParser.currentThread.classicalLocksHeld.push(lock);\n          return;\n\n        case 'eliminated':\n          // redundant lock that has been removed in the bytecode - we don't care about those\n          return;\n\n        default:\n          console.warn(`Unknown synchronziation status: ${line}`);\n          return;\n      }\n    }\n\n    const lockHeld: string[] = matchMultipleGroups(HELD_LOCK_PATTERN, line);\n    if (lockHeld && lockHeld.length === 2) {\n      const lockId: string = lockHeld[0];\n      const className: string = lockHeld[1];\n\n      const lock: Lock = ThreadDumpParser.getOrCreateLock(threadDump.locks, lockId, className);\n      lock.owner = ThreadDumpParser.currentThread;\n      ThreadDumpParser.currentThread.locksHeld.push(lock);\n    }\n  }\n\n  private static identifyAnonymousSynchronizers(threads: Thread[]): void {\n    // sometimes threads wait for notification, but the thread dump doesn't say on which object\n    // this function guesses it's the last hit classical lock\n    const validStatuses = [ThreadStatus.BLOCKED, ThreadStatus.TIMED_WAITING, ThreadStatus.WAITING];\n\n    threads\n      .filter(thread => !thread.lockWaitingFor)\n      .filter(thread => thread.status !== undefined && validStatuses.includes(thread.status))\n      .forEach((thread) => {\n        const lock: Lock = thread.classicalLocksHeld[0];\n        if (!lock) {\n          // this can happen if thread is TIMED_WAITING due to Thread.sleep()\n          return;\n        }\n        lock.owner = null;\n        lock.waiting.push(thread);\n\n        thread.lockWaitingFor = lock;\n        thread.locksHeld.splice(thread.locksHeld.indexOf(lock), 1);\n        thread.classicalLocksHeld.splice(thread.classicalLocksHeld.indexOf(lock), 1);\n      });\n  }\n\n  private static stringToThreadStatus(status: string): ThreadStatus {\n    const key = status as keyof typeof ThreadStatus;\n    const threadStatus = ThreadStatus[key];\n    if (threadStatus) {\n      return threadStatus;\n    }\n\n    if (status.startsWith('BLOCKED')) {\n      return ThreadStatus.BLOCKED;\n    }\n    if (status.startsWith('WAITING')) {\n      return ThreadStatus.WAITING;\n    }\n    if (status.startsWith('TIMED_WAITING')) {\n      return ThreadStatus.TIMED_WAITING;\n    }\n\n    return ThreadStatus.UNKNOWN;\n  }\n\n  private static getOrCreateLock(locks: Lock[], id: string, className: string): Lock {\n    for (const existingLock of locks) {\n      if (existingLock.id === id) {\n        return existingLock;\n      }\n    }\n\n    const newLock: Lock = new Lock();\n    newLock.id = id;\n    newLock.className = className;\n\n    locks.push(newLock);\n    return newLock;\n  }\n}\n","import CpuUsage from '../types/CpuUsage';\nimport Thread from '../types/Thread';\nimport ThreadDump from '../types/ThreadDump';\nimport CpuUsageParser, { CPU_USAGE_TIMESTAMP_PATTERN } from './CpuUsageParser';\nimport { matchOne } from './RegExpUtils';\nimport ThreadDumpParser, { THREAD_DUMP_DATE_PATTERN } from './ThreadDumpParser';\n\nconst MAX_TIME_DIFFERENCE_ALLOWED: number = 10000;\n\nexport default class Parser {\n  private cpuUsages: CpuUsage[] = [];\n  private threadDumps: ThreadDump[] = [];\n\n  private filesToParse: number = 0;\n  private onFilesParsed: (threadDumps: ThreadDump[]) => void;\n\n  constructor(onFilesParsed: (threadDumps: ThreadDump[]) => void) {\n    this.onFilesParsed = onFilesParsed;\n  }\n\n  public parseFiles = (uploaded: File[]) => {\n    this.cpuUsages = [];\n    this.threadDumps = [];\n    this.filesToParse = 0;\n\n    this.parse(uploaded);\n  }\n\n  private parse(files: File[]) {\n    for (const file of files) {\n      const reader = new FileReader();\n\n      reader.onload = () => {\n        const lines: string[] = (reader.result as string).split('\\n');\n        const firstLine = lines[0];\n\n        if (!firstLine) {\n          this.fileParsed();\n          return;\n        }\n\n        if (matchOne(CPU_USAGE_TIMESTAMP_PATTERN, firstLine)) {\n          this.parseCpuUsage(lines);\n        } else {\n          this.splitThreadDumps(lines);\n        }\n        this.fileParsed();\n      };\n\n      this.filesToParse = this.filesToParse + 1;\n      reader.readAsText(file);\n    }\n  }\n\n  // a single file can contain multiple thread dumps - split them into \"batches\"\n  private splitThreadDumps(lines: string[]) {\n    let currentDump: string[] = [];\n\n    for (const line of lines) {\n      // check if a new thread dump starts\n      if (matchOne(THREAD_DUMP_DATE_PATTERN, line)) {\n        // special case for the first thread dump in the file\n        if (currentDump.length === 0) {\n          currentDump.push(line);\n          continue;\n        }\n\n        this.parseThreadDump(currentDump);\n        currentDump = [line];\n      } else if (currentDump.length > 0) {\n        // do not add lines if there is no thread dump (e.g. when parsing catalina.out)\n        currentDump.push(line);\n      }\n    }\n\n    if (currentDump.length > 0) {\n      this.parseThreadDump(currentDump);\n    }\n  }\n\n  private parseCpuUsage = (lines: string[]) => {\n    CpuUsageParser.parseCpuUsage(lines.slice(), this.onParsedCpuUsage);\n  }\n\n  private onParsedCpuUsage = (cpuUsage: CpuUsage) => {\n    this.cpuUsages.push(cpuUsage);\n  }\n\n  private parseThreadDump = (lines: string[]) => {\n    ThreadDumpParser.parseThreadDump(lines.slice(), this.onParsedThreadDump);\n  }\n\n  private onParsedThreadDump = (threadDump: ThreadDump) => {\n    if (threadDump.threads.length > 0) {\n      this.threadDumps.push(threadDump);\n    }\n  }\n\n  private fileParsed() {\n    this.filesToParse = this.filesToParse - 1;\n\n    // finish parsing if there are no files left\n    if (!this.filesToParse) {\n      this.groupCpuUsagesWithThreadDumps();\n      this.sortThreadDumps();\n      this.onFilesParsed(this.threadDumps);\n    }\n  }\n\n  private groupCpuUsagesWithThreadDumps() {\n    this.cpuUsages\n      .filter(cpuUsage => cpuUsage.getEpoch())\n      .forEach((cpuUsage) => {\n        const threadDump: ThreadDump = this.findCorrespondingThreadDump(cpuUsage);\n        this.groupCpuUsageWithThreadDump(threadDump, cpuUsage);\n      });\n  }\n\n  private sortThreadDumps() {\n    this.threadDumps.sort((t1, t2) => {\n      if (t1.getEpoch() === t2.getEpoch()) {\n        return 0;\n      }\n      if (!t1.getEpoch()) {\n        return -1;\n      }\n      if (!t2.getEpoch()) {\n        return 1;\n      }\n      return (t1.getEpoch() as number) - (t2.getEpoch() as number);\n    });\n  }\n\n  private findCorrespondingThreadDump(cpuUsage: CpuUsage): ThreadDump {\n    const AN_HOUR = 60 * 60 * 1000;\n    const cpuUsageEpoch = cpuUsage.getEpoch();\n    let closest: ThreadDump | null = null;\n    let smallestDiff: number = MAX_TIME_DIFFERENCE_ALLOWED;\n\n    this.threadDumps\n      .filter(threadDump => threadDump.getEpoch())\n      .forEach((threadDump) => {\n        const dumpEpoch = threadDump.getEpoch();\n\n        if (!dumpEpoch || !cpuUsageEpoch) {\n          return;\n        }\n\n        const diff = Math.abs((dumpEpoch % AN_HOUR) - (cpuUsageEpoch % AN_HOUR));\n\n        if (diff < smallestDiff) {\n          smallestDiff = diff;\n          closest = threadDump;\n        }\n      });\n\n    if (closest == null) {\n      closest = ThreadDump.fromEpoch(cpuUsageEpoch);\n      this.threadDumps.push(closest);\n    }\n\n    return closest;\n  }\n\n  private groupCpuUsageWithThreadDump(threadDump: ThreadDump, cpuUsage: CpuUsage): void {\n    threadDump.loadAverages = cpuUsage.loadAverages;\n    threadDump.runningProcesses = cpuUsage.runningProcesses;\n    threadDump.memoryUsage = cpuUsage.memoryUsage;\n\n    cpuUsage.threadCpuUsages.forEach((cpu) => {\n      const thread = this.findThreadWithId(threadDump, cpu.id);\n\n      if (thread) {\n        thread.cpuUsage = cpu.cpuUsage;\n        thread.runningFor = cpu.runningFor;\n      }\n    });\n  }\n\n  private findThreadWithId(threadDump: ThreadDump, id: number): Thread | null {\n    for (const thread of threadDump.threads) {\n      if (thread.id === id) {\n        return thread;\n      }\n    }\n    return null;\n  }\n}\n","import React from 'react';\nimport { ISSUE_TRACKER_LINK, SOURCE_CODE_LINK } from '../Navigation/Navigation';\nimport OutboundLink from '../Navigation/OutboundLink';\n\n// tslint:disable:max-line-length\nconst header = 'For the full experience, you should gather thread dumps along with <i>top</i> outputs.';\nconst GATHER_DATA_LINK = 'https://github.com/drauf/watson/blob/master/README.md#gathering-thread-dumps';\nconst disclaimer = 'Watson works fully offline. No files will leave your machine.';\n// tslint:enable:max-line-length\n\nconst stopPropagation = (event: React.MouseEvent) => {\n  // prevent opening the dropzone popup when clicking on the navigation links\n  event.stopPropagation();\n};\n\nconst DropzoneGuide: React.SFC = () => (\n  <div id=\"dropzone-guide\" onClick={stopPropagation}>\n    <h5 dangerouslySetInnerHTML={{ __html: header }} />\n    <span>\n      See: <OutboundLink to={GATHER_DATA_LINK}>\n        How to gather data\n        </OutboundLink>\n    </span>\n\n    <p dangerouslySetInnerHTML={{ __html: disclaimer }} />\n\n    <ul id=\"dropzone-links\">\n      <li>\n        <OutboundLink to={ISSUE_TRACKER_LINK}>\n          Issue tracker\n        </OutboundLink>\n      </li>\n      <li>\n        <OutboundLink to={SOURCE_CODE_LINK}>\n          Source code\n        </OutboundLink>\n      </li>\n    </ul>\n  </div>\n);\n\nexport default DropzoneGuide;\n","import React from 'react';\nimport Dropzone from 'react-dropzone';\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\nimport { setThreadDumps } from '../../common/threadDumpsStorageService';\nimport Parser from '../../parser/Parser';\nimport ThreadDump from '../../types/ThreadDump';\nimport DropzoneGuide from './DropzoneGuide';\nimport './FullPageDropzone.css';\n\nclass FullPageDropzone extends React.PureComponent<RouteComponentProps> {\n  public render = () => (\n    <Dropzone multiple={true} onDrop={this.onDrop}>\n      {({ getRootProps, getInputProps, isDragActive }) => (\n        <div id=\"dropzone\" {...getRootProps()}>\n          <input {...getInputProps()} />\n          {\n            isDragActive ?\n              <h4>Drop files here...</h4> :\n              <h4>Drop the catalog here, or click to select files to load.</h4>\n          }\n          <DropzoneGuide />\n        </div>\n      )}\n    </Dropzone>\n  )\n\n  private onDrop = (files: File[]): void => {\n    const parser = new Parser(this.onParsed);\n    parser.parseFiles(files);\n  }\n\n  private onParsed = (threadDumps: ThreadDump[]): void => {\n    const key = setThreadDumps(threadDumps);\n    if (threadDumps.some(dump => !!dump.loadAverages)) {\n      this.props.history.push(`/${key}/summary/`);\n    } else {\n      this.props.history.push(`/${key}/similar-stacks/`);\n    }\n  }\n}\n\nexport default withRouter(FullPageDropzone);\n","import React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport './App.css';\nimport Container from './components/Container';\nimport FullPageDropzone from './components/FullPageDropzone/FullPageDropzone';\n\nconst App: React.SFC<RouteComponentProps> = () => (\n  <Switch>\n    <Route exact path=\"/\" component={FullPageDropzone} />\n    <Route path=\"/:key\" component={Container} />\n  </Switch>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter as Router, Route } from 'react-router-dom';\nimport App from './App';\nimport { clearOldThreadDumps } from './common/threadDumpsStorageService';\nimport './index.css';\n\nclearOldThreadDumps();\n\nReactDOM.render(\n  <Router>\n    <Route component={App} />\n  </Router>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}